<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>分布式架构——WebService基础</title>
    <url>/2020/01/07/%E5%88%86%E5%B8%83%E5%BC%8F%E6%9E%B6%E6%9E%84%E2%80%94%E2%80%94WebService%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="WebService-简介"><a href="#WebService-简介" class="headerlink" title="WebService 简介"></a>WebService 简介</h2><p>W3C 组织对其的定义如下：它是一个软件系统，为了支持跨网络的机器间相互操作交互而设计。WebService 服务通常被定义为一组模块化的 API，它们可以通过网络进行调用，来执行远程系统的请求服务。</p>
<p>简单的说：WebService 即 Web 服务，它是一种跨编程语言和跨操作系统平台的远程调用技术。</p>
<a id="more"></a>

<ul>
<li>跨编程语言和跨操作平台，就是说当服务端程序采用 Java 编写，客户端程序则可以采用其他编程语言编写；跨操作系统平台则是指服务端程序和客户端程序可以在不同的操作系统上运行。  </li>
<li>远程调用，就是一台计算机上的一个程序可以调用到另外一台计算机上的一个对象的方法。</li>
</ul>
<p>基本的 WebService 平台是 XML+HTTP。</p>
<h3 id="什么是-WebService"><a href="#什么是-WebService" class="headerlink" title="什么是 WebService"></a>什么是 WebService</h3><ul>
<li>WebService 是应用程序组件；</li>
<li>WebService 使用开放协议进行通信；</li>
<li>WebService 是独立的（self-contained）并可自我描述；</li>
<li>WebService 可通过使用 UDDI 来发现；</li>
<li>WebService 可被其他应用程序使用；</li>
<li>XML 是 WebService 的基础。</li>
</ul>
<h3 id="WebService-如何工作"><a href="#WebService-如何工作" class="headerlink" title="WebService 如何工作"></a>WebService 如何工作</h3><h3 id="WebService-两种类型的应用"><a href="#WebService-两种类型的应用" class="headerlink" title="WebService 两种类型的应用"></a>WebService 两种类型的应用</h3><h2 id="WebService-平台元素"><a href="#WebService-平台元素" class="headerlink" title="WebService 平台元素"></a>WebService 平台元素</h2><p>WebService 拥有三种基本的元素，它们是：SOAP、WSDL 以及 UDDI。基本的 WebService 平台是 XML + HTTP。</p>
<h3 id="什么是-SOAP"><a href="#什么是-SOAP" class="headerlink" title="什么是 SOAP"></a>什么是 SOAP</h3><h3 id="什么是-WSDL"><a href="#什么是-WSDL" class="headerlink" title="什么是 WSDL"></a>什么是 WSDL</h3><h3 id="什么是-UDDI"><a href="#什么是-UDDI" class="headerlink" title="什么是 UDDI"></a>什么是 UDDI</h3><p>未完……</p>
]]></content>
      <categories>
        <category>分布式</category>
      </categories>
      <tags>
        <tag>WebService</tag>
      </tags>
  </entry>
  <entry>
    <title>分布式架构——Nginx基础</title>
    <url>/2019/12/10/%E5%88%86%E5%B8%83%E5%BC%8F%E6%9E%B6%E6%9E%84%E2%80%94%E2%80%94Nginx%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Nginx-简介"><a href="#Nginx-简介" class="headerlink" title="Nginx 简介"></a>Nginx 简介</h2><p>Nginx（engine x）是一个高性能的 HTTP 和反向代理服务器，也是一个 IMAP/POP3/SMTP 服务器，并在一个 BSD-like 协议下发行。其特点是占有内存少，并发能力强；并且 Nginx 以它的稳定性、丰富的功能集、示例配置文件和低系统资源的消耗而闻名。</p>
<a id="more"></a>

<h2 id="Nginx-用途"><a href="#Nginx-用途" class="headerlink" title="Nginx 用途"></a>Nginx 用途</h2><h3 id="HTTP-静态服务器"><a href="#HTTP-静态服务器" class="headerlink" title="HTTP 静态服务器"></a>HTTP 静态服务器</h3><p>Nginx 作 HTTP 静态服务器时可以用来存储图片，文件等静态资源。</p>
<h3 id="负载均衡服务器"><a href="#负载均衡服务器" class="headerlink" title="负载均衡服务器"></a>负载均衡服务器</h3><p>Nginx 既可以在内部直接支持 Rails 和 PHP 程序对外进行服务，也可以支持作为 HTTP 代理服务器对外进行服务。 Nginx 采用 C 进行编写，不论是系统资源开销还是 CPU 使用效率都比 Perlbal 要好很多。</p>
<h3 id="邮件代理服务器"><a href="#邮件代理服务器" class="headerlink" title="邮件代理服务器"></a>邮件代理服务器</h3><p>Nginx 同时也是一个非常优秀的邮件代理服务器（最早开发这个产品的目的之一也是作为邮件代理服务器）， Last.fm 描述了成功并且美妙的使用经验。</p>
<h3 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h3><p>正向代理是客户端直接访问服务器（隐藏真实客户端）。而反向代理是客户端请求 Nginx，Nginx 请求服务器，然后返回数据给客户端（隐藏真实服务端）。</p>
<h2 id="Nginx-特点"><a href="#Nginx-特点" class="headerlink" title="Nginx 特点"></a>Nginx 特点</h2><h3 id="热部署"><a href="#热部署" class="headerlink" title="热部署"></a>热部署</h3><p>在 master 管理进程与 worker 工作进程的分离设计中，Nginx 具有热部署的功能，在 7× 24 小时不间断服务的前提下，可升级 Nginx 的可执行文件。也可以在不停止服务的情况下修改配置文件，更换日志文件等功能。</p>
<h3 id="高并发"><a href="#高并发" class="headerlink" title="高并发"></a>高并发</h3><p>理论上，Nginx 支持的并发连接上限取决于内存，并且能够及时的处理更多的并发请求。</p>
<h3 id="低内存"><a href="#低内存" class="headerlink" title="低内存"></a>低内存</h3><p>在一般的情况下，10000 个非活跃的 HTTP Keep-Alive 连接在 Nginx 中仅消耗 2.5M 的内存，这也是 Nginx 支持高并发连接的基础。</p>
<h3 id="响应快"><a href="#响应快" class="headerlink" title="响应快"></a>响应快</h3><p>在正常的情况下，单次请求会得到更快的响应。在高峰期，Nginx 可以比其他的 Web 服务器更快的响应请求。</p>
<h3 id="高可靠性"><a href="#高可靠性" class="headerlink" title="高可靠性"></a>高可靠性</h3><p>高可靠性来自其核心框架代码的优秀设计、模块设计的简单性，并且这些模块都非常的稳定；当一个worker进程出错时，master 管理进程会快速的拉起新的 worker 子进程提供服务。</p>
<h2 id="Nginx-Web-服务器优点"><a href="#Nginx-Web-服务器优点" class="headerlink" title="Nginx Web 服务器优点"></a>Nginx Web 服务器优点</h2><p>常见的 Web 服务器有 Nginx、Apache、Lighttpd 等，他们的特点如下：</p>
<table>
<thead>
<tr>
<th align="left">Web 服务器</th>
<th align="left">Nginx</th>
<th align="left">Apache</th>
<th align="left">Lighttpd</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Proxy 代理</td>
<td align="left">非常好</td>
<td align="left">非常好</td>
<td align="left">一般</td>
</tr>
<tr>
<td align="left">Rewriter（重写）</td>
<td align="left">非常好</td>
<td align="left">好</td>
<td align="left">一般</td>
</tr>
<tr>
<td align="left">Fcgi（接口）</td>
<td align="left">好</td>
<td align="left">不好</td>
<td align="left">非常好</td>
</tr>
<tr>
<td align="left">热部署</td>
<td align="left">支持</td>
<td align="left">不支持</td>
<td align="left">不支持</td>
</tr>
<tr>
<td align="left">系统压力比较</td>
<td align="left">很小</td>
<td align="left">很大</td>
<td align="left">比较小</td>
</tr>
<tr>
<td align="left">稳定性</td>
<td align="left">非常好</td>
<td align="left">好</td>
<td align="left">不好</td>
</tr>
<tr>
<td align="left">安全性</td>
<td align="left">一般</td>
<td align="left">好</td>
<td align="left">一般</td>
</tr>
<tr>
<td align="left">技术支持</td>
<td align="left">很少</td>
<td align="left">非常好</td>
<td align="left">一般</td>
</tr>
<tr>
<td align="left">静态文件处理</td>
<td align="left">非常好</td>
<td align="left">一般</td>
<td align="left">好</td>
</tr>
<tr>
<td align="left">Vhosts 虚拟主机</td>
<td align="left">不支持</td>
<td align="left">支持</td>
<td align="left">支持</td>
</tr>
<tr>
<td align="left">反向代理</td>
<td align="left">非常好</td>
<td align="left">一般</td>
<td align="left">一般</td>
</tr>
<tr>
<td align="left">Session sticky（粘滞会话）</td>
<td align="left">不支持</td>
<td align="left">支持</td>
<td align="left">不支持</td>
</tr>
<tr>
<td align="left">Epoll（I/O 事件通知机制）</td>
<td align="left">支持</td>
<td align="left">不支持</td>
<td align="left">支持</td>
</tr>
<tr>
<td align="left">量级</td>
<td align="left">轻量</td>
<td align="left">重量级</td>
<td align="left">轻量</td>
</tr>
<tr>
<td align="left">复杂度（安装、配置）</td>
<td align="left">简单</td>
<td align="left">较复杂</td>
<td align="left">简单</td>
</tr>
</tbody></table>
<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><h3 id="启动-Nginx"><a href="#启动-Nginx" class="headerlink" title="启动 Nginx"></a>启动 Nginx</h3><h4 id="Linux-下启动-Nginx"><a href="#Linux-下启动-Nginx" class="headerlink" title="Linux 下启动 Nginx"></a>Linux 下启动 Nginx</h4><figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">service nginx <span class="literal">start</span></span><br></pre></td></tr></table></figure>

<h4 id="Windows-下启动-Nginx"><a href="#Windows-下启动-Nginx" class="headerlink" title="Windows 下启动 Nginx"></a>Windows 下启动 Nginx</h4><figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line"><span class="literal">start</span> nginx</span><br></pre></td></tr></table></figure>

<h4 id="平滑启动-Nginx"><a href="#平滑启动-Nginx" class="headerlink" title="平滑启动 Nginx"></a>平滑启动 Nginx</h4><p>在不停止 Nginx 的情况下，重启 Nginx，重新加载配置文件，启动新的工作线程，停止旧的工作线程。</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">nginx -s reload</span></span><br></pre></td></tr></table></figure>

<h3 id="停止-Nginx"><a href="#停止-Nginx" class="headerlink" title="停止 Nginx"></a>停止 Nginx</h3><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">nginx -s <span class="built_in">stop</span></span><br></pre></td></tr></table></figure>

<p>stop 是快速关闭，不管有没有正在处理的请求。</p>
<figure class="highlight cos"><table><tr><td class="code"><pre><span class="line">nginx -<span class="keyword">s</span> <span class="keyword">quit</span></span><br></pre></td></tr></table></figure>

<p>quit 是 Nginx 在退出前完成已经接受的连接请求。</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">pkill <span class="number">-9</span> nginx</span><br></pre></td></tr></table></figure>

<p>强制停止 Nginx。</p>
<h3 id="检查-nginx-conf-文件的修改是否正确"><a href="#检查-nginx-conf-文件的修改是否正确" class="headerlink" title="检查 nginx.conf 文件的修改是否正确"></a>检查 nginx.conf 文件的修改是否正确</h3><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">nginx -t -c <span class="regexp">/etc/</span>nginx<span class="regexp">/nginx.conf</span></span><br></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">nginx -t</span></span><br></pre></td></tr></table></figure>

<h3 id="重载配置-Nginx"><a href="#重载配置-Nginx" class="headerlink" title="重载配置 Nginx"></a>重载配置 Nginx</h3><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">nginx -s reload</span></span><br></pre></td></tr></table></figure>

<h3 id="查看-Nginx-的版本"><a href="#查看-Nginx-的版本" class="headerlink" title="查看 Nginx 的版本"></a>查看 Nginx 的版本</h3><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">nginx -v</span></span><br></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">nginx -V</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>分布式</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>分布式架构——Redis高级</title>
    <url>/2019/11/02/%E5%88%86%E5%B8%83%E5%BC%8F%E6%9E%B6%E6%9E%84%E2%80%94%E2%80%94Redis%E9%AB%98%E7%BA%A7/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Redis-事务"><a href="#Redis-事务" class="headerlink" title="Redis 事务"></a>Redis 事务</h2><p>事务是指一系列操作步骤，这一系列的操作步骤，要么完全地执行，要么完全地不执行。Redis 中的事务（transaction）是一组命令的集合，至少是两个或两个以上的命令， redis 事务保证这些命令被执行时中间不会被任何其他操作打断。</p>
<a id="more"></a>

<h3 id="事务操作的命令"><a href="#事务操作的命令" class="headerlink" title="事务操作的命令"></a>事务操作的命令</h3><h4 id="multi"><a href="#multi" class="headerlink" title="multi"></a>multi</h4><p>语法： multi</p>
<p>作用： 标记一个事务的开始。事务内的多条命令会按照先后顺序被放进一个队列当中。</p>
<p>返回值： 总是返回 ok</p>
<h4 id="exec"><a href="#exec" class="headerlink" title="exec"></a>exec</h4><p>语法： exec</p>
<p>作用： 执行所有事务块内的命令。</p>
<p>返回值： 事务内的所有执行语句内容，事务被打断（影响） 返回 nil</p>
<h4 id="discard"><a href="#discard" class="headerlink" title="discard"></a>discard</h4><p>语法： discard</p>
<p>作用： 取消事务，放弃执行事务块内的所有命令。</p>
<p>返回值：总是返回 ok</p>
<h4 id="watch"><a href="#watch" class="headerlink" title="watch"></a>watch</h4><p>语法： watch key [key …]</p>
<p>作用： 监视一个(或多个) key ，如果在事务执行之前这个(或这些) key 被其他命令所改动，那么事务将被打断。</p>
<p>返回值： 总是返回 ok</p>
<h4 id="unwatch"><a href="#unwatch" class="headerlink" title="unwatch"></a>unwatch</h4><p>语法： unwatch</p>
<p>作用：取消 WATCH 命令对所有 key 的监视。如果在执行 WATCH 命令之后， EXEC 命令或 DISCARD 命令先被执行了的话，那么就不需要再执行 UNWATCH 了。</p>
<p>返回值：总是返回 ok</p>
<h3 id="事务的实现"><a href="#事务的实现" class="headerlink" title="事务的实现"></a>事务的实现</h3><h4 id="正常执行事务"><a href="#正常执行事务" class="headerlink" title="正常执行事务"></a>正常执行事务</h4><p>事务的执行步骤：   </p>
<ol>
<li>开启事务；  </li>
<li>向事务队列中加入命令；  </li>
<li>执行事务提交。</li>
</ol>
<h4 id="事务执行-exec-之前"><a href="#事务执行-exec-之前" class="headerlink" title="事务执行 exec 之前"></a>事务执行 exec 之前</h4><p>事务执行 exec 之前， 入队命令错误（语法错误；严重错误导致服务器不能正常工作（ 例如内存不足）），放弃事务。</p>
<p>事务的执行步骤：  </p>
<ol>
<li>mulit 正常命令；  </li>
<li>set key value 正常命令；  </li>
<li>incr 命令语法错误；  </li>
<li>exec 无法执行事务，那么第一条正确的命令也不会执行，所以 key 的值不会设置成功。</li>
</ol>
<h4 id="事务执行-exec-之后"><a href="#事务执行-exec-之后" class="headerlink" title="事务执行 exec 之后"></a>事务执行 exec 之后</h4><p>事务执行 exec 命令后，执行队列命令，命令执行错误，事务提交。</p>
<p>事务的执行步骤：  </p>
<ol>
<li>mulit 正常命令；  </li>
<li>set username zhangsan 正常命令；  </li>
<li>lpop username 正常命令，语法没有错误，执行命令时才会有错误；  </li>
<li>exec 正常执行 ,发现错误可以在事务提交前放弃事务， 执行 discard。</li>
</ol>
<h4 id="放弃事务"><a href="#放弃事务" class="headerlink" title="放弃事务"></a>放弃事务</h4><p>事务的执行步骤：</p>
<ol>
<li>mulit 开启事务；  </li>
<li>set age 25 命令入队；  </li>
<li>set age 30 命令入队；  </li>
<li>discard 放弃事务，则命令队列不会被执行。</li>
</ol>
<h4 id="Redis-的-WATCH-机制"><a href="#Redis-的-WATCH-机制" class="headerlink" title="Redis 的 WATCH 机制"></a>Redis 的 WATCH 机制</h4><h5 id="WATCH-机制原理"><a href="#WATCH-机制原理" class="headerlink" title="WATCH 机制原理"></a>WATCH 机制原理</h5><p>使用 WATCH 监视一个或多个 key , 跟踪 key 的 value 修改情况， 如果有 key 的 value 值在事务 EXEC 执行之前被修改了， 整个事务被取消。 EXEC 返回提示信息， 表示事务已经失败。</p>
<p>WATCH 机制使的事务 EXEC 变的有条件，事务只有在被 WATCH 的 key 没有修改的前提下才能执行。不满足条件，事务被取消。使用 WATCH 监视了一个带过期时间的键， 那么即使这个键过期了， 事务仍然可以正常执行。</p>
<p>大多数情况下， 不同的客户端会访问不同的键， 相互同时竞争同一 key 的情况一般都很少， 乐观锁能够以很好的性能解决数据冲突的问题。</p>
<h5 id="取消-key-的监视（WATCH）"><a href="#取消-key-的监视（WATCH）" class="headerlink" title="取消 key 的监视（WATCH）"></a>取消 key 的监视（WATCH）</h5><ol>
<li>WATCH 命令可以被调用多次。 对键的监视从 WATCH 执行之后开始生效， 直到调用 EXEC 为止。 不管事务是否成功执行， 对所有键的监视都会被取消。  </li>
<li>当客户端断开连接时， 该客户端对键的监视也会被取消。  </li>
<li>UNWATCH 命令可以手动取消对所有键的监视。</li>
</ol>
<h5 id="WATCH-的事例"><a href="#WATCH-的事例" class="headerlink" title="WATCH 的事例"></a>WATCH 的事例</h5><h2 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h2><h3 id="持久化概述"><a href="#持久化概述" class="headerlink" title="持久化概述"></a>持久化概述</h3><p>持久化可以理解为存储，就是将数据存储到一个不会丢失的地方，如果把数据放在内存中，电脑关闭或重启数据就会丢失，所以放在内存中的数据不是持久化的，而放在磁盘就算是一种持久化。</p>
<p>Redis 的数据存储在内存中，内存是瞬时的，如果 Linux 宕机或重启，又或者 Redis 崩溃或重启，所有的内存数据都会丢失，为解决这个问题， Redis 提供两种机制对数据进行持久化存储，便于发生故障后能迅速恢复数据。</p>
<h3 id="持久化方式"><a href="#持久化方式" class="headerlink" title="持久化方式"></a>持久化方式</h3><h4 id="RDB-方式"><a href="#RDB-方式" class="headerlink" title="RDB 方式"></a>RDB 方式</h4><p>Redis Database（RDB），就是在指定的时间间隔内将内存中的数据集快照写入磁盘，数据恢复时将快照文件直接再读到内存。</p>
<p>RDB 保存了在某个时间点的数据集（全部数据）。存储在一个二进制文件中，只有一个文件。默认是 dump.rdb。 RDB 技术非常适合做备份，可以保存最近一个小时，一天，一个月的全部数据。保存数据是在单独的进程中写文件，不影响 Redis 的正常使用。 RDB 恢复数据时比其他 AOF 速度快。</p>
<h5 id="RDB-方式实现"><a href="#RDB-方式实现" class="headerlink" title="RDB 方式实现"></a>RDB 方式实现</h5><p>RDB 方式的数据持久化，仅需在 redis.conf 文件中配置即可，默认配置是启用的。</p>
<p>在配置文件 redis.conf 中搜索 SNAPSHOTTING， 查找在注释开始和结束之间的关于 RDB 的配置说明。配 SNAPSHOTTING 置地方有三处。</p>
<h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><p>优点：由于存储的是数据快照文件，恢复数据很方便，也比较快。</p>
<p>缺点：  </p>
<ol>
<li>会丢失最后一次快照以后更改的数据。 如果应用程序能容忍一定数据的丢失，那么使用 RDB 是不错的选择； 否则，使用 RDB 就不是一个很好的选择。  </li>
<li>由于需要经常操作磁盘， RDB 会分出一个子进程。如果 Redis 数据库很大的话，子进程占用比较多的时间，并且可能会影响 Redis 暂停服务一段时间（ millisecond 级别），如果数据库超级大并且服务器 CPU 比较弱，有可能是会达到一秒。</li>
</ol>
<h4 id="AOF-方式"><a href="#AOF-方式" class="headerlink" title="AOF 方式"></a>AOF 方式</h4><p>Append-only File（AOF）， Redis 每次接收到一条改变数据的命令时，它将把该命令写到一个 AOF 文件中（只记录写操作，读操作不记录），当 Redis 重启时，它通过执行 AOF 文件中所有的命令来恢复数据。</p>
<h5 id="AOF方式实现"><a href="#AOF方式实现" class="headerlink" title="AOF方式实现"></a>AOF方式实现</h5><p>AOF 方式的数据持久化，仅需在 redis.conf 文件中配置即可。</p>
<p>配置项：  </p>
<ol>
<li><p>appendonly：默认是 no，改成 yes 即开启了 AOF 持久化  </p>
</li>
<li><p>appendfilename：指定 AOF 文件名，默认文件名为 appendonly.aof  </p>
</li>
<li><p>dir : 指定 RDB 和 AOF 文件存放的目录，默认是 ./  </p>
</li>
<li><p>appendfsync：配置向 aof 文件写命令数据的策略： </p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="bullet">* </span>no：不主动进行同步操作，而是完全交由操作系统来做（即每 30 秒一次），比较快但不是很安全。  </span><br><span class="line"><span class="bullet">* </span>always：每次执行写入都会执行同步，慢一些但是比较安全。  </span><br><span class="line"><span class="bullet">* </span>everysec：每秒执行一次同步操作，比较平衡，介于速度和安全之间。这是默认项。</span><br></pre></td></tr></table></figure>
</li>
<li><p>auto-aof-rewrite-min-size：允许重写的最小 AOF 文件大小，默认是 64M 。当 AOF 文件大于 64M 时，开始整理 AOP 文件， 去掉无用的操作命令。缩小 AOP 文件。</p>
</li>
</ol>
<h5 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h5><ol>
<li>append-only 文件是另一个可以提供完全数据保障的方案。  </li>
<li>AOF 文件会在操作过程中变得越来越大。如果要做一百次加法计算，最后只会在数据库里面得到最终的数值，但是在 AOF 里面会存在 100 次记录，其中 99 条记录对最终的结果是无用的；但 Redis 支持在不影响服务的前提下在后台重构 AOF 文件，让文件得以整理变小。  </li>
<li>可以同时使用这两种方式， Redis 默认优先加载 AOF 文件（ AOF 数据最完整）。</li>
</ol>
<h2 id="主从复制（Master-Slave）"><a href="#主从复制（Master-Slave）" class="headerlink" title="主从复制（Master/Slave）"></a>主从复制（Master/Slave）</h2><p>主从复制是使用两个或两个以上相同的数据库，将一个数据库当做主数据库，而另一个数据库当做从数据库。在主数据库中进行相应操作时，从数据库记录下所有主数据库的操作，使其二者一模一样。</p>
<h3 id="读写分离"><a href="#读写分离" class="headerlink" title="读写分离"></a>读写分离</h3><p>读在从库读，写在主库写。简单来说就是将数据库分为了主库和从库，主库用于写数据，多个从库完成读数据的操作，主从库之间通过某种机制进行数据的同步，是一种常见的数据库架构。</p>
<h4 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h4><ol>
<li><p>修改配置文件，启动时，服务器读取配置文件，并自动成为指定服务器的从服务器，从而构成主从复制的关系。</p>
</li>
<li><p>./redis-server –slaveof <master-ip> <master-port>，在启动 Redis 时指定当前服务成为某个主 Redis 服务的从 slave</master-port></master-ip></p>
</li>
</ol>
<p>（1） 新建三个 Redis 配置文件</p>
<p>（2） 编辑 Master 配置文件</p>
<p>（3） 编辑 Slave 配置文件</p>
<p>（4） 启动服务器 Master/Slave 都启动</p>
<p>（5） 查看配置后的服务信息</p>
<p>（6） 向 Master 写入数据</p>
<p>（7） 再从 Slave 读数据</p>
<h4 id="容灾处理"><a href="#容灾处理" class="headerlink" title="容灾处理"></a>容灾处理</h4><p>当 Master 服务出现故障，需手动将 slave 中的一个提升为 master， 剩下的 slave 挂至新的master 上（冷处理：机器挂掉了，再处理）。</p>
<h5 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h5><ul>
<li>slaveof no one，将一台 slave 服务器提升为 Master （提升某 slave 为 master）  </li>
<li>slaveof 127.0.0.1 6381 （将 slave 挂至新的 master 上）</li>
</ul>
<h5 id="执行步骤"><a href="#执行步骤" class="headerlink" title="执行步骤"></a>执行步骤</h5><p>（1） 将 Master:6380 停止（模拟挂掉）</p>
<p>（2） 选择一个 Slave 升到 Master，其它的 Slave 挂到新提升的 Master</p>
<p>（3） 将其他 Slave 挂到新的 Master</p>
<p>（4） 将原来的服务器重新添加到主从结构中</p>
<p>（5） 查看新的 Master 信息</p>
<h4 id="三个重要命令"><a href="#三个重要命令" class="headerlink" title="三个重要命令"></a>三个重要命令</h4><ol>
<li>进入客户端指定端口： ./redis-cli -p 6380  </li>
<li>默认都是主 master  </li>
<li>info replication： 查看 redis 服务器所处角色</li>
</ol>
<h4 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h4><ol>
<li>一个 master 可以有多个 slave。  </li>
<li>slave 下线，读请求的处理性能下降。  </li>
<li>master 下线，写请求无法执行。  </li>
<li>当 master 发生故障，需手动将其中一台 slave 使用 slaveof no one 命令提升为 master，其它 slave 执行 slaveof 命令指向这个新的 master，从新的 master 处同步数据。  </li>
<li>主从复制模式的故障转移需要手动操作，要实现自动化处理，这就需要 Sentinel 哨兵，实现故障自动转移。</li>
</ol>
<h3 id="高可用-Sentinel-哨兵"><a href="#高可用-Sentinel-哨兵" class="headerlink" title="高可用 Sentinel 哨兵"></a>高可用 Sentinel 哨兵</h3><p>Sentinel 哨兵是 Redis 官方提供的高可用方案，可以用它来监控多个 Redis 服务实例的运行情况。</p>
<p>Sentinel 系统有三个主要任务：  </p>
<ol>
<li>监控： Sentinel 不断的检查主服务和从服务器是否按照预期正常工作。  </li>
<li>提醒：被监控的 Redis 出现问题时， Sentinel 会通知管理员或其他应用程序。  </li>
<li>自动故障转移：监控的主 Redis 不能正常工作， Sentinel 会开始进行故障迁移操作。将一个从服务器升级新的主服务器。 让其他从服务器挂到新的主服务器。同时向客户端<br>提供新的主服务器地址。</li>
</ol>



<h4 id="Sentinel-配置"><a href="#Sentinel-配置" class="headerlink" title="Sentinel 配置"></a>Sentinel 配置</h4><p>Sentinel 系统默认 port 是 26379。三个配置 port 分别设置为 26380、26382、26384。</p>
<p>三个文件分别命名为：</p>
<ul>
<li>sentinel26380.conf  </li>
<li>sentinel26382.conf  </li>
<li>sentinel26384.conf</li>
</ul>
<h4 id="Sentinel-配置文件修改"><a href="#Sentinel-配置文件修改" class="headerlink" title="Sentinel 配置文件修改"></a>Sentinel 配置文件修改</h4><h4 id="启动主从（-Master-Slave）-Redis"><a href="#启动主从（-Master-Slave）-Redis" class="headerlink" title="启动主从（ Master/Slave） Redis"></a>启动主从（ Master/Slave） Redis</h4><h4 id="启动-Sentinel"><a href="#启动-Sentinel" class="headerlink" title="启动 Sentinel"></a>启动 Sentinel</h4><h4 id="主-Redis-不能工作"><a href="#主-Redis-不能工作" class="headerlink" title="主 Redis 不能工作"></a>主 Redis 不能工作</h4><h4 id="Sentinel-的起作用"><a href="#Sentinel-的起作用" class="headerlink" title="Sentinel 的起作用"></a>Sentinel 的起作用</h4><h4 id="新的-Redis-加入-Sentinel-系统，自动加入-Master"><a href="#新的-Redis-加入-Sentinel-系统，自动加入-Master" class="headerlink" title="新的 Redis 加入 Sentinel 系统，自动加入 Master"></a>新的 Redis 加入 Sentinel 系统，自动加入 Master</h4><h4 id="监控"><a href="#监控" class="headerlink" title="监控"></a>监控</h4><h4 id="总结-3"><a href="#总结-3" class="headerlink" title="总结"></a>总结</h4><h2 id="安全设置"><a href="#安全设置" class="headerlink" title="安全设置"></a>安全设置</h2><p>访问 Redis 默认是没有密码的，这样不安全，任意用户都可以访问。可以启用使用密码才能访问 Redis。 设置 Redis 的访问密码，需要修改 redis.conf 中 requirepass 这一行密码。密码要比较复杂，不容易破解，而且需要定期修改。 </p>
<h3 id="1-设置密码"><a href="#1-设置密码" class="headerlink" title="1. 设置密码"></a>1. 设置密码</h3><h4 id="开启访问密码设置"><a href="#开启访问密码设置" class="headerlink" title="开启访问密码设置"></a>开启访问密码设置</h4><h4 id="访问有密码的-Redis"><a href="#访问有密码的-Redis" class="headerlink" title="访问有密码的 Redis"></a>访问有密码的 Redis</h4><h3 id="2-绑定-IP"><a href="#2-绑定-IP" class="headerlink" title="2. 绑定 IP"></a>2. 绑定 IP</h3><h3 id="3-修改默认端口"><a href="#3-修改默认端口" class="headerlink" title="3. 修改默认端口"></a>3. 修改默认端口</h3>]]></content>
      <categories>
        <category>分布式</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Oracle 入门教程</title>
    <url>/2019/10/16/Oracle%20%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Oracle 数据库系统是美国 Oracle 公司(甲骨文)提供的以分布式数据库为核心的一组软件产品，是目前最流行的客户/服务器 (Client/Server) 或 B/S 体系结构的数据库之一，比如 SilverStream 就是基于数据库的一种中间件。 Oracle 数据库是目前世界上使用最为广泛的数据库管理系统，作为一个通用的数据库系统，它具有完整的数据管理功能；作为一个关系型数据库，它是一个完备关系的产品；作为分布式数据库它实现了分布式处理功能，但它的所有知识，只要在一种机型上学习了 Oracle 知识，便能在各种类型的机器上使用它。</p>
<a id="more"></a>


<h2 id="Oracle-的基本使用"><a href="#Oracle-的基本使用" class="headerlink" title="Oracle 的基本使用"></a>Oracle 的基本使用</h2><h3 id="连接命令"><a href="#连接命令" class="headerlink" title="连接命令"></a>连接命令</h3><h4 id="sqlplus-nolog"><a href="#sqlplus-nolog" class="headerlink" title="sqlplus /nolog"></a>sqlplus /nolog</h4><p>进入 sqlplus 环境。其中 /nolog 是不登陆到数据库服务器的意思，如果没有 /nolog 参数， sqlplus 会提示你输入用户名和密码。</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">C:\Users\Administrator&gt;sqlplus</span><br><span class="line"></span><br><span class="line">SQL*Plus: Release <span class="number">11.1</span><span class="number">.0</span><span class="number">.7</span><span class="number">.0</span> - Production on 星期三 <span class="number">10</span>月 <span class="number">16</span> <span class="number">10</span>:<span class="number">30</span>:<span class="number">42</span> <span class="number">2019</span></span><br><span class="line"></span><br><span class="line">Copyright (c) <span class="number">1982</span>, <span class="number">2008</span>, Oracle.  All rights reserved.</span><br><span class="line"></span><br><span class="line">请输入用户名:</span><br></pre></td></tr></table></figure>

<h4 id="conn-etc"><a href="#conn-etc" class="headerlink" title="conn[etc]"></a>conn[etc]</h4><p>用法: conn 用户名 / 密码 @网络服务名 [as sysdba/sysoper] 当用特权用户身份连接时，必须带上 as sysdba 或是 as sysoper</p>
<p>以系统管理员 (sysdba) 身份连接数据库</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SQL</span>&gt; conn / <span class="keyword">as</span> sysdba</span><br><span class="line">已连接。</span><br></pre></td></tr></table></figure>

<p>创建用户</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">SQL&gt; create<span class="built_in"> user </span>huang identified by 123456;</span><br><span class="line"></span><br><span class="line">用户已创建。</span><br></pre></td></tr></table></figure>

<p>用户授权</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SQL</span>&gt; <span class="keyword">grant</span> <span class="keyword">create</span> <span class="keyword">session</span>,<span class="keyword">connect</span>,resource <span class="keyword">to</span> huang;</span><br><span class="line"></span><br><span class="line">授权成功。</span><br></pre></td></tr></table></figure>

<p>连接到数据库</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">SQL&gt; conn huang/<span class="number">123456</span></span><br><span class="line">已连接。</span><br></pre></td></tr></table></figure>

<h4 id="show-user"><a href="#show-user" class="headerlink" title="show user"></a>show user</h4><p>显示当前用户名</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">SQL&gt; show user</span><br><span class="line">USER 为 <span class="string">"HUANG"</span></span><br></pre></td></tr></table></figure>

<h4 id="passw-ord"><a href="#passw-ord" class="headerlink" title="passw[ord]"></a>passw[ord]</h4><p>用于修改用户的密码，如果要想修改其它用户的密码，需要用 sys/system 登录。</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">SQL&gt; passw</span><br><span class="line">更改 HUANG 的口令</span><br><span class="line"><span class="section">旧口令:</span></span><br><span class="line"><span class="section">新口令:</span></span><br><span class="line"><span class="section">重新键入新口令:</span></span><br><span class="line">口令已更改</span><br></pre></td></tr></table></figure>

<h4 id="disc-onnect"><a href="#disc-onnect" class="headerlink" title="disc[onnect]"></a>disc[onnect]</h4><p>用于断开与当前数据库的连接 (不退出 sqlplus )</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SQL</span>&gt; disc</span><br><span class="line">从 Oracle <span class="keyword">Database</span> <span class="number">11</span>g Enterprise Edition <span class="keyword">Release</span> <span class="number">11.1</span><span class="number">.0</span><span class="number">.7</span><span class="number">.0</span> - Production</span><br><span class="line"><span class="keyword">With</span> the Partitioning, OLAP, Data Mining <span class="keyword">and</span> <span class="type">Real</span> Application Testing <span class="keyword">options</span> 断开</span><br><span class="line"><span class="keyword">SQL</span>&gt;</span><br></pre></td></tr></table></figure>

<h4 id="exit"><a href="#exit" class="headerlink" title="exit"></a>exit</h4><p>用于断开与当前数据库的连接 (同时退出 sqlplus )</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">SQL&gt; <span class="keyword">exit</span></span><br><span class="line">从 Oracle Database <span class="number">11</span>g Enterprise Edition Release <span class="number">11.1</span>.<span class="number">0.7</span>.<span class="number">0</span> - Production</span><br><span class="line">With the Partitioning, OLAP, Data Mining and Real Application Testing options 断开</span><br><span class="line"></span><br><span class="line">C:\Users\Administrator&gt;</span><br></pre></td></tr></table></figure>

<h3 id="文件操作命令"><a href="#文件操作命令" class="headerlink" title="文件操作命令"></a>文件操作命令</h3><h4 id="start-和"><a href="#start-和" class="headerlink" title="start 和 @"></a>start 和 @</h4><p>运行 SQL 脚本</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SQL</span>&gt; @ d:\c.<span class="keyword">sql</span></span><br><span class="line"></span><br><span class="line">表已创建。</span><br></pre></td></tr></table></figure>

<p>或是</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SQL</span>&gt; <span class="keyword">start</span> d:\c.<span class="keyword">sql</span></span><br><span class="line"></span><br><span class="line">表已创建。</span><br></pre></td></tr></table></figure>

<h4 id="edit"><a href="#edit" class="headerlink" title="edit"></a>edit</h4><p>该命令可以编辑指定的 SQL 脚本</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SQL</span>&gt; edit d:\c.<span class="keyword">sql</span></span><br></pre></td></tr></table></figure>

<p>这样会把 d:\c.sql 这个文件打开</p>
<h4 id="spool"><a href="#spool" class="headerlink" title="spool"></a>spool</h4><p>该命令可以将 sqlplus 屏幕上的(查询)内容输出到指定文件中去</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SQL</span>&gt; spool d:\d.<span class="keyword">sql</span></span><br></pre></td></tr></table></figure>

<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line">SQL&gt; <span class="keyword">select</span> ASSETNUM 序号,DESCRIPTION 描述 <span class="keyword">from</span> ASSET;</span><br></pre></td></tr></table></figure>

<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SQL</span>&gt; spool <span class="keyword">off</span></span><br></pre></td></tr></table></figure>

<h3 id="交互式命令"><a href="#交互式命令" class="headerlink" title="交互式命令"></a>交互式命令</h3><h4 id="amp"><a href="#amp" class="headerlink" title="&amp;"></a>&amp;</h4><p>可以替代变量，而该变量在执行时，需要用户输入， Oracle 会提示用户输入值</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SQL</span>&gt; <span class="keyword">select</span> * <span class="keyword">from</span> ACCOUNTDEFAULTS <span class="keyword">where</span> ORGID=<span class="string">'&amp;ORGID'</span>;</span><br><span class="line">输入 orgid 的值:</span><br></pre></td></tr></table></figure>

<h3 id="显示和设置环境变量"><a href="#显示和设置环境变量" class="headerlink" title="显示和设置环境变量"></a>显示和设置环境变量</h3><p>可以用来控制输出的各种格式，如果希望永久的保存相关设置，可以修改 glogin.sql 脚本</p>
<h4 id="linesize"><a href="#linesize" class="headerlink" title="linesize"></a>linesize</h4><p>设置显示行的宽度，默认是 80 个字符</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SQL</span>&gt; <span class="keyword">show</span> linesize</span><br><span class="line">linesize <span class="number">80</span></span><br><span class="line"><span class="keyword">SQL</span>&gt; <span class="keyword">set</span> linesize <span class="number">90</span></span><br><span class="line"><span class="keyword">SQL</span>&gt; <span class="keyword">show</span> linesize</span><br><span class="line">linesize <span class="number">90</span></span><br></pre></td></tr></table></figure>

<h4 id="pagelize"><a href="#pagelize" class="headerlink" title="pagelize"></a>pagelize</h4><p>设置每页显示的行数目，默认是 14 ，用法和 linesize 一样</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SQL</span>&gt; <span class="keyword">show</span> pagesize</span><br><span class="line">pagesize <span class="number">14</span></span><br><span class="line"><span class="keyword">SQL</span>&gt; <span class="keyword">set</span> pagesize <span class="number">20</span></span><br><span class="line"><span class="keyword">SQL</span>&gt; <span class="keyword">show</span> pagesize</span><br><span class="line">pagesize <span class="number">20</span></span><br></pre></td></tr></table></figure>

<h2 id="Oracle-用户管理"><a href="#Oracle-用户管理" class="headerlink" title="Oracle 用户管理"></a>Oracle 用户管理</h2><h3 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h3><p>在 Oracle 中要创建一个新的用户使用 create user 语句， 一般是具有 dba (数据库管理员)的权限才能使用。</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">create<span class="built_in"> user </span>用户名 identified by 密码 ;</span><br></pre></td></tr></table></figure>

<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">SQL&gt; create<span class="built_in"> user </span>zhangsan identified by 123456;</span><br><span class="line">create<span class="built_in"> user </span>zhangsan identified by 123456</span><br><span class="line">                                   *</span><br><span class="line">第 1 行出现错误:</span><br><span class="line">ORA-01031: 权限不足</span><br></pre></td></tr></table></figure>

<p>我们连接到 sysdba 创建用户</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">SQL&gt; conn / as sysdba</span><br><span class="line">已连接。</span><br><span class="line">SQL&gt; create<span class="built_in"> user </span>zhangsan identified by 123456;</span><br><span class="line"></span><br><span class="line">用户已创建。</span><br></pre></td></tr></table></figure>

<h3 id="给用户修改密码"><a href="#给用户修改密码" class="headerlink" title="给用户修改密码"></a>给用户修改密码</h3><p>如果给自己修改密码可以直接使用</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">password</span> 用户名</span><br></pre></td></tr></table></figure>

<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">SQL&gt; password huang</span><br><span class="line">更改 huang 的口令</span><br><span class="line"><span class="section">旧口令:</span></span><br><span class="line"><span class="section">新口令:</span></span><br><span class="line"><span class="section">重新键入新口令:</span></span><br><span class="line">口令已更改</span><br></pre></td></tr></table></figure>

<p>如果给别人修改密码则需要具有 dba 的权限，或是拥有 alter user 的系统权限</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">alter<span class="built_in"> user </span>用户名 identified by 新密码</span><br></pre></td></tr></table></figure>

<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">SQL&gt; alter<span class="built_in"> user </span>zhangsan identified by 12345678;</span><br><span class="line"></span><br><span class="line">用户已更改。</span><br></pre></td></tr></table></figure>

<h3 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h3><p>一般以 dba 的身份去删除某个用户， 如果用其它用户去删除用户则需要具有 drop user 的权限。</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">drop<span class="built_in"> user </span>用户名 [cascade]</span><br></pre></td></tr></table></figure>

<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">SQL&gt; drop<span class="built_in"> user </span>zhangsan;</span><br><span class="line"></span><br><span class="line">用户已删除。</span><br></pre></td></tr></table></figure>

<p>如果要删除的用户，已经创建了表，那么就需要在删除的时候带一个参数 cascade ;</p>
<h3 id="权限和角色"><a href="#权限和角色" class="headerlink" title="权限和角色"></a>权限和角色</h3><h4 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h4><p>创建的新用户是没有任何权限的， 甚至连登陆的数据库的权限都没有， 需要为其指定相应的权限；要使用有能力授权的用户，如 sys 、 system 。</p>
<p>权限包含系统权限和对象权限</p>
<ul>
<li>系统权限：用户对数据库的相关权限  </li>
<li>对象权限：用户对其他用户的数据对象操作的权限</li>
</ul>
<h4 id="角色"><a href="#角色" class="headerlink" title="角色"></a>角色</h4><p>角色是指由系统权限集合。通常给某个用户授予权限时如果没有角色存在的话，那么需要一条一条的操作，角色的存在就是使得授权变得很方便。通常一个角色由多个系统权限组成。常用的角色有三个 connect (7种权限)、 dba 、 resource (在任何表空间建表)。</p>
<p>connect 角色：是授予最终用户的典型权利，最基本的</p>
<ul>
<li>alter session 修改会话  </li>
<li>create cluster 建立聚簇  </li>
<li>create database link 建立数据库链接  </li>
<li>create sequence 建立序列  </li>
<li>create session 建立会话  </li>
<li>create synonym 建立同义词  </li>
<li>create view 建立视图</li>
</ul>
<p>resource 角色： 是授予开发人员的</p>
<ul>
<li>create cluster 建立聚簇  </li>
<li>create procedure 建立过程  </li>
<li>create sequence 建立序列  </li>
<li>create table 建表  </li>
<li>cteate trigger 建立触发器  </li>
<li>create type 建立类型</li>
</ul>
<p>dba 角色：拥有系统所有系统级权限</p>
<p>使用 grant 命令给用户分配权限：</p>
<p>grant 【权限名】 to 【用户名】</p>
<ul>
<li>分配角色</li>
</ul>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">grant</span> 【角色名】 <span class="keyword">to</span> 【用户名】</span><br></pre></td></tr></table></figure>

<ul>
<li>收回权限</li>
</ul>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">revoke</span> 【权限名】 <span class="keyword">from</span> 【用户名】</span><br></pre></td></tr></table></figure>

<h3 id="用户管理的综合案例"><a href="#用户管理的综合案例" class="headerlink" title="用户管理的综合案例"></a>用户管理的综合案例</h3><figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line">SQL&gt; <span class="keyword">create</span> <span class="keyword">user</span> zhangsan identified <span class="keyword">by</span> <span class="number">123456</span>; <span class="comment">/*创建用户*/</span></span><br><span class="line"></span><br><span class="line">用户已创建。</span><br><span class="line"></span><br><span class="line">SQL&gt; conn zhangsan/123456; <span class="comment">/*新建用户没有 session (登陆)权限*/</span></span><br><span class="line">ERROR:</span><br><span class="line">ORA-01045: 用户 ZHANGSAN 没有 <span class="keyword">CREATE</span> SESSION 权限; 登录被拒绝</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">警告: 您不再连接到 ORACLE。</span><br><span class="line">SQL&gt; show user</span><br><span class="line">USER 为 ""</span><br><span class="line">SQL&gt; conn / as sysdba;</span><br><span class="line">已连接。</span><br><span class="line">SQL&gt; grant <span class="keyword">create</span> session <span class="keyword">to</span> zhangsan; <span class="comment">/*使 zhangsan 能够被连接*/</span></span><br><span class="line"></span><br><span class="line">授权成功。</span><br><span class="line"></span><br><span class="line">SQL&gt; conn zhangsan/123456;</span><br><span class="line">已连接。</span><br><span class="line">SQL&gt; show user;</span><br><span class="line">USER 为 "ZHANGSAN"</span><br><span class="line">SQL&gt; conn / as sysdba;</span><br><span class="line">已连接。</span><br><span class="line">SQL&gt; grant resource to zhangsan; <span class="comment">/*让zhangsan 能够在任何表空间下建表*/</span></span><br><span class="line"></span><br><span class="line">授权成功。</span><br><span class="line"></span><br><span class="line">SQL&gt; <span class="keyword">create</span> table users(name varchar(<span class="number">10</span>),age <span class="keyword">number</span>(<span class="number">3</span>)); <span class="comment">/*在 sys 角色下创建一个简单的表 users */</span></span><br><span class="line"></span><br><span class="line">表已创建。</span><br><span class="line"></span><br><span class="line">SQL&gt; <span class="keyword">insert</span> <span class="keyword">into</span> users <span class="keyword">values</span>(<span class="string">'张三'</span>,<span class="number">22</span>); <span class="comment">/*插入数据*/</span></span><br><span class="line"></span><br><span class="line">已创建 1 行。</span><br><span class="line"></span><br><span class="line">SQL&gt; <span class="keyword">insert</span> <span class="keyword">into</span> users <span class="keyword">values</span>(<span class="string">'李四'</span>,<span class="number">24</span>);</span><br><span class="line"></span><br><span class="line">已创建 1 行。</span><br><span class="line"></span><br><span class="line">SQL&gt; <span class="keyword">select</span> * <span class="keyword">from</span> users; <span class="comment">/*查询*/</span></span><br><span class="line"></span><br><span class="line">NAME                        AGE</span><br><span class="line">-------------------- ----------</span><br><span class="line">张三                         22</span><br><span class="line">李四                         24</span><br><span class="line"></span><br><span class="line">SQL&gt; conn zhangsan/123456;</span><br><span class="line">已连接。</span><br><span class="line">SQL&gt; <span class="keyword">select</span> * <span class="keyword">from</span> sys.users; <span class="comment">/*新建的用户没有查询 sys 表的权限*/</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> sys.users</span><br><span class="line">                  *</span><br><span class="line">第 <span class="number">1</span> 行出现错误:</span><br><span class="line">ORA<span class="number">-00942</span>: 表或视图不存在</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">SQL&gt; conn / <span class="keyword">as</span> sysdba;</span><br><span class="line">已连接。</span><br><span class="line">SQL&gt; grant <span class="keyword">select</span> <span class="keyword">on</span> users <span class="keyword">to</span> zhangsan; <span class="comment">/*登录到 sys 给 zhangsan 授权让 zhangsan 可以查看 sys 下的 users 表*/</span></span><br><span class="line"></span><br><span class="line">授权成功。</span><br><span class="line"></span><br><span class="line">SQL&gt; conn zhangsan/123456;</span><br><span class="line">已连接。</span><br><span class="line">SQL&gt; <span class="keyword">select</span> * <span class="keyword">from</span> sys.users; <span class="comment">/* 登录到 zhangsan 下查看 users 表*/</span></span><br><span class="line"></span><br><span class="line">NAME                        AGE</span><br><span class="line">-------------------- ----------</span><br><span class="line">张三                         22</span><br><span class="line">王五                         24</span><br><span class="line"></span><br><span class="line">SQL&gt; <span class="keyword">update</span> sys.users <span class="keyword">set</span> name=<span class="string">'张小三'</span> <span class="keyword">where</span> name=<span class="string">'张三'</span>; <span class="comment">/*这时如果想要更新 sys.users 中的数据，会提示 "ORA-01031: 权限不足 " 。因为 sys 只给了 zhangsan 查看的权利，如果仍然想更新，要到 sys 下进行授权*/</span></span><br><span class="line"><span class="keyword">update</span> sys.users <span class="keyword">set</span> name=<span class="string">'张小三'</span> <span class="keyword">where</span> name=<span class="string">'张三'</span></span><br><span class="line">           *</span><br><span class="line">第 <span class="number">1</span> 行出现错误:</span><br><span class="line">ORA<span class="number">-01031</span>: 权限不足</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">SQL&gt; conn / <span class="keyword">as</span> sysdba</span><br><span class="line">已连接。</span><br><span class="line">SQL&gt; <span class="keyword">grant</span> <span class="keyword">update</span> <span class="keyword">on</span> users <span class="keyword">to</span> zhangsan; <span class="comment">/*登录到 sys 给 zhangsan 授权让 zhangsan 可以更新 sys 下的 users 表*/</span></span><br><span class="line"></span><br><span class="line">授权成功。</span><br><span class="line"></span><br><span class="line">SQL&gt; conn zhangsan/123456;</span><br><span class="line">已连接。</span><br><span class="line">SQL&gt; <span class="keyword">update</span> sys.users <span class="keyword">set</span> name=<span class="string">'张小三'</span> <span class="keyword">where</span> name=<span class="string">'张三'</span>;</span><br><span class="line"></span><br><span class="line">已更新 1 行。</span><br><span class="line"></span><br><span class="line">SQL&gt; <span class="keyword">select</span> * <span class="keyword">from</span> sys.users;</span><br><span class="line"></span><br><span class="line">NAME                        AGE</span><br><span class="line">-------------------- ----------</span><br><span class="line">张小三                       22</span><br><span class="line">王五                         24</span><br><span class="line"></span><br><span class="line">SQL&gt; revoke resource from zhangsan; <span class="comment">/*登陆到 sys 下回收 resource 权限*/</span></span><br><span class="line"></span><br><span class="line">撤销成功。</span><br><span class="line"></span><br><span class="line">SQL&gt; revoke <span class="keyword">select</span> <span class="keyword">on</span> users <span class="keyword">from</span> zhangsan; <span class="comment">/*登陆到 sys 下回收 select 权限*/</span></span><br><span class="line"></span><br><span class="line">撤销成功。</span><br><span class="line"></span><br><span class="line">SQL&gt; conn zhangsan/123456;</span><br><span class="line">已连接。</span><br><span class="line">SQL&gt; <span class="keyword">select</span> * <span class="keyword">from</span> sys.users; <span class="comment">/* 这时 sys 就不能再查询 sys.users 的数据了*/</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> sys.users</span><br><span class="line">                  *</span><br><span class="line">第 <span class="number">1</span> 行出现错误:</span><br><span class="line">ORA<span class="number">-00942</span>: 表或视图不存在</span><br></pre></td></tr></table></figure>

<h3 id="使用-profile-管理用户口令"><a href="#使用-profile-管理用户口令" class="headerlink" title="使用 profile 管理用户口令"></a>使用 profile 管理用户口令</h3><p>profile 是口令限制，资源限制的命令集合。当建立数据库时， Oracle 会自动建立名称为 default 的 profile。当建立用户没有制定 profile 选项，那 Oracle 就会将 default 分配给用户。  </p>
<h4 id="帐号锁定"><a href="#帐号锁定" class="headerlink" title="帐号锁定"></a>帐号锁定</h4><p>指定登录时最多可以输入密码的次数，也可以指定用户锁定的时间，以天为单位。一般用 dba 的身份去执行命令。</p>
<p>指定用户 huang 最多只能尝试三次登录，锁定时间为 2 天。</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">SQL&gt; conn / as sysdba;</span><br><span class="line">已连接。</span><br><span class="line">SQL&gt; create<span class="built_in"> profile </span>lock_account limit failed_login_attempts 3 password_lock_time 2;</span><br><span class="line"></span><br><span class="line">配置文件已创建</span><br><span class="line"></span><br><span class="line">SQL&gt; alter<span class="built_in"> user </span>huang<span class="built_in"> profile </span>lock_account;</span><br><span class="line"></span><br><span class="line">用户已更改。</span><br></pre></td></tr></table></figure>

<p>按 CTRL + C 退出来验证账号锁定</p>
<figure class="highlight subunit"><table><tr><td class="code"><pre><span class="line">C:\Users\Administrator&gt;sqlplus</span><br><span class="line"></span><br><span class="line">SQL*Plus: Release 11.1.0.7.0 - Production on 星期三 10月 30 11:13:48 2019</span><br><span class="line"></span><br><span class="line">Copyright (c) 1982, 2008, Oracle.  All rights reserved.</span><br><span class="line"></span><br><span class="line">请输入用户名:  huang</span><br><span class="line">输入口令:</span><br><span class="line">ERROR:</span><br><span class="line">ORA<span class="string">-01017</span>: 用户名/口令无效; 登录被拒绝</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">请输入用户名:  huang</span><br><span class="line">输入口令:</span><br><span class="line">ERROR:</span><br><span class="line">ORA<span class="string">-01017</span>: 用户名/口令无效; 登录被拒绝</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">请输入用户名:  huang</span><br><span class="line">输入口令:</span><br><span class="line">ERROR:</span><br><span class="line">ORA<span class="string">-28000</span>: 帐户已被锁定</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">SP2<span class="string">-0157</span>: 在 3 次尝试之后无法连接到 ORACLE, 退出 SQL*Plus</span><br></pre></td></tr></table></figure>

<h4 id="账户解锁"><a href="#账户解锁" class="headerlink" title="账户解锁"></a>账户解锁</h4><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">SQL&gt; alter<span class="built_in"> user </span>huang account unlock;</span><br><span class="line"></span><br><span class="line">用户已更改。</span><br><span class="line"></span><br><span class="line">SQL&gt; conn huang;</span><br><span class="line">输入口令:</span><br><span class="line">已连接。</span><br></pre></td></tr></table></figure>

<h4 id="终止口令"><a href="#终止口令" class="headerlink" title="终止口令"></a>终止口令</h4><p>为了让用户定期修改密码，可以使用终止口令的指令完成，同样这个命令也要 dba 身份来操作。</p>
<p>给 huang 创建一个 profile 文件，要求该用户每隔 10 天要修改登录密码，宽限期 2 天</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">SQL&gt; create<span class="built_in"> profile </span>huang limit password_life_time 10 password_grace_time 2;</span><br><span class="line"></span><br><span class="line">配置文件已创建</span><br><span class="line"></span><br><span class="line">SQL&gt; alter<span class="built_in"> user </span>huang<span class="built_in"> profile </span>huang;</span><br><span class="line"></span><br><span class="line">用户已更改。</span><br></pre></td></tr></table></figure>

<p>解锁方式同上</p>
<h4 id="口令历史"><a href="#口令历史" class="headerlink" title="口令历史"></a>口令历史</h4><p>如果希望用户在修改密码时，不能使用以前用过的密码，可以使用口令历史，这样 Oracle 就会将口令修改的信息存放在数据字典中，这样当用户修改密码时， Oracle 就会对新密码与就得进行对比，如果一样提示用户重新输入。</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">SQL&gt; create<span class="built_in"> profile </span>password_history limit password_life_time 10 password_grace_time 2 password_reuse_time 10;</span><br><span class="line"></span><br><span class="line">配置文件已创建</span><br><span class="line"></span><br><span class="line">SQL&gt; alter<span class="built_in"> user </span>huang<span class="built_in"> profile </span>password_history;</span><br><span class="line"></span><br><span class="line">用户已更改。</span><br><span class="line"></span><br><span class="line">SQL&gt; alter<span class="built_in"> user </span>huang identified by 12345678;</span><br><span class="line"></span><br><span class="line">用户已更改。</span><br><span class="line"></span><br><span class="line">SQL&gt; alter<span class="built_in"> user </span>huang identified by 12345678;</span><br><span class="line">alter<span class="built_in"> user </span>huang identified by 12345678</span><br><span class="line">*</span><br><span class="line">第 1 行出现错误:</span><br><span class="line">ORA-28007: 无法重新使用口令</span><br></pre></td></tr></table></figure>

<p>password_reuse_time 10 表示 10 天后口令可重复使用。</p>
<h4 id="删除-profile"><a href="#删除-profile" class="headerlink" title="删除 profile"></a>删除 profile</h4><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">SQL&gt; drop<span class="built_in"> profile </span>password_history cascade;</span><br><span class="line"></span><br><span class="line">配置文件已删除。</span><br></pre></td></tr></table></figure>

<p>cascade 表示如果已经将 profile分 配给某个用户时，仍要删除 profile，就要加上 cascade。</p>
<h2 id="Oracle-表的管理"><a href="#Oracle-表的管理" class="headerlink" title="Oracle 表的管理"></a>Oracle 表的管理</h2><h3 id="表名和列的命名规则"><a href="#表名和列的命名规则" class="headerlink" title="表名和列的命名规则"></a>表名和列的命名规则</h3><ul>
<li>必须以字母开头  </li>
<li>长度不能超过 30 个字符  </li>
<li>不能使用 Oracle 的保留字  </li>
<li>只能使用如下字符 A-Z ， a-z ， 0-9 ， $ , # 等</li>
</ul>
<h3 id="Oracle-支持的数据类型"><a href="#Oracle-支持的数据类型" class="headerlink" title="Oracle 支持的数据类型"></a>Oracle 支持的数据类型</h3><h4 id="字符型"><a href="#字符型" class="headerlink" title="字符型"></a>字符型</h4><p>char 定长，最长2000字符</p>
<p>例如： char(10) 存储内容为“小黄”时，前4个字符放‘小黄’，后六位由空格补齐</p>
<p>优点是：效率高，查询速率快。如身份证的字段可以设置成 char(18)</p>
<p>varchar2 变长最大 4000 字符( Oracle 推荐使用)</p>
<p>varchar2(10) 存储内容为“小黄”时， Oracle 分配 4 个字符</p>
<p>clob(character large object) 字符型大对象，最大 4G</p>
<h4 id="数字类型"><a href="#数字类型" class="headerlink" title="数字类型"></a>数字类型</h4><p>number 范围 -10 的 38 次方到 10 的 38 次方，可以是整数，也可以是小数</p>
<p>number(5，2) 表示一个小数有5位有效数字， 2 位是小数</p>
<p>例如：定义一个范围在 -999.99-999.99 的数字可以用 number(5，2)，定义一个范围在 -99999-99999 可以用 number(5)</p>
<h4 id="日期类型"><a href="#日期类型" class="headerlink" title="日期类型"></a>日期类型</h4><p>date 包含年月日和时分秒</p>
<p>timestamp Oracle 对 date 类型的扩展，可以精确到毫秒。</p>
<h4 id="图片类型"><a href="#图片类型" class="headerlink" title="图片类型"></a>图片类型</h4><p>blob 二进制数据，可以存放图片，音频，视频最大 4G ，这个类型允许我们将大文件存储进数据库，但是一般在数据库里，存放的应该是这些文件的路径，如果对安全性有要求，可以将文件放入数据库(一般来讲，在真实项目中是不会把图片和声音真的往数据库里存放的)。</p>
<h3 id="建表语句"><a href="#建表语句" class="headerlink" title="建表语句"></a>建表语句</h3><h4 id="建表"><a href="#建表" class="headerlink" title="建表"></a>建表</h4><ul>
<li>学生表</li>
</ul>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student( <span class="comment">/*表名*/</span></span><br><span class="line">    id number(<span class="number">4</span>), <span class="comment">/*学号*/</span></span><br><span class="line">    <span class="type">name</span> varchar2(<span class="number">20</span>), <span class="comment">/*姓名*/</span></span><br><span class="line">    sex <span class="type">char</span>(<span class="number">2</span>), <span class="comment">/*性别*/</span></span><br><span class="line">    birthday <span class="type">date</span>, <span class="comment">/*出生日期*/</span></span><br><span class="line">    sal number(<span class="number">6</span>,<span class="number">2</span>) <span class="comment">/*奖学金*/</span></span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">SQL</span>&gt; <span class="keyword">desc</span> student; <span class="comment">/*查看表结构*/</span></span><br><span class="line"> 名称                                      是否为空? 类型</span><br><span class="line"> <span class="comment">----------------------------------------- -------- ----------------------------</span></span><br><span class="line"> ID                                                 NUMBER(<span class="number">4</span>)</span><br><span class="line"> <span class="type">NAME</span>                                               VARCHAR2(<span class="number">20</span> <span class="type">CHAR</span>)</span><br><span class="line"> SEX                                                <span class="type">CHAR</span>(<span class="number">2</span> <span class="type">CHAR</span>)</span><br><span class="line"> BIRTHDAY                                           <span class="type">DATE</span></span><br><span class="line"> SAL                                                NUMBER(<span class="number">6</span>,<span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>班级表</li>
</ul>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">class</span>(</span><br><span class="line">    c_id number(<span class="number">2</span>),</span><br><span class="line">    c_name varchar2(<span class="number">40</span>)</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">SQL</span>&gt; <span class="keyword">desc</span> <span class="keyword">class</span>;</span><br><span class="line"> 名称                                      是否为空? 类型</span><br><span class="line"> <span class="comment">----------------------------------------- -------- ----------------------------</span></span><br><span class="line"> C_ID                                               NUMBER(<span class="number">2</span>)</span><br><span class="line"> C_NAME                                             VARCHAR2(<span class="number">40</span> <span class="type">CHAR</span>)</span><br></pre></td></tr></table></figure>

<h4 id="修改表"><a href="#修改表" class="headerlink" title="修改表"></a>修改表</h4><figure class="highlight sas"><table><tr><td class="code"><pre><span class="line">SQL&gt; <span class="meta">alter</span> <span class="meta">table</span> student <span class="meta">add</span> (c_id number(2)); <span class="comment">/*添加字段*/</span></span><br><span class="line"></span><br><span class="line">表已更改。</span><br><span class="line"></span><br><span class="line">SQL&gt; <span class="meta">alter</span> <span class="meta">table</span> student <span class="meta">modify</span> (name varchar2(50)); <span class="comment">/*修改字段的长度*/</span></span><br><span class="line"></span><br><span class="line">表已更改。</span><br><span class="line"></span><br><span class="line">SQL&gt; <span class="meta">alter</span> <span class="meta">table</span> student <span class="meta">modify</span> (name char(20)); <span class="comment">/*修改字段的类型(表中不能有数据)*/</span></span><br><span class="line"></span><br><span class="line">表已更改。</span><br><span class="line"></span><br><span class="line">SQL&gt; <span class="meta">alter</span> <span class="meta">table</span> student <span class="meta">rename</span> column name to s_name; <span class="comment">/*修改字段的名字(表中不能有数据)*/</span></span><br><span class="line"></span><br><span class="line">表已更改。</span><br><span class="line"></span><br><span class="line">SQL&gt; <span class="meta">alter</span> <span class="meta">table</span> student <span class="meta">drop</span> column sex; <span class="comment">/*删除一个字段(慎重使用)*/</span></span><br><span class="line"></span><br><span class="line">表已更改。</span><br><span class="line"></span><br><span class="line">SQL&gt; <span class="meta">rename</span> student to stu; <span class="comment">/*修改表的名字*/</span></span><br><span class="line"></span><br><span class="line">表已重命名。</span><br><span class="line"></span><br><span class="line">SQL&gt; desc stu;</span><br><span class="line"> 名称                                      是否为空? 类型</span><br><span class="line"> ----------------------------------------- -------- ----------------------------</span><br><span class="line"> ID                                                 NUMBER(4)</span><br><span class="line"> S_NAME                                             CHAR(20 CHAR)</span><br><span class="line"> BIRTHDAY                                           DATE</span><br><span class="line"> SAL                                                NUMBER(6,2)</span><br><span class="line"> C_ID                                               NUMBER(2)</span><br><span class="line"></span><br><span class="line">SQL&gt; <span class="meta">drop</span> <span class="meta">table</span> stu; <span class="comment">/*删除表*/</span></span><br><span class="line"></span><br><span class="line">表已删除。</span><br><span class="line"></span><br><span class="line">SQL&gt; desc stu;</span><br><span class="line"><span class="meta">ERROR</span>:</span><br><span class="line">ORA-04043: 对象 stu 不存在</span><br></pre></td></tr></table></figure>

<h4 id="操作表"><a href="#操作表" class="headerlink" title="操作表"></a>操作表</h4><p>使用 student 表</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">SQL&gt; insert <span class="built_in">int</span>o student values(<span class="number">1</span>,<span class="string">'张三'</span>,<span class="string">'男'</span>,<span class="string">'01-1月-19'</span>,<span class="number">8888.88</span>); <span class="comment">/*添加数据，所有字段必须都插入， Oracle 中默认的日期格式‘DD-MON-YY’ (日-月-年)*/</span></span><br><span class="line"></span><br><span class="line">已创建 <span class="number">1</span> 行。</span><br><span class="line"></span><br><span class="line">SQL&gt; select * <span class="keyword">from</span> student;</span><br><span class="line"></span><br><span class="line">        ID NAME                                     SEX  BIRTHDAY</span><br><span class="line">---------- ---------------------------------------- ---- --------------</span><br><span class="line">       SAL</span><br><span class="line">----------</span><br><span class="line">         <span class="number">1</span> 张三                                     男   <span class="number">01</span><span class="number">-1</span>月 <span class="number">-19</span></span><br><span class="line">   <span class="number">8888.88</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">SQL&gt; <span class="keyword">set</span> linesize <span class="number">300</span>; <span class="comment">/*设置行的宽度，这样就好看多了*/</span></span><br><span class="line">SQL&gt; select * <span class="keyword">from</span> student;</span><br><span class="line"></span><br><span class="line">        ID NAME                                     SEX  BIRTHDAY              SAL</span><br><span class="line">---------- ---------------------------------------- ---- -------------- ----------</span><br><span class="line">         <span class="number">1</span> 张三                                     男   <span class="number">01</span><span class="number">-1</span>月 <span class="number">-19</span>        <span class="number">8888.88</span></span><br><span class="line"></span><br><span class="line">SQL&gt; alter session <span class="keyword">set</span> nls_date_format=<span class="string">'YYYY-MM-DD'</span>; <span class="comment">/*修改日期的默认格式。注意，这种修改方法，只对当前会话有效。而不是当前的 sql*plus 窗口。即如果你这样修改之后，又使用 connect 命令以其他用户连接到数据库或者是连接到其他的数据库，则这个日期格式就失效了，又恢复到缺省的日期格式。要想永久改变日期输入格式是需要改注册表的，还有一个方法是使用函数。*/</span></span><br><span class="line"></span><br><span class="line">会话已更改。</span><br><span class="line"></span><br><span class="line">SQL&gt; insert <span class="built_in">int</span>o student values(<span class="number">2</span>,<span class="string">'李四'</span>,<span class="string">'男'</span>,<span class="string">'2019-01-02'</span>,<span class="number">8888.88</span>);</span><br><span class="line"></span><br><span class="line">已创建 <span class="number">1</span> 行。</span><br><span class="line"></span><br><span class="line">SQL&gt; select * <span class="keyword">from</span> student;</span><br><span class="line"></span><br><span class="line">        ID NAME                                     SEX  BIRTHDAY          SAL</span><br><span class="line">---------- ---------------------------------------- ---- ---------- ----------</span><br><span class="line">         <span class="number">1</span> 张三                                     男   <span class="number">2019</span><span class="number">-01</span><span class="number">-01</span>    <span class="number">8888.88</span></span><br><span class="line">         <span class="number">2</span> 李四                                     男   <span class="number">2019</span><span class="number">-01</span><span class="number">-02</span>    <span class="number">8888.88</span></span><br><span class="line"></span><br><span class="line">SQL&gt; insert <span class="built_in">int</span>o student(id,name) values(<span class="number">3</span>,<span class="string">'王五'</span>); <span class="comment">/*插入部分字段,前提是未插入的字段允许为 null */</span></span><br><span class="line"></span><br><span class="line">已创建 <span class="number">1</span> 行。</span><br><span class="line"></span><br><span class="line">SQL&gt; select * <span class="keyword">from</span> student;</span><br><span class="line"></span><br><span class="line">        ID NAME                                     SEX  BIRTHDAY          SAL</span><br><span class="line">---------- ---------------------------------------- ---- ---------- ----------</span><br><span class="line">         <span class="number">1</span> 张三                                     男   <span class="number">2019</span><span class="number">-01</span><span class="number">-01</span>    <span class="number">8888.88</span></span><br><span class="line">         <span class="number">2</span> 李四                                     男   <span class="number">2019</span><span class="number">-01</span><span class="number">-02</span>    <span class="number">8888.88</span></span><br><span class="line">         <span class="number">3</span> 王五</span><br><span class="line"></span><br><span class="line">SQL&gt; insert <span class="built_in">int</span>o student(id,name,sex) values(<span class="number">4</span>,<span class="literal">null</span>,<span class="literal">null</span>); <span class="comment">/*插入空值*/</span></span><br><span class="line"></span><br><span class="line">已创建 <span class="number">1</span> 行。</span><br><span class="line"></span><br><span class="line">SQL&gt; select * <span class="keyword">from</span> student;</span><br><span class="line"></span><br><span class="line">        ID NAME                                     SEX  BIRTHDAY          SAL</span><br><span class="line">---------- ---------------------------------------- ---- ---------- ----------</span><br><span class="line">         <span class="number">1</span> 张三                                     男   <span class="number">2019</span><span class="number">-01</span><span class="number">-01</span>    <span class="number">8888.88</span></span><br><span class="line">         <span class="number">2</span> 李四                                     男   <span class="number">2019</span><span class="number">-01</span><span class="number">-02</span>    <span class="number">8888.88</span></span><br><span class="line">         <span class="number">3</span> 王五</span><br><span class="line">         <span class="number">4</span></span><br><span class="line"></span><br><span class="line">SQL&gt; select * <span class="keyword">from</span> student where name=<span class="literal">null</span>; <span class="comment">/*查询 name 为空的一条记录，错误的做法*/</span></span><br><span class="line"></span><br><span class="line">未选定行</span><br><span class="line"></span><br><span class="line">SQL&gt; select * <span class="keyword">from</span> student where name <span class="keyword">is</span> <span class="literal">null</span>; <span class="comment">/*查询 name 为空的一条记录，正确的做法*/</span></span><br><span class="line"></span><br><span class="line">        ID NAME                                     SEX  BIRTHDAY          SAL</span><br><span class="line">---------- ---------------------------------------- ---- ---------- ----------</span><br><span class="line">         <span class="number">4</span></span><br><span class="line"></span><br><span class="line">SQL&gt; select * <span class="keyword">from</span> student where name <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">null</span>; <span class="comment">/*查询 name 不为空的一条记录*/</span></span><br><span class="line"></span><br><span class="line">        ID NAME                                     SEX  BIRTHDAY          SAL</span><br><span class="line">---------- ---------------------------------------- ---- ---------- ----------</span><br><span class="line">         <span class="number">1</span> 张三                                     男   <span class="number">2019</span><span class="number">-01</span><span class="number">-01</span>    <span class="number">8888.88</span></span><br><span class="line">         <span class="number">2</span> 李四                                     男   <span class="number">2019</span><span class="number">-01</span><span class="number">-02</span>    <span class="number">8888.88</span></span><br><span class="line">         <span class="number">3</span> 王五</span><br><span class="line"></span><br><span class="line">SQL&gt; update student <span class="keyword">set</span> sex=<span class="string">'女'</span> where id=<span class="string">'1'</span>; <span class="comment">/*修改一个字段*/</span></span><br><span class="line"></span><br><span class="line">已更新 <span class="number">1</span> 行。</span><br><span class="line"></span><br><span class="line">SQL&gt; select * <span class="keyword">from</span> student;</span><br><span class="line"></span><br><span class="line">        ID NAME                                     SEX  BIRTHDAY          SAL</span><br><span class="line">---------- ---------------------------------------- ---- ---------- ----------</span><br><span class="line">         <span class="number">1</span> 张三                                     女   <span class="number">2019</span><span class="number">-01</span><span class="number">-01</span>    <span class="number">8888.88</span></span><br><span class="line">         <span class="number">2</span> 李四                                     男   <span class="number">2019</span><span class="number">-01</span><span class="number">-02</span>    <span class="number">8888.88</span></span><br><span class="line">         <span class="number">3</span> 王五</span><br><span class="line">         <span class="number">4</span></span><br><span class="line"></span><br><span class="line">SQL&gt; update student <span class="keyword">set</span> sex=<span class="string">'女'</span>,name=<span class="string">'李小四'</span> where id=<span class="string">'2'</span>; <span class="comment">/*修改多个字段*/</span></span><br><span class="line"></span><br><span class="line">已更新 <span class="number">1</span> 行。</span><br><span class="line"></span><br><span class="line">SQL&gt; select * <span class="keyword">from</span> student;</span><br><span class="line"></span><br><span class="line">        ID NAME                                     SEX  BIRTHDAY          SAL</span><br><span class="line">---------- ---------------------------------------- ---- ---------- ----------</span><br><span class="line">         <span class="number">1</span> 张三                                     女   <span class="number">2019</span><span class="number">-01</span><span class="number">-01</span>    <span class="number">8888.88</span></span><br><span class="line">         <span class="number">2</span> 李小四                                   女   <span class="number">2019</span><span class="number">-01</span><span class="number">-02</span>    <span class="number">8888.88</span></span><br><span class="line">         <span class="number">3</span> 王五</span><br><span class="line">         <span class="number">4</span></span><br><span class="line"></span><br><span class="line">SQL&gt; update student <span class="keyword">set</span> name=<span class="string">'赵六'</span> where name <span class="keyword">is</span> <span class="literal">null</span>; <span class="comment">/*修改含有 null 值的字段*/</span></span><br><span class="line"></span><br><span class="line">已更新 <span class="number">1</span> 行。</span><br><span class="line"></span><br><span class="line">SQL&gt; select * <span class="keyword">from</span> student;</span><br><span class="line"></span><br><span class="line">        ID NAME                                     SEX  BIRTHDAY          SAL</span><br><span class="line">---------- ---------------------------------------- ---- ---------- ----------</span><br><span class="line">         <span class="number">1</span> 张三                                     女   <span class="number">2019</span><span class="number">-01</span><span class="number">-01</span>    <span class="number">8888.88</span></span><br><span class="line">         <span class="number">2</span> 李小四                                   女   <span class="number">2019</span><span class="number">-01</span><span class="number">-02</span>    <span class="number">8888.88</span></span><br><span class="line">         <span class="number">3</span> 王五</span><br><span class="line">         <span class="number">4</span> 赵六</span><br><span class="line"></span><br><span class="line">SQL&gt; insert <span class="built_in">int</span>o student values(<span class="number">1</span>,<span class="string">'张三'</span>,<span class="string">'女'</span>,<span class="string">'2019-01-01'</span>,<span class="number">8888.88</span>); <span class="comment">/*增加一条重复的记录*/</span></span><br><span class="line"></span><br><span class="line">已创建 <span class="number">1</span> 行。</span><br><span class="line"></span><br><span class="line">SQL&gt; select * <span class="keyword">from</span> student;</span><br><span class="line"></span><br><span class="line">        ID NAME                                     SEX  BIRTHDAY          SAL</span><br><span class="line">---------- ---------------------------------------- ---- ---------- ----------</span><br><span class="line">         <span class="number">1</span> 张三                                     女   <span class="number">2019</span><span class="number">-01</span><span class="number">-01</span>    <span class="number">8888.88</span></span><br><span class="line">         <span class="number">2</span> 李小四                                   女   <span class="number">2019</span><span class="number">-01</span><span class="number">-02</span>    <span class="number">8888.88</span></span><br><span class="line">         <span class="number">3</span> 王五</span><br><span class="line">         <span class="number">4</span> 赵六</span><br><span class="line">         <span class="number">1</span> 张三                                     女   <span class="number">2019</span><span class="number">-01</span><span class="number">-01</span>    <span class="number">8888.88</span></span><br><span class="line"></span><br><span class="line">SQL&gt; select distinct id,name <span class="keyword">from</span> student; <span class="comment">/*取消重复行，查询时在 select 后面加上 distinct 即可将重复数据略去*/</span></span><br><span class="line"></span><br><span class="line">        ID NAME</span><br><span class="line">---------- ----------------------------------------</span><br><span class="line">         <span class="number">3</span> 王五</span><br><span class="line">         <span class="number">2</span> 李小四</span><br><span class="line">         <span class="number">1</span> 张三</span><br><span class="line">         <span class="number">4</span> 赵六</span><br><span class="line"></span><br><span class="line">SQL&gt; delete <span class="keyword">from</span> student where id=<span class="string">'4'</span>; <span class="comment">/*删除数据，删除一条记录*/</span></span><br><span class="line"></span><br><span class="line">已删除 <span class="number">1</span> 行。</span><br><span class="line"></span><br><span class="line">SQL&gt; select * <span class="keyword">from</span> student;</span><br><span class="line"></span><br><span class="line">        ID NAME                                     SEX  BIRTHDAY          SAL</span><br><span class="line">---------- ---------------------------------------- ---- ---------- ----------</span><br><span class="line">         <span class="number">1</span> 张三                                     女   <span class="number">2019</span><span class="number">-01</span><span class="number">-01</span>    <span class="number">8888.88</span></span><br><span class="line">         <span class="number">2</span> 李小四                                   女   <span class="number">2019</span><span class="number">-01</span><span class="number">-02</span>    <span class="number">8888.88</span></span><br><span class="line">         <span class="number">3</span> 王五</span><br><span class="line">         <span class="number">1</span> 张三                                     女   <span class="number">2019</span><span class="number">-01</span><span class="number">-01</span>    <span class="number">8888.88</span></span><br><span class="line"></span><br><span class="line">SQL&gt; delete <span class="keyword">from</span> student; <span class="comment">/*删除所有记录，表结构还在，会记录日志，这种删除是可以恢复的，速度会稍慢*/</span></span><br><span class="line"></span><br><span class="line">已删除<span class="number">4</span>行。</span><br><span class="line"></span><br><span class="line">SQL&gt; select * <span class="keyword">from</span> student;</span><br><span class="line"></span><br><span class="line">未选定行</span><br><span class="line"></span><br><span class="line">SQL&gt; truncate table student; <span class="comment">/*删除所有记录，表结构还在，不记录日记，所有这种删除无法找回数据，但是速度很快*/</span></span><br><span class="line"></span><br><span class="line">表被截断。</span><br><span class="line"></span><br><span class="line">SQL&gt; desc student;</span><br><span class="line"> 名称                                      是否为空? 类型</span><br><span class="line"> ----------------------------------------- -------- ----------------------------</span><br><span class="line"> ID                                                 NUMBER(<span class="number">4</span>)</span><br><span class="line"> NAME                                               VARCHAR2(<span class="number">20</span> CHAR)</span><br><span class="line"> SEX                                                CHAR(<span class="number">2</span> CHAR)</span><br><span class="line"> BIRTHDAY                                           DATE</span><br><span class="line"> SAL                                                NUMBER(<span class="number">6</span>,<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">SQL&gt;  drop table student; <span class="comment">/*删除表的结构和数据*/</span></span><br><span class="line"></span><br><span class="line">表已删除。</span><br><span class="line"></span><br><span class="line">SQL&gt; desc student;</span><br><span class="line">ERROR:</span><br><span class="line">ORA<span class="number">-04043</span>: 对象 student 不存在</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">SQL&gt; create table student( <span class="comment">/*表名*/</span> <span class="comment">/*恢复数据，用 delete from student 时数据可恢，使用 student 表*/</span></span><br><span class="line">  <span class="number">2</span>      id number(<span class="number">4</span>), <span class="comment">/*学号*/</span></span><br><span class="line">  <span class="number">3</span>      name varchar2(<span class="number">20</span>), <span class="comment">/*姓名*/</span></span><br><span class="line">  <span class="number">4</span>      sex char(<span class="number">2</span>), <span class="comment">/*性别*/</span></span><br><span class="line">  <span class="number">5</span>      birthday date, <span class="comment">/*出生日期*/</span></span><br><span class="line">  <span class="number">6</span>      sal number(<span class="number">6</span>,<span class="number">2</span>) <span class="comment">/*奖学金*/</span></span><br><span class="line">  <span class="number">7</span>      );</span><br><span class="line"></span><br><span class="line">表已创建。</span><br><span class="line"></span><br><span class="line">SQL&gt; insert <span class="built_in">int</span>o student values(<span class="number">1</span>,<span class="string">'张小三'</span>,<span class="string">'女'</span>,<span class="string">'2019-01-01'</span>,<span class="number">8888.88</span>); <span class="comment">/*插入数据*/</span></span><br><span class="line"></span><br><span class="line">已创建 <span class="number">1</span> 行。</span><br><span class="line"></span><br><span class="line">SQL&gt; insert <span class="built_in">int</span>o student values(<span class="number">2</span>,<span class="string">'李小四'</span>,<span class="string">'女'</span>,<span class="string">'2019-01-01'</span>,<span class="number">8888.88</span>);</span><br><span class="line"></span><br><span class="line">已创建 <span class="number">1</span> 行。</span><br><span class="line"></span><br><span class="line">SQL&gt; select * <span class="keyword">from</span> student;</span><br><span class="line"></span><br><span class="line">        ID NAME                                     SEX  BIRTHDAY          SAL</span><br><span class="line">---------- ---------------------------------------- ---- ---------- ----------</span><br><span class="line">         <span class="number">1</span> 张小三                                   女   <span class="number">2019</span><span class="number">-01</span><span class="number">-01</span>    <span class="number">8888.88</span></span><br><span class="line">         <span class="number">2</span> 李小四                                   女   <span class="number">2019</span><span class="number">-01</span><span class="number">-01</span>    <span class="number">8888.88</span></span><br><span class="line"></span><br><span class="line">SQL&gt; savepoint sp; <span class="comment">/*首先要设置一个保存点*/</span></span><br><span class="line"></span><br><span class="line">保存点已创建。</span><br><span class="line"></span><br><span class="line">SQL&gt; delete <span class="keyword">from</span> student; <span class="comment">/*删除数据*/</span></span><br><span class="line"></span><br><span class="line">已删除<span class="number">2</span>行。</span><br><span class="line"></span><br><span class="line">SQL&gt; select * <span class="keyword">from</span> student; <span class="comment">/*查询验证数据是否被删掉*/</span></span><br><span class="line"></span><br><span class="line">未选定行</span><br><span class="line"></span><br><span class="line">SQL&gt; rollback to sp; <span class="comment">/*回滚数据*/</span></span><br><span class="line"></span><br><span class="line">回退已完成。</span><br><span class="line"></span><br><span class="line">SQL&gt; select * <span class="keyword">from</span> student; <span class="comment">/*查询验证数据回滚是否成功，可以设置多个保存点，但是如果不做处理，新的保存点会默认覆盖前一个保存点*/</span></span><br><span class="line"></span><br><span class="line">        ID NAME                                     SEX  BIRTHDAY          SAL</span><br><span class="line">---------- ---------------------------------------- ---- ---------- ----------</span><br><span class="line">         <span class="number">1</span> 张小三                                   女   <span class="number">2019</span><span class="number">-01</span><span class="number">-01</span>    <span class="number">8888.88</span></span><br><span class="line">         <span class="number">2</span> 李小四                                   女   <span class="number">2019</span><span class="number">-01</span><span class="number">-01</span>    <span class="number">8888.88</span></span><br></pre></td></tr></table></figure>

<h2 id="Oracle-的基本查询"><a href="#Oracle-的基本查询" class="headerlink" title="Oracle 的基本查询"></a>Oracle 的基本查询</h2><h3 id="PL-SQL-软件中两个命令"><a href="#PL-SQL-软件中两个命令" class="headerlink" title="PL/SQL 软件中两个命令"></a>PL/SQL 软件中两个命令</h3><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SQL</span>&gt; clear <span class="comment">/*清屏命令*/</span></span><br><span class="line"><span class="keyword">SQL</span>&gt; <span class="keyword">set</span> <span class="keyword">timing</span> <span class="keyword">on</span>; <span class="comment">/*打开显示操作时间*/</span></span><br><span class="line"><span class="keyword">SQL</span>&gt; <span class="keyword">select</span> * <span class="keyword">from</span> student;</span><br><span class="line"></span><br><span class="line">        ID <span class="type">NAME</span>                                     SEX  BIRTHDAY              SAL</span><br><span class="line"><span class="comment">---------- ---------------------------------------- ---- -------------- ----------</span></span><br><span class="line">         <span class="number">1</span> 张小三                                   女   <span class="number">01</span><span class="number">-1</span>月 <span class="number">-19</span>        <span class="number">8888.88</span></span><br><span class="line">         <span class="number">2</span> 李小四                                   女   <span class="number">01</span><span class="number">-1</span>月 <span class="number">-19</span>        <span class="number">8888.88</span></span><br><span class="line"></span><br><span class="line">已用时间:  <span class="number">00</span>: <span class="number">00</span>: <span class="number">00.00</span> <span class="comment">/*这里显示操作时间*/</span></span><br><span class="line"><span class="keyword">SQL</span>&gt; <span class="keyword">set</span> <span class="keyword">timing</span> <span class="keyword">off</span>; <span class="comment">/*关闭操作时间*/</span></span><br><span class="line"><span class="keyword">SQL</span>&gt;  <span class="keyword">select</span> count(*) <span class="keyword">from</span> student; <span class="comment">/*查询所有记录数*/</span></span><br><span class="line"></span><br><span class="line">  COUNT(*)</span><br><span class="line"><span class="comment">----------</span></span><br><span class="line">         <span class="number">2</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意<br>Oracle 的字段不区分大小写，实体区分大小写。</p>
</blockquote>
<h3 id="表基本查询"><a href="#表基本查询" class="headerlink" title="表基本查询"></a>表基本查询</h3><p>scott 用户存在的几张表 ( emp ， dept )，本次实例采用 emp 和 dept 表。</p>
<h4 id="使用算术表达式"><a href="#使用算术表达式" class="headerlink" title="使用算术表达式"></a>使用算术表达式</h4><p>显示每个雇员的月收入</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">SQL&gt; select ename <span class="string">"姓名"</span>,sal 月工资 <span class="keyword">from</span> emp;</span><br><span class="line"></span><br><span class="line">姓名                     月工资</span><br><span class="line">-------------------- ----------</span><br><span class="line">SMITH                       <span class="number">800</span></span><br><span class="line">ALLEN                      <span class="number">1600</span></span><br><span class="line">WARD                       <span class="number">1250</span></span><br><span class="line">JONES                      <span class="number">2975</span></span><br><span class="line">MARTIN                     <span class="number">1250</span></span><br><span class="line">BLAKE                      <span class="number">2850</span></span><br><span class="line">CLARK                      <span class="number">2450</span></span><br><span class="line">SCOTT                      <span class="number">3000</span></span><br><span class="line">KING                       <span class="number">5000</span></span><br><span class="line">TURNER                     <span class="number">1500</span></span><br><span class="line">ADAMS                      <span class="number">1100</span></span><br><span class="line"></span><br><span class="line">姓名                     月工资</span><br><span class="line">-------------------- ----------</span><br><span class="line">JAMES                       <span class="number">950</span></span><br><span class="line">FORD                       <span class="number">3000</span></span><br><span class="line">MILLER                     <span class="number">1300</span></span><br><span class="line"></span><br><span class="line">已选择<span class="number">14</span>行。</span><br></pre></td></tr></table></figure>

<p>显示每个雇员的年收入</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">SQL&gt; select ename <span class="string">"姓名"</span>,sal * <span class="number">12</span> as <span class="string">"年收入"</span> from emp;</span><br><span class="line"></span><br><span class="line">姓名                     年收入</span><br><span class="line">-------------------- ----------</span><br><span class="line">SMITH                      <span class="number">9600</span></span><br><span class="line">ALLEN                     <span class="number">19200</span></span><br><span class="line">WARD                      <span class="number">15000</span></span><br><span class="line">JONES                     <span class="number">35700</span></span><br><span class="line">MARTIN                    <span class="number">15000</span></span><br><span class="line">BLAKE                     <span class="number">34200</span></span><br><span class="line">CLARK                     <span class="number">29400</span></span><br><span class="line">SCOTT                     <span class="number">36000</span></span><br><span class="line">KING                      <span class="number">60000</span></span><br><span class="line">TURNER                    <span class="number">18000</span></span><br><span class="line">ADAMS                     <span class="number">13200</span></span><br><span class="line"></span><br><span class="line">姓名                     年收入</span><br><span class="line">-------------------- ----------</span><br><span class="line">JAMES                     <span class="number">11400</span></span><br><span class="line">FORD                      <span class="number">36000</span></span><br><span class="line">MILLER                    <span class="number">15600</span></span><br></pre></td></tr></table></figure>

<p>这里的中文最好用引号引上,尽量不要用中文。</p>
<p>如果计算表达式中有一个 null 值，那么计算结果就为 null ，如何处理 null 值？</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">SQL&gt; select sal * <span class="number">13</span> + nvl(comm,<span class="number">0</span>) * <span class="number">13</span> <span class="string">"年薪"</span>,ename,comm <span class="keyword">from</span> emp;</span><br><span class="line"></span><br><span class="line">      年薪 ENAME                      COMM</span><br><span class="line">---------- -------------------- ----------</span><br><span class="line">     <span class="number">10400</span> SMITH</span><br><span class="line">     <span class="number">24700</span> ALLEN                       <span class="number">300</span></span><br><span class="line">     <span class="number">22750</span> WARD                        <span class="number">500</span></span><br><span class="line">     <span class="number">38675</span> JONES</span><br><span class="line">     <span class="number">34450</span> MARTIN                     <span class="number">1400</span></span><br><span class="line">     <span class="number">37050</span> BLAKE</span><br><span class="line">     <span class="number">31850</span> CLARK</span><br><span class="line">     <span class="number">39000</span> SCOTT</span><br><span class="line">     <span class="number">65000</span> KING</span><br><span class="line">     <span class="number">19500</span> TURNER                        <span class="number">0</span></span><br><span class="line">     <span class="number">14300</span> ADAMS</span><br><span class="line"></span><br><span class="line">      年薪 ENAME                      COMM</span><br><span class="line">---------- -------------------- ----------</span><br><span class="line">     <span class="number">12350</span> JAMES</span><br><span class="line">     <span class="number">39000</span> FORD</span><br><span class="line">     <span class="number">16900</span> MILLER</span><br><span class="line"></span><br><span class="line">已选择<span class="number">14</span>行。</span><br></pre></td></tr></table></figure>

<p>nvl(comm,0) 的意思是：如果 comm 为 null ，那么按 0 计算，不是 0 按本身计算。</p>
<p>用 “||” 来连接字符串</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SQL</span>&gt; <span class="keyword">select</span> ename || <span class="string">' is a '</span> || job <span class="keyword">from</span> emp; <span class="comment">/*这句话表示:姓名为 XX 是做 XX 工作的*/</span></span><br><span class="line"></span><br><span class="line">ENAME||<span class="string">'ISA'</span>||JOB</span><br><span class="line"><span class="comment">------------------------------------------------------------------------------------------------------</span></span><br><span class="line">SMITH <span class="keyword">is</span> a CLERK</span><br><span class="line">ALLEN <span class="keyword">is</span> a SALESMAN</span><br><span class="line">WARD <span class="keyword">is</span> a SALESMAN</span><br><span class="line">JONES <span class="keyword">is</span> a MANAGER</span><br><span class="line">MARTIN <span class="keyword">is</span> a SALESMAN</span><br><span class="line">BLAKE <span class="keyword">is</span> a MANAGER</span><br><span class="line">CLARK <span class="keyword">is</span> a MANAGER</span><br><span class="line">SCOTT <span class="keyword">is</span> a ANALYST</span><br><span class="line">KING <span class="keyword">is</span> a PRESIDENT</span><br><span class="line">TURNER <span class="keyword">is</span> a SALESMAN</span><br><span class="line">ADAMS <span class="keyword">is</span> a CLERK</span><br><span class="line"></span><br><span class="line">ENAME||<span class="string">'ISA'</span>||JOB</span><br><span class="line"><span class="comment">------------------------------------------------------------------------------------------------------</span></span><br><span class="line">JAMES <span class="keyword">is</span> a CLERK</span><br><span class="line">FORD <span class="keyword">is</span> a ANALYST</span><br><span class="line">MILLER <span class="keyword">is</span> a CLERK</span><br><span class="line"></span><br><span class="line">已选择<span class="number">14</span>行。</span><br></pre></td></tr></table></figure>

<h4 id="使用-where-字句"><a href="#使用-where-字句" class="headerlink" title="使用 where 字句"></a>使用 where 字句</h4><p>显示工资高于 3000 的员工</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SQL</span>&gt; <span class="keyword">select</span> ename,sal <span class="keyword">from</span> emp <span class="keyword">where</span> sal &gt; <span class="number">3000</span>;</span><br><span class="line"></span><br><span class="line">ENAME                       SAL</span><br><span class="line"><span class="comment">-------------------- ----------</span></span><br><span class="line">KING                       <span class="number">5000</span></span><br></pre></td></tr></table></figure>

<p>查找 1982-1-1 后入职的员工</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line">SQL&gt; select ename from emp where hiredate &gt; <span class="emphasis">'1982-1-1'</span>;</span><br><span class="line"></span><br><span class="line">ENAME</span><br><span class="line">--------------------</span><br><span class="line">SCOTT</span><br><span class="line">ADAMS</span><br><span class="line">MILLER</span><br></pre></td></tr></table></figure>

<p>查找工资在 2000-2500 之间的员工，并且显示员工的工资</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SQL</span>&gt; <span class="keyword">select</span> ename,sal <span class="keyword">from</span> emp <span class="keyword">where</span> sal &gt;=<span class="number">2000</span> <span class="keyword">and</span> sal &lt;=<span class="number">2500</span>;</span><br><span class="line"></span><br><span class="line">ENAME                       SAL</span><br><span class="line"><span class="comment">-------------------- ----------</span></span><br><span class="line">CLARK                      <span class="number">2450</span></span><br></pre></td></tr></table></figure>

<h4 id="使用-like-操作符"><a href="#使用-like-操作符" class="headerlink" title="使用 like 操作符"></a>使用 like 操作符</h4><p>%：表示 0 到多个字符<br>_：表示任意单个字符</p>
<p>显示首字母为 S 的员工</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line">SQL&gt; select ename from emp where ename like <span class="emphasis">'S%'</span>;</span><br><span class="line"></span><br><span class="line">ENAME</span><br><span class="line">--------------------</span><br><span class="line">SMITH</span><br><span class="line">SCOTT</span><br></pre></td></tr></table></figure>

<p>显示第三个字母为大写 O 的所有员工的姓名和工资</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SQL</span>&gt; <span class="keyword">select</span> ename,sal <span class="keyword">from</span> emp <span class="keyword">where</span> ename <span class="keyword">like</span> <span class="string">'__O%'</span>; <span class="comment">/*注意: 两个 _ 符号*/</span></span><br><span class="line"></span><br><span class="line">ENAME                       SAL</span><br><span class="line"><span class="comment">-------------------- ----------</span></span><br><span class="line">SCOTT                      <span class="number">3000</span></span><br></pre></td></tr></table></figure>

<h4 id="在-where-条件中使用-in"><a href="#在-where-条件中使用-in" class="headerlink" title="在 where 条件中使用 in"></a>在 where 条件中使用 in</h4><p>显示 empno 为 7844 , 7839 , 123 , 456 的雇员情况</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">SQL&gt; select * <span class="keyword">from</span> emp where empno <span class="keyword">in</span>(<span class="number">7844</span>,<span class="number">7839</span>,<span class="number">123</span>,<span class="number">456</span>);</span><br><span class="line"></span><br><span class="line">     EMPNO ENAME                JOB                       MGR HIREDATE          SAL       COMM     DEPTNO</span><br><span class="line">---------- -------------------- ------------------ ---------- ---------- ---------- ---------- ----------</span><br><span class="line">      <span class="number">7839</span> KING                 PRESIDENT                     <span class="number">1981</span><span class="number">-11</span><span class="number">-17</span>       <span class="number">5000</span>                    <span class="number">10</span></span><br><span class="line">      <span class="number">7844</span> TURNER               SALESMAN                 <span class="number">7698</span> <span class="number">1981</span><span class="number">-09</span><span class="number">-08</span>       <span class="number">1500</span>          <span class="number">0</span>         <span class="number">30</span></span><br></pre></td></tr></table></figure>

<p>这种查询效率很高</p>
<h4 id="使用-is-null-操作符"><a href="#使用-is-null-操作符" class="headerlink" title="使用 is null 操作符"></a>使用 is null 操作符</h4><p>显示没有上级的雇员情况</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">SQL&gt; select * <span class="keyword">from</span> emp where mgr <span class="keyword">is</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">     EMPNO ENAME                JOB                       MGR HIREDATE          SAL       COMM     DEPTNO</span><br><span class="line">---------- -------------------- ------------------ ---------- ---------- ---------- ---------- ----------</span><br><span class="line">      <span class="number">7839</span> KING                 PRESIDENT                     <span class="number">1981</span><span class="number">-11</span><span class="number">-17</span>       <span class="number">5000</span>                    <span class="number">10</span></span><br></pre></td></tr></table></figure>

<h4 id="使用逻辑操作符号"><a href="#使用逻辑操作符号" class="headerlink" title="使用逻辑操作符号"></a>使用逻辑操作符号</h4><p>查询工资高于 500 或者是岗位为 MANAGER 的雇员，同时还要满足他们的姓名首字母为大写的 J </p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">SQL&gt; select * <span class="keyword">from</span> emp where (sal &gt;<span class="number">500</span> <span class="keyword">or</span> job=<span class="string">'MANAGER'</span>) <span class="keyword">and</span> ename like <span class="string">'J%'</span>;</span><br><span class="line"></span><br><span class="line">     EMPNO ENAME                JOB                       MGR HIREDATE          SAL       COMM     DEPTNO</span><br><span class="line">---------- -------------------- ------------------ ---------- ---------- ---------- ---------- ----------</span><br><span class="line">      <span class="number">7566</span> JONES                MANAGER                  <span class="number">7839</span> <span class="number">1981</span><span class="number">-04</span><span class="number">-02</span>       <span class="number">2975</span>                    <span class="number">20</span></span><br><span class="line">      <span class="number">7900</span> JAMES                CLERK                    <span class="number">7698</span> <span class="number">1981</span><span class="number">-12</span><span class="number">-03</span>        <span class="number">950</span>                    <span class="number">30</span></span><br></pre></td></tr></table></figure>

<p>这里的括号不可以忘记,否则条件就变了,因为 and 的优先级高于 or 。</p>
<h4 id="使用-order-by-子句"><a href="#使用-order-by-子句" class="headerlink" title="使用 order by 子句"></a>使用 order by 子句</h4><p>按照工资从高到低的顺序显示雇员和工资</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">SQL&gt; select ename,sal <span class="keyword">from</span> emp order by sal desc;</span><br><span class="line"></span><br><span class="line">ENAME                       SAL</span><br><span class="line">-------------------- ----------</span><br><span class="line">KING                       <span class="number">5000</span></span><br><span class="line">FORD                       <span class="number">3000</span></span><br><span class="line">SCOTT                      <span class="number">3000</span></span><br><span class="line">JONES                      <span class="number">2975</span></span><br><span class="line">BLAKE                      <span class="number">2850</span></span><br><span class="line">CLARK                      <span class="number">2450</span></span><br><span class="line">ALLEN                      <span class="number">1600</span></span><br><span class="line">TURNER                     <span class="number">1500</span></span><br><span class="line">MILLER                     <span class="number">1300</span></span><br><span class="line">WARD                       <span class="number">1250</span></span><br><span class="line">MARTIN                     <span class="number">1250</span></span><br><span class="line"></span><br><span class="line">ENAME                       SAL</span><br><span class="line">-------------------- ----------</span><br><span class="line">ADAMS                      <span class="number">1100</span></span><br><span class="line">JAMES                       <span class="number">950</span></span><br><span class="line">SMITH                       <span class="number">800</span></span><br><span class="line"></span><br><span class="line">已选择<span class="number">14</span>行。</span><br></pre></td></tr></table></figure>

<p>desc 为降序， asc 为升序(默认)</p>
<p>照部门号升序而雇员工资降序排列(知道某和部门最高工资的员工和最低工资的员工是谁)</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">SQL&gt; select * <span class="keyword">from</span> emp order by deptno asc,sal desc;</span><br><span class="line"></span><br><span class="line">     EMPNO ENAME                JOB                       MGR HIREDATE          SAL       COMM     DEPTNO</span><br><span class="line">---------- -------------------- ------------------ ---------- ---------- ---------- ---------- ----------</span><br><span class="line">      <span class="number">7839</span> KING                 PRESIDENT                     <span class="number">1981</span><span class="number">-11</span><span class="number">-17</span>       <span class="number">5000</span>                    <span class="number">10</span></span><br><span class="line">      <span class="number">7782</span> CLARK                MANAGER                  <span class="number">7839</span> <span class="number">1981</span><span class="number">-06</span><span class="number">-09</span>       <span class="number">2450</span>                    <span class="number">10</span></span><br><span class="line">      <span class="number">7934</span> MILLER               CLERK                    <span class="number">7782</span> <span class="number">1982</span><span class="number">-01</span><span class="number">-23</span>       <span class="number">1300</span>                    <span class="number">10</span></span><br><span class="line">      <span class="number">7788</span> SCOTT                ANALYST                  <span class="number">7566</span> <span class="number">1987</span><span class="number">-04</span><span class="number">-19</span>       <span class="number">3000</span>                    <span class="number">20</span></span><br><span class="line">      <span class="number">7902</span> FORD                 ANALYST                  <span class="number">7566</span> <span class="number">1981</span><span class="number">-12</span><span class="number">-03</span>       <span class="number">3000</span>                    <span class="number">20</span></span><br><span class="line">      <span class="number">7566</span> JONES                MANAGER                  <span class="number">7839</span> <span class="number">1981</span><span class="number">-04</span><span class="number">-02</span>       <span class="number">2975</span>                    <span class="number">20</span></span><br><span class="line">      <span class="number">7876</span> ADAMS                CLERK                    <span class="number">7788</span> <span class="number">1987</span><span class="number">-05</span><span class="number">-23</span>       <span class="number">1100</span>                    <span class="number">20</span></span><br><span class="line">      <span class="number">7369</span> SMITH                CLERK                    <span class="number">7902</span> <span class="number">1980</span><span class="number">-12</span><span class="number">-17</span>        <span class="number">800</span>                    <span class="number">20</span></span><br><span class="line">      <span class="number">7698</span> BLAKE                MANAGER                  <span class="number">7839</span> <span class="number">1981</span><span class="number">-05</span><span class="number">-01</span>       <span class="number">2850</span>                    <span class="number">30</span></span><br><span class="line">      <span class="number">7499</span> ALLEN                SALESMAN                 <span class="number">7698</span> <span class="number">1981</span><span class="number">-02</span><span class="number">-20</span>       <span class="number">1600</span>        <span class="number">300</span>         <span class="number">30</span></span><br><span class="line">      <span class="number">7844</span> TURNER               SALESMAN                 <span class="number">7698</span> <span class="number">1981</span><span class="number">-09</span><span class="number">-08</span>       <span class="number">1500</span>          <span class="number">0</span>         <span class="number">30</span></span><br><span class="line"></span><br><span class="line">     EMPNO ENAME                JOB                       MGR HIREDATE          SAL       COMM     DEPTNO</span><br><span class="line">---------- -------------------- ------------------ ---------- ---------- ---------- ---------- ----------</span><br><span class="line">      <span class="number">7654</span> MARTIN               SALESMAN                 <span class="number">7698</span> <span class="number">1981</span><span class="number">-09</span><span class="number">-28</span>       <span class="number">1250</span>       <span class="number">1400</span>         <span class="number">30</span></span><br><span class="line">      <span class="number">7521</span> WARD                 SALESMAN                 <span class="number">7698</span> <span class="number">1981</span><span class="number">-02</span><span class="number">-22</span>       <span class="number">1250</span>        <span class="number">500</span>         <span class="number">30</span></span><br><span class="line">      <span class="number">7900</span> JAMES                CLERK                    <span class="number">7698</span> <span class="number">1981</span><span class="number">-12</span><span class="number">-03</span>        <span class="number">950</span>                    <span class="number">30</span></span><br><span class="line"></span><br><span class="line">已选择<span class="number">14</span>行。</span><br></pre></td></tr></table></figure>

<h4 id="使用列的别名排序"><a href="#使用列的别名排序" class="headerlink" title="使用列的别名排序"></a>使用列的别名排序</h4><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">SQL&gt; select ename,sal * <span class="number">12</span> <span class="string">"年薪"</span> from emp order by <span class="string">"年薪"</span> asc;</span><br><span class="line"></span><br><span class="line">ENAME                      年薪</span><br><span class="line">-------------------- ----------</span><br><span class="line">SMITH                      <span class="number">9600</span></span><br><span class="line">JAMES                     <span class="number">11400</span></span><br><span class="line">ADAMS                     <span class="number">13200</span></span><br><span class="line">WARD                      <span class="number">15000</span></span><br><span class="line">MARTIN                    <span class="number">15000</span></span><br><span class="line">MILLER                    <span class="number">15600</span></span><br><span class="line">TURNER                    <span class="number">18000</span></span><br><span class="line">ALLEN                     <span class="number">19200</span></span><br><span class="line">CLARK                     <span class="number">29400</span></span><br><span class="line">BLAKE                     <span class="number">34200</span></span><br><span class="line">JONES                     <span class="number">35700</span></span><br><span class="line"></span><br><span class="line">ENAME                      年薪</span><br><span class="line">-------------------- ----------</span><br><span class="line">SCOTT                     <span class="number">36000</span></span><br><span class="line">FORD                      <span class="number">36000</span></span><br><span class="line">KING                      <span class="number">60000</span></span><br><span class="line"></span><br><span class="line">已选择<span class="number">14</span>行。</span><br></pre></td></tr></table></figure>

<h2 id="Oracle-的复杂查询"><a href="#Oracle-的复杂查询" class="headerlink" title="Oracle 的复杂查询"></a>Oracle 的复杂查询</h2><p>在实际应用中经常需要执行复杂的数据统计,经常需要现实多张表的数据，所以经常要用到数据分组函数如 max() , min() , avg() , sum() , count() 等。</p>
<h4 id="分组函数"><a href="#分组函数" class="headerlink" title="分组函数"></a>分组函数</h4><p>显示所有员工中最高工资和最低工资</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SQL</span>&gt; <span class="keyword">select</span> max(sal),min(sal) <span class="keyword">from</span> emp;</span><br><span class="line"></span><br><span class="line">  MAX(SAL)   MIN(SAL)</span><br><span class="line"><span class="comment">---------- ----------</span></span><br><span class="line">      <span class="number">5000</span>        <span class="number">800</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意<br>如果列里面有一个分组函数，其它的都必须是分组函数， 否则就出错；如本例中不能写成：</p>
</blockquote>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line">SQL&gt; <span class="keyword">select</span> ename, sal <span class="keyword">from</span> emp <span class="keyword">where</span> sal = <span class="built_in">max</span>(sal);</span><br><span class="line"><span class="keyword">select</span> ename, sal <span class="keyword">from</span> emp <span class="keyword">where</span> sal = <span class="built_in">max</span>(sal)</span><br><span class="line">                                       *</span><br><span class="line">第 <span class="number">1</span> 行出现错误:</span><br><span class="line">ORA<span class="number">-00934</span>: 此处不允许使用分组函数</span><br></pre></td></tr></table></figure>

<p>因为： max 是分组函数，而 ename 不是分组函数。</p>
<p>查询最高，最低工资的员工(利用子查询)</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SQL</span>&gt; <span class="keyword">select</span> ename,sal <span class="keyword">from</span> emp <span class="keyword">where</span> sal = (<span class="keyword">select</span> max(sal) <span class="keyword">from</span> emp);</span><br><span class="line"></span><br><span class="line">ENAME                       SAL</span><br><span class="line"><span class="comment">-------------------- ----------</span></span><br><span class="line">KING                       <span class="number">5000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SQL</span>&gt; <span class="keyword">select</span> ename,sal <span class="keyword">from</span> emp <span class="keyword">where</span> sal = (<span class="keyword">select</span> min(sal) <span class="keyword">from</span> emp);</span><br><span class="line"></span><br><span class="line">ENAME                       SAL</span><br><span class="line"><span class="comment">-------------------- ----------</span></span><br><span class="line">SMITH                       <span class="number">800</span></span><br></pre></td></tr></table></figure>

<p>示工资最高的员工的名字，工作岗位</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SQL</span>&gt; <span class="keyword">select</span> ename,job <span class="keyword">from</span> emp <span class="keyword">where</span> sal = (<span class="keyword">select</span> max(sal) <span class="keyword">from</span> emp);</span><br><span class="line"></span><br><span class="line">ENAME                JOB</span><br><span class="line"><span class="comment">-------------------- ------------------</span></span><br><span class="line">KING                 PRESIDENT</span><br></pre></td></tr></table></figure>

<p>显示工资高于平均工资的员工信息</p>
<p>首先我们可以查询所有员工的平均工资</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line">SQL&gt; select avg(sal) from emp;</span><br><span class="line"></span><br><span class="line"><span class="code">  AVG(SAL)</span></span><br><span class="line">----------</span><br><span class="line">2073.21429</span><br></pre></td></tr></table></figure>

<p>然后再查询高于平均工资的员工信息</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">SQL&gt; select * <span class="keyword">from</span> emp where sal &gt; <span class="number">2073</span>;</span><br><span class="line"></span><br><span class="line">     EMPNO ENAME                JOB                       MGR HIREDATE          SAL       COMM     DEPTNO</span><br><span class="line">---------- -------------------- ------------------ ---------- ---------- ---------- ---------- ----------</span><br><span class="line">      <span class="number">7566</span> JONES                MANAGER                  <span class="number">7839</span> <span class="number">1981</span><span class="number">-04</span><span class="number">-02</span>       <span class="number">2975</span>                    <span class="number">20</span></span><br><span class="line">      <span class="number">7698</span> BLAKE                MANAGER                  <span class="number">7839</span> <span class="number">1981</span><span class="number">-05</span><span class="number">-01</span>       <span class="number">2850</span>                    <span class="number">30</span></span><br><span class="line">      <span class="number">7782</span> CLARK                MANAGER                  <span class="number">7839</span> <span class="number">1981</span><span class="number">-06</span><span class="number">-09</span>       <span class="number">2450</span>                    <span class="number">10</span></span><br><span class="line">      <span class="number">7788</span> SCOTT                ANALYST                  <span class="number">7566</span> <span class="number">1987</span><span class="number">-04</span><span class="number">-19</span>       <span class="number">3000</span>                    <span class="number">20</span></span><br><span class="line">      <span class="number">7839</span> KING                 PRESIDENT                     <span class="number">1981</span><span class="number">-11</span><span class="number">-17</span>       <span class="number">5000</span>                    <span class="number">10</span></span><br><span class="line">      <span class="number">7902</span> FORD                 ANALYST                  <span class="number">7566</span> <span class="number">1981</span><span class="number">-12</span><span class="number">-03</span>       <span class="number">3000</span>                    <span class="number">20</span></span><br><span class="line"></span><br><span class="line">已选择<span class="number">6</span>行。</span><br></pre></td></tr></table></figure>

<p>当然也可以利用子查询</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">SQL&gt; select * <span class="keyword">from</span> emp where sal &gt; (select avg(sal) <span class="keyword">from</span> emp);</span><br><span class="line"></span><br><span class="line">     EMPNO ENAME                JOB                       MGR HIREDATE          SAL       COMM     DEPTNO</span><br><span class="line">---------- -------------------- ------------------ ---------- ---------- ---------- ---------- ----------</span><br><span class="line">      <span class="number">7566</span> JONES                MANAGER                  <span class="number">7839</span> <span class="number">1981</span><span class="number">-04</span><span class="number">-02</span>       <span class="number">2975</span>                    <span class="number">20</span></span><br><span class="line">      <span class="number">7698</span> BLAKE                MANAGER                  <span class="number">7839</span> <span class="number">1981</span><span class="number">-05</span><span class="number">-01</span>       <span class="number">2850</span>                    <span class="number">30</span></span><br><span class="line">      <span class="number">7782</span> CLARK                MANAGER                  <span class="number">7839</span> <span class="number">1981</span><span class="number">-06</span><span class="number">-09</span>       <span class="number">2450</span>                    <span class="number">10</span></span><br><span class="line">      <span class="number">7788</span> SCOTT                ANALYST                  <span class="number">7566</span> <span class="number">1987</span><span class="number">-04</span><span class="number">-19</span>       <span class="number">3000</span>                    <span class="number">20</span></span><br><span class="line">      <span class="number">7839</span> KING                 PRESIDENT                     <span class="number">1981</span><span class="number">-11</span><span class="number">-17</span>       <span class="number">5000</span>                    <span class="number">10</span></span><br><span class="line">      <span class="number">7902</span> FORD                 ANALYST                  <span class="number">7566</span> <span class="number">1981</span><span class="number">-12</span><span class="number">-03</span>       <span class="number">3000</span>                    <span class="number">20</span></span><br><span class="line"></span><br><span class="line">已选择<span class="number">6</span>行。</span><br></pre></td></tr></table></figure>

<p>如果这里不是 * 号而是 ename,sal 等字段与分组函数那么在语句的最后要加上 group by ename,sal..(与 select 后的字段一致)</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">SQL&gt; select ename,sal <span class="keyword">from</span> emp where sal &gt; (select avg(sal) <span class="keyword">from</span> emp)<span class="built_in"> group </span>by ename,sal;</span><br><span class="line"></span><br><span class="line">ENAME                       SAL</span><br><span class="line">-------------------- ----------</span><br><span class="line">JONES                      2975</span><br><span class="line">SCOTT                      3000</span><br><span class="line">KING                       5000</span><br><span class="line">BLAKE                      2850</span><br><span class="line">CLARK                      2450</span><br><span class="line">FORD                       3000</span><br><span class="line"></span><br><span class="line">已选择6行。</span><br></pre></td></tr></table></figure>

<h4 id="group-by-和-having-子句"><a href="#group-by-和-having-子句" class="headerlink" title="group by 和 having 子句"></a>group by 和 having 子句</h4><p>group by 用于对查询结果分组统计<br>having 子句用于限制分组显示结果</p>
<p>显示每个部门的平均工资和最高工资</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">SQL&gt; select avg(sal),max(sal),deptno <span class="keyword">from</span> emp<span class="built_in"> group </span>by deptno;</span><br><span class="line"></span><br><span class="line">  AVG(SAL)   MAX(SAL)     DEPTNO</span><br><span class="line">---------- ---------- ----------</span><br><span class="line">1566.66667       2850         30</span><br><span class="line">      2175       3000         20</span><br><span class="line">2916.66667       5000         10</span><br></pre></td></tr></table></figure>

<p>分组字段依据必须出现在查询结果中，否则结果可读性太差。</p>
<p>显示每个部门的每种岗位的平均工资和最低工资</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">SQL&gt; select avg(sal),min(sal),deptno,job <span class="keyword">from</span> emp group by job,deptno;</span><br><span class="line"></span><br><span class="line">  AVG(SAL)   MIN(SAL)     DEPTNO JOB</span><br><span class="line">---------- ---------- ---------- ------------------</span><br><span class="line">      <span class="number">2975</span>       <span class="number">2975</span>         <span class="number">20</span> MANAGER</span><br><span class="line">      <span class="number">5000</span>       <span class="number">5000</span>         <span class="number">10</span> PRESIDENT</span><br><span class="line">      <span class="number">1300</span>       <span class="number">1300</span>         <span class="number">10</span> CLERK</span><br><span class="line">      <span class="number">1400</span>       <span class="number">1250</span>         <span class="number">30</span> SALESMAN</span><br><span class="line">      <span class="number">3000</span>       <span class="number">3000</span>         <span class="number">20</span> ANALYST</span><br><span class="line">      <span class="number">2850</span>       <span class="number">2850</span>         <span class="number">30</span> MANAGER</span><br><span class="line">      <span class="number">2450</span>       <span class="number">2450</span>         <span class="number">10</span> MANAGER</span><br><span class="line">       <span class="number">950</span>        <span class="number">950</span>         <span class="number">30</span> CLERK</span><br><span class="line">       <span class="number">950</span>        <span class="number">800</span>         <span class="number">20</span> CLERK</span><br><span class="line"></span><br><span class="line">已选择<span class="number">9</span>行。</span><br></pre></td></tr></table></figure>

<p>显示平均工资低于 2000 的部门号和它的平均工资与最高工资</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SQL</span>&gt; <span class="keyword">select</span> avg(sal),max(sal),deptno <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> deptno <span class="keyword">having</span> avg(sal) &lt; <span class="number">2000</span>;</span><br><span class="line"></span><br><span class="line">  AVG(SAL)   MAX(SAL)     DEPTNO</span><br><span class="line"><span class="comment">---------- ---------- ----------</span></span><br><span class="line"><span class="number">1566.66667</span>       <span class="number">2850</span>         <span class="number">30</span></span><br></pre></td></tr></table></figure>

<h4 id="对分组函数的总结"><a href="#对分组函数的总结" class="headerlink" title="对分组函数的总结"></a>对分组函数的总结</h4><ul>
<li>分组函数只能出现在选择列表, having , group by , order by 子句中  </li>
<li>如果在select语句中同时包含有 group by , having , order by ,那么顺序为 group by , having , order by  </li>
<li>在选择列中如果有列,表达式,和分组函数,那么这些列表达式必须有一个出现在 group by 子句中,否则出错 如: </li>
</ul>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> deptno,<span class="built_in">avg</span>(sal),<span class="built_in">max</span>(sal) <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> deptno <span class="keyword">having</span> <span class="built_in">avg</span>(sal) &gt; <span class="number">2000</span>; <span class="comment">/*这里的deptno就一定要出现在group by中*/</span></span><br></pre></td></tr></table></figure>

<h4 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h4><p>基于两个或两个以上的表或是视图的查询，查单表满足不了要求，如部门和员工的关系。</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">SQL&gt; select a.ename,a.sal,b.dname <span class="keyword">from</span> emp a,dept b where a.deptno = b.deptno;</span><br><span class="line"></span><br><span class="line">ENAME                       SAL DNAME</span><br><span class="line">-------------------- ---------- ----------------------------</span><br><span class="line">CLARK                      2450 ACCOUNTING</span><br><span class="line">KING                       5000 ACCOUNTING</span><br><span class="line">MILLER                     1300 ACCOUNTING</span><br><span class="line">JONES                      2975 RESEARCH</span><br><span class="line">FORD                       3000 RESEARCH</span><br><span class="line">ADAMS                      1100 RESEARCH</span><br><span class="line">SMITH                       800 RESEARCH</span><br><span class="line">SCOTT                      3000 RESEARCH</span><br><span class="line">WARD                       1250 SALES</span><br><span class="line">TURNER                     1500 SALES</span><br><span class="line">ALLEN                      1600 SALES</span><br><span class="line"></span><br><span class="line">ENAME                       SAL DNAME</span><br><span class="line">-------------------- ---------- ----------------------------</span><br><span class="line">JAMES                       950 SALES</span><br><span class="line">BLAKE                      2850 SALES</span><br><span class="line">MARTIN                     1250 SALES</span><br><span class="line"></span><br><span class="line">已选择14行。</span><br></pre></td></tr></table></figure>

<p>如果不加 where 子句,就会产生笛卡尔集,所谓笛卡尔集,就是不加筛选,将所有的都查询出来。</p>
<p>结论：<br>两张表关联,至少需要一个条件排除笛卡尔集<br>三张表关联,至少需要二个条件排除笛卡尔集<br>以此类推:多表查询中,判断条件至少是表的个数 -1。</p>
<p>显示部门号为10的部门名,员工名和工资</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">SQL&gt; select d.dname,e.ename,e.sal <span class="keyword">from</span> emp e,dept d where e.deptno = d.deptno <span class="keyword">and</span> d.deptno = 10;</span><br><span class="line"></span><br><span class="line">DNAME                        ENAME                       SAL</span><br><span class="line">---------------------------- -------------------- ----------</span><br><span class="line">ACCOUNTING                   CLARK                      2450</span><br><span class="line">ACCOUNTING                   KING                       5000</span><br><span class="line">ACCOUNTING                   MILLER                     1300</span><br></pre></td></tr></table></figure>

<p>显示各个员工的姓名,工资及工资的级别</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">SQL&gt; select * <span class="keyword">from</span> salgrade; <span class="comment">/*先查看 salgrade 的表结构和记录*/</span></span><br><span class="line"></span><br><span class="line">     GRADE      LOSAL      HISAL</span><br><span class="line">---------- ---------- ----------</span><br><span class="line">         <span class="number">1</span>        <span class="number">700</span>       <span class="number">1200</span></span><br><span class="line">         <span class="number">2</span>       <span class="number">1201</span>       <span class="number">1400</span></span><br><span class="line">         <span class="number">3</span>       <span class="number">1401</span>       <span class="number">2000</span></span><br><span class="line">         <span class="number">4</span>       <span class="number">2001</span>       <span class="number">3000</span></span><br><span class="line">         <span class="number">5</span>       <span class="number">3001</span>       <span class="number">9999</span></span><br><span class="line"></span><br><span class="line">SQL&gt; select e.ename,e.sal,s.grade <span class="keyword">from</span> emp e,salgrade s where e.sal between s.losal <span class="keyword">and</span> s.hisal;</span><br><span class="line"></span><br><span class="line">ENAME                       SAL      GRADE</span><br><span class="line">-------------------- ---------- ----------</span><br><span class="line">SMITH                       <span class="number">800</span>          <span class="number">1</span></span><br><span class="line">JAMES                       <span class="number">950</span>          <span class="number">1</span></span><br><span class="line">ADAMS                      <span class="number">1100</span>          <span class="number">1</span></span><br><span class="line">WARD                       <span class="number">1250</span>          <span class="number">2</span></span><br><span class="line">MARTIN                     <span class="number">1250</span>          <span class="number">2</span></span><br><span class="line">MILLER                     <span class="number">1300</span>          <span class="number">2</span></span><br><span class="line">TURNER                     <span class="number">1500</span>          <span class="number">3</span></span><br><span class="line">ALLEN                      <span class="number">1600</span>          <span class="number">3</span></span><br><span class="line">CLARK                      <span class="number">2450</span>          <span class="number">4</span></span><br><span class="line">BLAKE                      <span class="number">2850</span>          <span class="number">4</span></span><br><span class="line">JONES                      <span class="number">2975</span>          <span class="number">4</span></span><br><span class="line"></span><br><span class="line">ENAME                       SAL      GRADE</span><br><span class="line">-------------------- ---------- ----------</span><br><span class="line">SCOTT                      <span class="number">3000</span>          <span class="number">4</span></span><br><span class="line">FORD                       <span class="number">3000</span>          <span class="number">4</span></span><br><span class="line">KING                       <span class="number">5000</span>          <span class="number">5</span></span><br><span class="line"></span><br><span class="line">已选择<span class="number">14</span>行。</span><br></pre></td></tr></table></figure>

<p>这里用到了 between … and 子句,表示在 losal 和 hisal 之间。</p>
<p>显示雇员名,雇员工资及所在部门的名字,并部门排序</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">SQL&gt; select e.ename,e.sal,d.dname <span class="keyword">from</span> emp e,dept d where e.deptno = d.deptno order by e.deptno;</span><br><span class="line"></span><br><span class="line">ENAME                       SAL DNAME</span><br><span class="line">-------------------- ---------- ----------------------------</span><br><span class="line">CLARK                      2450 ACCOUNTING</span><br><span class="line">KING                       5000 ACCOUNTING</span><br><span class="line">MILLER                     1300 ACCOUNTING</span><br><span class="line">JONES                      2975 RESEARCH</span><br><span class="line">FORD                       3000 RESEARCH</span><br><span class="line">ADAMS                      1100 RESEARCH</span><br><span class="line">SMITH                       800 RESEARCH</span><br><span class="line">SCOTT                      3000 RESEARCH</span><br><span class="line">WARD                       1250 SALES</span><br><span class="line">TURNER                     1500 SALES</span><br><span class="line">ALLEN                      1600 SALES</span><br><span class="line"></span><br><span class="line">ENAME                       SAL DNAME</span><br><span class="line">-------------------- ---------- ----------------------------</span><br><span class="line">JAMES                       950 SALES</span><br><span class="line">BLAKE                      2850 SALES</span><br><span class="line">MARTIN                     1250 SALES</span><br><span class="line"></span><br><span class="line">已选择14行。</span><br></pre></td></tr></table></figure>

<p>如果用 group by ,一定要把 e.deptno 放到查询列里面。</p>
<h4 id="自连接"><a href="#自连接" class="headerlink" title="自连接"></a>自连接</h4><p>自连接是指在同一张表的连接查询。</p>
<p>显示某个员工的上级领导的姓名</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SQL</span>&gt; <span class="keyword">select</span> worker.ename,boss.ename <span class="keyword">from</span> emp worker,emp boss <span class="keyword">where</span> worker.mgr = boss.empno <span class="keyword">and</span> worker.ename = <span class="string">'FORD'</span>;</span><br><span class="line"></span><br><span class="line">ENAME                ENAME</span><br><span class="line"><span class="comment">-------------------- --------------------</span></span><br><span class="line">FORD                 JONES</span><br></pre></td></tr></table></figure>

<p>根据 FORD 的名字找到 FORD 的 mgr 编号再根据这个编号找到 boss 的 empno,最后显示出来。</p>
<h4 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h4><p>子查询:指嵌入在其他 SQL 语句中的 select 语句,也叫做嵌套查询。</p>
<h5 id="单行子查询"><a href="#单行子查询" class="headerlink" title="单行子查询"></a>单行子查询</h5><p>指只返回一行数据的子查询语句。</p>
<p>显示与 SMITH 同一部门的所有员工</p>
<p>分两步:</p>
<ol>
<li>查出 SMITH 所在部门  </li>
<li>根据部门查出所有员工  </li>
</ol>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">SQL&gt; select deptno <span class="keyword">from</span> emp where ename = <span class="string">'SMITH'</span>;</span><br><span class="line"></span><br><span class="line">    DEPTNO</span><br><span class="line">----------</span><br><span class="line">        <span class="number">20</span></span><br><span class="line"></span><br><span class="line">SQL&gt; select * <span class="keyword">from</span> emp where deptno = (select deptno <span class="keyword">from</span> emp where ename = <span class="string">'SMITH'</span>);</span><br><span class="line"></span><br><span class="line">     EMPNO ENAME                JOB                       MGR HIREDATE          SAL       COMM     DEPTNO</span><br><span class="line">---------- -------------------- ------------------ ---------- ---------- ---------- ---------- ----------</span><br><span class="line">      <span class="number">7369</span> SMITH                CLERK                    <span class="number">7902</span> <span class="number">1980</span><span class="number">-12</span><span class="number">-17</span>        <span class="number">800</span>                    <span class="number">20</span></span><br><span class="line">      <span class="number">7566</span> JONES                MANAGER                  <span class="number">7839</span> <span class="number">1981</span><span class="number">-04</span><span class="number">-02</span>       <span class="number">2975</span>                    <span class="number">20</span></span><br><span class="line">      <span class="number">7788</span> SCOTT                ANALYST                  <span class="number">7566</span> <span class="number">1987</span><span class="number">-04</span><span class="number">-19</span>       <span class="number">3000</span>                    <span class="number">20</span></span><br><span class="line">      <span class="number">7876</span> ADAMS                CLERK                    <span class="number">7788</span> <span class="number">1987</span><span class="number">-05</span><span class="number">-23</span>       <span class="number">1100</span>                    <span class="number">20</span></span><br><span class="line">      <span class="number">7902</span> FORD                 ANALYST                  <span class="number">7566</span> <span class="number">1981</span><span class="number">-12</span><span class="number">-03</span>       <span class="number">3000</span>                    <span class="number">20</span></span><br></pre></td></tr></table></figure>

<p>数据库在执行 SQL 是从左到右扫描的， 如果有括号的话，括号里面的先被优先执行。</p>
<h5 id="多行子查询"><a href="#多行子查询" class="headerlink" title="多行子查询"></a>多行子查询</h5><p>返回多行数据的子查询</p>
<p>查询和部门 10 的工作相同的雇员的名字,岗位,工资,部门号</p>
<p>1.首先查出部门 10 的工作种类</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line">SQL&gt; select job from emp where deptno = 10;</span><br><span class="line"></span><br><span class="line">JOB</span><br><span class="line">------------------</span><br><span class="line">MANAGER</span><br><span class="line">PRESIDENT</span><br><span class="line">CLERK</span><br></pre></td></tr></table></figure>

<p>发现有重复结果,所以在 job 前加上 distinct</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line">SQL&gt; select distinct job from emp where deptno = 10;</span><br><span class="line"></span><br><span class="line">JOB</span><br><span class="line">------------------</span><br><span class="line">CLERK</span><br><span class="line">PRESIDENT</span><br><span class="line">MANAGER</span><br></pre></td></tr></table></figure>

<p>2.根据工作的种类查询</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">SQL&gt; select ename,job,sal,deptno <span class="keyword">from</span> emp where job <span class="keyword">in</span> (select distinct job <span class="keyword">from</span> emp where deptno = <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">ENAME                JOB                       SAL     DEPTNO</span><br><span class="line">-------------------- ------------------ ---------- ----------</span><br><span class="line">CLARK                MANAGER                  <span class="number">2450</span>         <span class="number">10</span></span><br><span class="line">BLAKE                MANAGER                  <span class="number">2850</span>         <span class="number">30</span></span><br><span class="line">JONES                MANAGER                  <span class="number">2975</span>         <span class="number">20</span></span><br><span class="line">KING                 PRESIDENT                <span class="number">5000</span>         <span class="number">10</span></span><br><span class="line">MILLER               CLERK                    <span class="number">1300</span>         <span class="number">10</span></span><br><span class="line">JAMES                CLERK                     <span class="number">950</span>         <span class="number">30</span></span><br><span class="line">ADAMS                CLERK                    <span class="number">1100</span>         <span class="number">20</span></span><br><span class="line">SMITH                CLERK                     <span class="number">800</span>         <span class="number">20</span></span><br><span class="line"></span><br><span class="line">已选择<span class="number">8</span>行。</span><br></pre></td></tr></table></figure>

<p>注意这里 job 之后用的是” in “而非” = “,因为等号 = 是一对一的。</p>
<h5 id="all-操作符"><a href="#all-操作符" class="headerlink" title="all 操作符"></a>all 操作符</h5><p>显示工资比部门 30 的所有员工的工资高的员工的姓名,工资和部门号</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">SQL&gt; select ename,sal,deptno <span class="keyword">from</span> emp where sal &gt; all (select sal <span class="keyword">from</span> emp where deptno = <span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">ENAME                       SAL     DEPTNO</span><br><span class="line">-------------------- ---------- ----------</span><br><span class="line">JONES                      <span class="number">2975</span>         <span class="number">20</span></span><br><span class="line">SCOTT                      <span class="number">3000</span>         <span class="number">20</span></span><br><span class="line">FORD                       <span class="number">3000</span>         <span class="number">20</span></span><br><span class="line">KING                       <span class="number">5000</span>         <span class="number">10</span></span><br></pre></td></tr></table></figure>

<p>也可以使用 max 方法</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">SQL&gt; select ename,sal,deptno <span class="keyword">from</span> emp where sal &gt; (select max(sal) <span class="keyword">from</span> emp where deptno = <span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">ENAME                       SAL     DEPTNO</span><br><span class="line">-------------------- ---------- ----------</span><br><span class="line">JONES                      <span class="number">2975</span>         <span class="number">20</span></span><br><span class="line">SCOTT                      <span class="number">3000</span>         <span class="number">20</span></span><br><span class="line">KING                       <span class="number">5000</span>         <span class="number">10</span></span><br><span class="line">FORD                       <span class="number">3000</span>         <span class="number">20</span></span><br></pre></td></tr></table></figure>

<p>max 方法的效率较高,原因是使用 all 操作符时,要和子查询所得结果逐一比较而使用 max 只需和 sal 中的最大值比较,减少了比较的次数,缩短了时间。数据量较大是会比较明显,数据量较小基本看不出来。</p>
<h5 id="any-操作符"><a href="#any-操作符" class="headerlink" title="any 操作符"></a>any 操作符</h5><p>显示工资比部门 30 的任意一个员工的工资高的员工的姓名,工资和部门号</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">SQL&gt; select ename,sal,deptno <span class="keyword">from</span> emp where sal &gt; any (select sal <span class="keyword">from</span> emp where deptno = <span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">ENAME                       SAL     DEPTNO</span><br><span class="line">-------------------- ---------- ----------</span><br><span class="line">KING                       <span class="number">5000</span>         <span class="number">10</span></span><br><span class="line">FORD                       <span class="number">3000</span>         <span class="number">20</span></span><br><span class="line">SCOTT                      <span class="number">3000</span>         <span class="number">20</span></span><br><span class="line">JONES                      <span class="number">2975</span>         <span class="number">20</span></span><br><span class="line">BLAKE                      <span class="number">2850</span>         <span class="number">30</span></span><br><span class="line">CLARK                      <span class="number">2450</span>         <span class="number">10</span></span><br><span class="line">ALLEN                      <span class="number">1600</span>         <span class="number">30</span></span><br><span class="line">TURNER                     <span class="number">1500</span>         <span class="number">30</span></span><br><span class="line">MILLER                     <span class="number">1300</span>         <span class="number">10</span></span><br><span class="line">WARD                       <span class="number">1250</span>         <span class="number">30</span></span><br><span class="line">MARTIN                     <span class="number">1250</span>         <span class="number">30</span></span><br><span class="line"></span><br><span class="line">ENAME                       SAL     DEPTNO</span><br><span class="line">-------------------- ---------- ----------</span><br><span class="line">ADAMS                      <span class="number">1100</span>         <span class="number">20</span></span><br><span class="line"></span><br><span class="line">已选择<span class="number">12</span>行。</span><br></pre></td></tr></table></figure>

<p>也可以使用 min 方法</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">SQL&gt; select ename,sal,deptno <span class="keyword">from</span> emp where sal &gt; (select min(sal) <span class="keyword">from</span> emp where deptno = <span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">ENAME                       SAL     DEPTNO</span><br><span class="line">-------------------- ---------- ----------</span><br><span class="line">ALLEN                      <span class="number">1600</span>         <span class="number">30</span></span><br><span class="line">WARD                       <span class="number">1250</span>         <span class="number">30</span></span><br><span class="line">JONES                      <span class="number">2975</span>         <span class="number">20</span></span><br><span class="line">MARTIN                     <span class="number">1250</span>         <span class="number">30</span></span><br><span class="line">BLAKE                      <span class="number">2850</span>         <span class="number">30</span></span><br><span class="line">CLARK                      <span class="number">2450</span>         <span class="number">10</span></span><br><span class="line">SCOTT                      <span class="number">3000</span>         <span class="number">20</span></span><br><span class="line">KING                       <span class="number">5000</span>         <span class="number">10</span></span><br><span class="line">TURNER                     <span class="number">1500</span>         <span class="number">30</span></span><br><span class="line">ADAMS                      <span class="number">1100</span>         <span class="number">20</span></span><br><span class="line">FORD                       <span class="number">3000</span>         <span class="number">20</span></span><br><span class="line"></span><br><span class="line">ENAME                       SAL     DEPTNO</span><br><span class="line">-------------------- ---------- ----------</span><br><span class="line">MILLER                     <span class="number">1300</span>         <span class="number">10</span></span><br><span class="line"></span><br><span class="line">已选择<span class="number">12</span>行。</span><br></pre></td></tr></table></figure>

<p>原理同上</p>
<h5 id="多列子查询"><a href="#多列子查询" class="headerlink" title="多列子查询"></a>多列子查询</h5><p>单行子查询是指子查询只返回单列、单行数据，多行子查询是指返回单列多行数据， 都是针对单列而言的，而多列子查询是指查询返回多个列数据的子查询语句。</p>
<p>查询与 SMITH 的部门和岗位完全相同的所有雇员</p>
<p>1.查询出 SMITH 的部门号,岗位</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SQL</span>&gt; <span class="keyword">select</span> deptno,job <span class="keyword">from</span> emp <span class="keyword">where</span> ename = <span class="string">'SMITH'</span>;</span><br><span class="line"></span><br><span class="line">    DEPTNO JOB</span><br><span class="line"><span class="comment">---------- ------------------</span></span><br><span class="line">        <span class="number">20</span> CLERK</span><br></pre></td></tr></table></figure>

<p>2.显示结果</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">SQL&gt; select * <span class="keyword">from</span> emp where (deptno,job) = (select deptno,job <span class="keyword">from</span> emp where ename = <span class="string">'SMITH'</span>);</span><br><span class="line"></span><br><span class="line">     EMPNO ENAME                JOB                       MGR HIREDATE          SAL       COMM     DEPTNO</span><br><span class="line">---------- -------------------- ------------------ ---------- ---------- ---------- ---------- ----------</span><br><span class="line">      <span class="number">7369</span> SMITH                CLERK                    <span class="number">7902</span> <span class="number">1980</span><span class="number">-12</span><span class="number">-17</span>        <span class="number">800</span>                    <span class="number">20</span></span><br><span class="line">      <span class="number">7876</span> ADAMS                CLERK                    <span class="number">7788</span> <span class="number">1987</span><span class="number">-05</span><span class="number">-23</span>       <span class="number">1100</span>                    <span class="number">20</span></span><br></pre></td></tr></table></figure>

<h5 id="在-from-子句中使用子查询"><a href="#在-from-子句中使用子查询" class="headerlink" title="在 from 子句中使用子查询"></a>在 from 子句中使用子查询</h5><p>显示高于自己部门的平均工资员工信息</p>
<p>1.查询各个部门的平均工资和部门号</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">SQL&gt; select avg(sal),deptno <span class="keyword">from</span> emp<span class="built_in"> group </span>by deptno;</span><br><span class="line"></span><br><span class="line">  AVG(SAL)     DEPTNO</span><br><span class="line">---------- ----------</span><br><span class="line">1566.66667         30</span><br><span class="line">      2175         20</span><br><span class="line">2916.66667         10</span><br></pre></td></tr></table></figure>

<p>2.把上面的查询看作是一张子表</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">SQL&gt; select e.ename,e.deptno,e.sal,ds.mysal <span class="keyword">from</span> emp e,(select deptno, avg(sal) mysal <span class="keyword">from</span> emp group by deptno) ds where e.deptno = ds.deptno <span class="keyword">and</span> e.sal &gt; ds.mysal;</span><br><span class="line"></span><br><span class="line">ENAME                    DEPTNO        SAL      MYSAL</span><br><span class="line">-------------------- ---------- ---------- ----------</span><br><span class="line">ALLEN                        <span class="number">30</span>       <span class="number">1600</span> <span class="number">1566.66667</span></span><br><span class="line">JONES                        <span class="number">20</span>       <span class="number">2975</span>       <span class="number">2175</span></span><br><span class="line">BLAKE                        <span class="number">30</span>       <span class="number">2850</span> <span class="number">1566.66667</span></span><br><span class="line">SCOTT                        <span class="number">20</span>       <span class="number">3000</span>       <span class="number">2175</span></span><br><span class="line">KING                         <span class="number">10</span>       <span class="number">5000</span> <span class="number">2916.66667</span></span><br><span class="line">FORD                         <span class="number">20</span>       <span class="number">3000</span>       <span class="number">2175</span></span><br><span class="line"></span><br><span class="line">已选择<span class="number">6</span>行。</span><br></pre></td></tr></table></figure>

<p>将这两个表做关联查询,当在 from 子句中使用子查询时,该子查询会被作为一个视图来对待,因此叫做内嵌视图,当在 from 子句中使用子查询时,必须为子查询指定别名。</p>
<p>注意：别名不能用 as ,如:</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line">SQL&gt; <span class="keyword">select</span> <span class="built_in">e</span>.ename,<span class="built_in">e</span>.deptno,<span class="built_in">e</span>.sal,ds.mysal <span class="keyword">from</span> emp <span class="built_in">e</span>,(<span class="keyword">select</span> deptno, <span class="built_in">avg</span>(sal) mysal <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> deptno) <span class="keyword">as</span> ds <span class="keyword">where</span> <span class="built_in">e</span>.deptno = ds.deptno <span class="keyword">and</span> <span class="built_in">e</span>.sal &gt; ds.mysal;</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">e</span>.ename,<span class="built_in">e</span>.deptno,<span class="built_in">e</span>.sal,ds.mysal <span class="keyword">from</span> emp <span class="built_in">e</span>,(<span class="keyword">select</span> deptno, <span class="built_in">avg</span>(sal) mysal <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> deptno) <span class="keyword">as</span> ds <span class="keyword">where</span> <span class="built_in">e</span>.deptno = ds.deptno <span class="keyword">and</span> <span class="built_in">e</span>.sal &gt; ds.mysal</span><br><span class="line">                                                                                                           *</span><br><span class="line">第 <span class="number">1</span> 行出现错误:</span><br><span class="line">ORA<span class="number">-00933</span>: SQL 命令未正确结束</span><br></pre></td></tr></table></figure>

<p>在 ds 前不能加 as ,否则会报错 (给表取别名的时候，不能加 as ;但是给列取别名，是可以加 as 的)。</p>
<h4 id="Oracle-的分页"><a href="#Oracle-的分页" class="headerlink" title="Oracle 的分页"></a>Oracle 的分页</h4><p>Oracle 的分页一共有三种方式:</p>
<ol>
<li><p>根据 rowid 来分（效率最好）</p>
</li>
<li><p>按分析函数来分（效率次之）</p>
</li>
<li><p>按 rownum 来分（效率最差）</p>
</li>
</ol>
<p>下面最主要介绍第三种：按 rownum 来分</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">SQL&gt; select * <span class="keyword">from</span> (select a.*,rownum rn <span class="keyword">from</span> (select * <span class="keyword">from</span> emp) a where rownum &lt;= <span class="number">15</span>) where rn &gt; <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">     EMPNO ENAME                JOB                       MGR HIREDATE          SAL       COMM     DEPTNO         RN</span><br><span class="line">---------- -------------------- ------------------ ---------- ---------- ---------- ---------- ---------- ----------</span><br><span class="line">      <span class="number">7876</span> ADAMS                CLERK                    <span class="number">7788</span> <span class="number">1987</span><span class="number">-05</span><span class="number">-23</span>       <span class="number">1100</span>                    <span class="number">20</span>         <span class="number">11</span></span><br><span class="line">      <span class="number">7900</span> JAMES                CLERK                    <span class="number">7698</span> <span class="number">1981</span><span class="number">-12</span><span class="number">-03</span>        <span class="number">950</span>                    <span class="number">30</span>         <span class="number">12</span></span><br><span class="line">      <span class="number">7902</span> FORD                 ANALYST                  <span class="number">7566</span> <span class="number">1981</span><span class="number">-12</span><span class="number">-03</span>       <span class="number">3000</span>                    <span class="number">20</span>         <span class="number">13</span></span><br><span class="line">      <span class="number">7934</span> MILLER               CLERK                    <span class="number">7782</span> <span class="number">1982</span><span class="number">-01</span><span class="number">-23</span>       <span class="number">1300</span>                    <span class="number">10</span>         <span class="number">14</span></span><br><span class="line"></span><br><span class="line">已用时间:  <span class="number">00</span>: <span class="number">00</span>: <span class="number">00.02</span></span><br></pre></td></tr></table></figure>

<p>这条语句是用来将 11-15 条记录提取出来,拆分这条语句:</p>
<p>1.将所有想要的结果查询出来</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">SQL&gt; select * <span class="keyword">from</span> emp;</span><br><span class="line"></span><br><span class="line">     EMPNO ENAME                JOB                       MGR HIREDATE          SAL       COMM     DEPTNO</span><br><span class="line">---------- -------------------- ------------------ ---------- ---------- ---------- ---------- ----------</span><br><span class="line">      <span class="number">7369</span> SMITH                CLERK                    <span class="number">7902</span> <span class="number">1980</span><span class="number">-12</span><span class="number">-17</span>        <span class="number">800</span>                    <span class="number">20</span></span><br><span class="line">      <span class="number">7499</span> ALLEN                SALESMAN                 <span class="number">7698</span> <span class="number">1981</span><span class="number">-02</span><span class="number">-20</span>       <span class="number">1600</span>        <span class="number">300</span>         <span class="number">30</span></span><br><span class="line">      <span class="number">7521</span> WARD                 SALESMAN                 <span class="number">7698</span> <span class="number">1981</span><span class="number">-02</span><span class="number">-22</span>       <span class="number">1250</span>        <span class="number">500</span>         <span class="number">30</span></span><br><span class="line">      <span class="number">7566</span> JONES                MANAGER                  <span class="number">7839</span> <span class="number">1981</span><span class="number">-04</span><span class="number">-02</span>       <span class="number">2975</span>                    <span class="number">20</span></span><br><span class="line">      <span class="number">7654</span> MARTIN               SALESMAN                 <span class="number">7698</span> <span class="number">1981</span><span class="number">-09</span><span class="number">-28</span>       <span class="number">1250</span>       <span class="number">1400</span>         <span class="number">30</span></span><br><span class="line">      <span class="number">7698</span> BLAKE                MANAGER                  <span class="number">7839</span> <span class="number">1981</span><span class="number">-05</span><span class="number">-01</span>       <span class="number">2850</span>                    <span class="number">30</span></span><br><span class="line">      <span class="number">7782</span> CLARK                MANAGER                  <span class="number">7839</span> <span class="number">1981</span><span class="number">-06</span><span class="number">-09</span>       <span class="number">2450</span>                    <span class="number">10</span></span><br><span class="line">      <span class="number">7788</span> SCOTT                ANALYST                  <span class="number">7566</span> <span class="number">1987</span><span class="number">-04</span><span class="number">-19</span>       <span class="number">3000</span>                    <span class="number">20</span></span><br><span class="line">      <span class="number">7839</span> KING                 PRESIDENT                     <span class="number">1981</span><span class="number">-11</span><span class="number">-17</span>       <span class="number">5000</span>                    <span class="number">10</span></span><br><span class="line">      <span class="number">7844</span> TURNER               SALESMAN                 <span class="number">7698</span> <span class="number">1981</span><span class="number">-09</span><span class="number">-08</span>       <span class="number">1500</span>          <span class="number">0</span>         <span class="number">30</span></span><br><span class="line">      <span class="number">7876</span> ADAMS                CLERK                    <span class="number">7788</span> <span class="number">1987</span><span class="number">-05</span><span class="number">-23</span>       <span class="number">1100</span>                    <span class="number">20</span></span><br><span class="line"></span><br><span class="line">     EMPNO ENAME                JOB                       MGR HIREDATE          SAL       COMM     DEPTNO</span><br><span class="line">---------- -------------------- ------------------ ---------- ---------- ---------- ---------- ----------</span><br><span class="line">      <span class="number">7900</span> JAMES                CLERK                    <span class="number">7698</span> <span class="number">1981</span><span class="number">-12</span><span class="number">-03</span>        <span class="number">950</span>                    <span class="number">30</span></span><br><span class="line">      <span class="number">7902</span> FORD                 ANALYST                  <span class="number">7566</span> <span class="number">1981</span><span class="number">-12</span><span class="number">-03</span>       <span class="number">3000</span>                    <span class="number">20</span></span><br><span class="line">      <span class="number">7934</span> MILLER               CLERK                    <span class="number">7782</span> <span class="number">1982</span><span class="number">-01</span><span class="number">-23</span>       <span class="number">1300</span>                    <span class="number">10</span></span><br><span class="line"></span><br><span class="line">已选择<span class="number">14</span>行。</span><br><span class="line"></span><br><span class="line">已用时间:  <span class="number">00</span>: <span class="number">00</span>: <span class="number">00.08</span></span><br></pre></td></tr></table></figure>

<p>2.将上一步的结果作为一个视图,给每一条记录加上一个 rn 编号并将前 15 条记录查询出来;其中 rownum 为 Oracle 的关键字,且在第一次在查询字段中使用 rownum 时,如果有条件限制在 where 子句中也要用 rownum,不可以用 rn。</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">SQL&gt; select a.*,rownum rn <span class="keyword">from</span> (select * <span class="keyword">from</span> emp) a where rownum &lt;= <span class="number">15</span>;</span><br><span class="line"></span><br><span class="line">     EMPNO ENAME                JOB                       MGR HIREDATE          SAL       COMM     DEPTNO         RN</span><br><span class="line">---------- -------------------- ------------------ ---------- ---------- ---------- ---------- ---------- ----------</span><br><span class="line">      <span class="number">7369</span> SMITH                CLERK                    <span class="number">7902</span> <span class="number">1980</span><span class="number">-12</span><span class="number">-17</span>        <span class="number">800</span>                    <span class="number">20</span>          <span class="number">1</span></span><br><span class="line">      <span class="number">7499</span> ALLEN                SALESMAN                 <span class="number">7698</span> <span class="number">1981</span><span class="number">-02</span><span class="number">-20</span>       <span class="number">1600</span>        <span class="number">300</span>         <span class="number">30</span>          <span class="number">2</span></span><br><span class="line">      <span class="number">7521</span> WARD                 SALESMAN                 <span class="number">7698</span> <span class="number">1981</span><span class="number">-02</span><span class="number">-22</span>       <span class="number">1250</span>        <span class="number">500</span>         <span class="number">30</span>          <span class="number">3</span></span><br><span class="line">      <span class="number">7566</span> JONES                MANAGER                  <span class="number">7839</span> <span class="number">1981</span><span class="number">-04</span><span class="number">-02</span>       <span class="number">2975</span>                    <span class="number">20</span>          <span class="number">4</span></span><br><span class="line">      <span class="number">7654</span> MARTIN               SALESMAN                 <span class="number">7698</span> <span class="number">1981</span><span class="number">-09</span><span class="number">-28</span>       <span class="number">1250</span>       <span class="number">1400</span>         <span class="number">30</span>          <span class="number">5</span></span><br><span class="line">      <span class="number">7698</span> BLAKE                MANAGER                  <span class="number">7839</span> <span class="number">1981</span><span class="number">-05</span><span class="number">-01</span>       <span class="number">2850</span>                    <span class="number">30</span>          <span class="number">6</span></span><br><span class="line">      <span class="number">7782</span> CLARK                MANAGER                  <span class="number">7839</span> <span class="number">1981</span><span class="number">-06</span><span class="number">-09</span>       <span class="number">2450</span>                    <span class="number">10</span>          <span class="number">7</span></span><br><span class="line">      <span class="number">7788</span> SCOTT                ANALYST                  <span class="number">7566</span> <span class="number">1987</span><span class="number">-04</span><span class="number">-19</span>       <span class="number">3000</span>                    <span class="number">20</span>          <span class="number">8</span></span><br><span class="line">      <span class="number">7839</span> KING                 PRESIDENT                     <span class="number">1981</span><span class="number">-11</span><span class="number">-17</span>       <span class="number">5000</span>                    <span class="number">10</span>          <span class="number">9</span></span><br><span class="line">      <span class="number">7844</span> TURNER               SALESMAN                 <span class="number">7698</span> <span class="number">1981</span><span class="number">-09</span><span class="number">-08</span>       <span class="number">1500</span>          <span class="number">0</span>         <span class="number">30</span>         <span class="number">10</span></span><br><span class="line">      <span class="number">7876</span> ADAMS                CLERK                    <span class="number">7788</span> <span class="number">1987</span><span class="number">-05</span><span class="number">-23</span>       <span class="number">1100</span>                    <span class="number">20</span>         <span class="number">11</span></span><br><span class="line"></span><br><span class="line">     EMPNO ENAME                JOB                       MGR HIREDATE          SAL       COMM     DEPTNO         RN</span><br><span class="line">---------- -------------------- ------------------ ---------- ---------- ---------- ---------- ---------- ----------</span><br><span class="line">      <span class="number">7900</span> JAMES                CLERK                    <span class="number">7698</span> <span class="number">1981</span><span class="number">-12</span><span class="number">-03</span>        <span class="number">950</span>                    <span class="number">30</span>         <span class="number">12</span></span><br><span class="line">      <span class="number">7902</span> FORD                 ANALYST                  <span class="number">7566</span> <span class="number">1981</span><span class="number">-12</span><span class="number">-03</span>       <span class="number">3000</span>                    <span class="number">20</span>         <span class="number">13</span></span><br><span class="line">      <span class="number">7934</span> MILLER               CLERK                    <span class="number">7782</span> <span class="number">1982</span><span class="number">-01</span><span class="number">-23</span>       <span class="number">1300</span>                    <span class="number">10</span>         <span class="number">14</span></span><br><span class="line"></span><br><span class="line">已选择<span class="number">14</span>行。</span><br><span class="line"></span><br><span class="line">已用时间:  <span class="number">00</span>: <span class="number">00</span>: <span class="number">00.03</span></span><br></pre></td></tr></table></figure>

<p>3.将前 15 条数据作为一个视图,提取出 11-15 条。</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">SQL&gt; select * <span class="keyword">from</span> (select a.*,rownum rn <span class="keyword">from</span> (select * <span class="keyword">from</span> emp) a where rownum &lt;=<span class="number">15</span>) where rn &gt; <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">     EMPNO ENAME                JOB                       MGR HIREDATE          SAL       COMM     DEPTNO         RN</span><br><span class="line">---------- -------------------- ------------------ ---------- ---------- ---------- ---------- ---------- ----------</span><br><span class="line">      <span class="number">7876</span> ADAMS                CLERK                    <span class="number">7788</span> <span class="number">1987</span><span class="number">-05</span><span class="number">-23</span>       <span class="number">1100</span>                    <span class="number">20</span>         <span class="number">11</span></span><br><span class="line">      <span class="number">7900</span> JAMES                CLERK                    <span class="number">7698</span> <span class="number">1981</span><span class="number">-12</span><span class="number">-03</span>        <span class="number">950</span>                    <span class="number">30</span>         <span class="number">12</span></span><br><span class="line">      <span class="number">7902</span> FORD                 ANALYST                  <span class="number">7566</span> <span class="number">1981</span><span class="number">-12</span><span class="number">-03</span>       <span class="number">3000</span>                    <span class="number">20</span>         <span class="number">13</span></span><br><span class="line">      <span class="number">7934</span> MILLER               CLERK                    <span class="number">7782</span> <span class="number">1982</span><span class="number">-01</span><span class="number">-23</span>       <span class="number">1300</span>                    <span class="number">10</span>         <span class="number">14</span></span><br><span class="line"></span><br><span class="line">已用时间:  <span class="number">00</span>: <span class="number">00</span>: <span class="number">00.01</span></span><br></pre></td></tr></table></figure>

<p>在 Java 程序中只需要替换 15 和 10 这两个数字就可以实现分页了。</p>
<h4 id="用查询结果创建新表"><a href="#用查询结果创建新表" class="headerlink" title="用查询结果创建新表"></a>用查询结果创建新表</h4><p>这个命令是一种快捷的建表方法</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">SQL&gt; select * <span class="keyword">from</span> (select a.*,rownum rn <span class="keyword">from</span> (select * <span class="keyword">from</span> emp) a where rownum &lt;=<span class="number">15</span>) where rn &gt; <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">     EMPNO ENAME                JOB                       MGR HIREDATE          SAL       COMM     DEPTNO         RN</span><br><span class="line">---------- -------------------- ------------------ ---------- ---------- ---------- ---------- ---------- ----------</span><br><span class="line">      <span class="number">7876</span> ADAMS                CLERK                    <span class="number">7788</span> <span class="number">1987</span><span class="number">-05</span><span class="number">-23</span>       <span class="number">1100</span>                    <span class="number">20</span>         <span class="number">11</span></span><br><span class="line">      <span class="number">7900</span> JAMES                CLERK                    <span class="number">7698</span> <span class="number">1981</span><span class="number">-12</span><span class="number">-03</span>        <span class="number">950</span>                    <span class="number">30</span>         <span class="number">12</span></span><br><span class="line">      <span class="number">7902</span> FORD                 ANALYST                  <span class="number">7566</span> <span class="number">1981</span><span class="number">-12</span><span class="number">-03</span>       <span class="number">3000</span>                    <span class="number">20</span>         <span class="number">13</span></span><br><span class="line">      <span class="number">7934</span> MILLER               CLERK                    <span class="number">7782</span> <span class="number">1982</span><span class="number">-01</span><span class="number">-23</span>       <span class="number">1300</span>                    <span class="number">10</span>         <span class="number">14</span></span><br><span class="line"></span><br><span class="line">已用时间:  <span class="number">00</span>: <span class="number">00</span>: <span class="number">00.01</span></span><br><span class="line">SQL&gt; create table mytable(id,name,sal,job,deptno) as select empno,ename,sal,job,deptno <span class="keyword">from</span> emp;</span><br><span class="line"></span><br><span class="line">表已创建。</span><br><span class="line"></span><br><span class="line">已用时间:  <span class="number">00</span>: <span class="number">00</span>: <span class="number">00.64</span></span><br></pre></td></tr></table></figure>

<p>创建好之后,我们可以查看一下表结构</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">SQL&gt; desc mytable;</span><br><span class="line"> 名称                                                  是否为空? 类型</span><br><span class="line"> ----------------------------------------------------- -------- ------------------------------------</span><br><span class="line"> ID                                                             NUMBER(<span class="number">4</span>)</span><br><span class="line"> NAME                                                           VARCHAR2(<span class="number">10</span>)</span><br><span class="line"> SAL                                                            NUMBER(<span class="number">7</span>,<span class="number">2</span>)</span><br><span class="line"> JOB                                                            VARCHAR2(<span class="number">9</span>)</span><br><span class="line"> DEPTNO                                                         NUMBER(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">SQL&gt; desc emp;</span><br><span class="line"> 名称                                                  是否为空? 类型</span><br><span class="line"> ----------------------------------------------------- -------- ------------------------------------</span><br><span class="line"> EMPNO                                                 NOT NULL NUMBER(<span class="number">4</span>)</span><br><span class="line"> ENAME                                                          VARCHAR2(<span class="number">10</span>)</span><br><span class="line"> JOB                                                            VARCHAR2(<span class="number">9</span>)</span><br><span class="line"> MGR                                                            NUMBER(<span class="number">4</span>)</span><br><span class="line"> HIREDATE                                                       DATE</span><br><span class="line"> SAL                                                            NUMBER(<span class="number">7</span>,<span class="number">2</span>)</span><br><span class="line"> COMM                                                           NUMBER(<span class="number">7</span>,<span class="number">2</span>)</span><br><span class="line"> DEPTNO                                                         NUMBER(<span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<p>可以看出，新建表的字段类型和查询表的一样。</p>
<h4 id="合并查询"><a href="#合并查询" class="headerlink" title="合并查询"></a>合并查询</h4><p>有时在实际应用中，为了合并多个 select 语句的结果，可以使用集合操作符号 union, union all, intersect (交集), minus (差集)</p>
<p>多用于数据量比较大的数据局库，运行速度快。</p>
<h5 id="union"><a href="#union" class="headerlink" title="union"></a>union</h5><p>该操作符用于取得两个结果集的并集。当使用该操作符时，会自动去掉结果集中重复行。</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">SQL&gt; select ename,sal,job <span class="keyword">from</span> emp where sal &gt; <span class="number">2500</span> union select ename,sal,job <span class="keyword">from</span> emp where job = <span class="string">'MANAGER'</span>;</span><br><span class="line"></span><br><span class="line">ENAME                       SAL JOB</span><br><span class="line">-------------------- ---------- ------------------</span><br><span class="line">BLAKE                      <span class="number">2850</span> MANAGER</span><br><span class="line">CLARK                      <span class="number">2450</span> MANAGER</span><br><span class="line">FORD                       <span class="number">3000</span> ANALYST</span><br><span class="line">JONES                      <span class="number">2975</span> MANAGER</span><br><span class="line">KING                       <span class="number">5000</span> PRESIDENT</span><br><span class="line">SCOTT                      <span class="number">3000</span> ANALYST</span><br><span class="line"></span><br><span class="line">已选择<span class="number">6</span>行。</span><br><span class="line"></span><br><span class="line">已用时间:  <span class="number">00</span>: <span class="number">00</span>: <span class="number">00.00</span></span><br></pre></td></tr></table></figure>

<h5 id="union-all"><a href="#union-all" class="headerlink" title="union all"></a>union all</h5><p>该操作符与 union 相似，但是它不会取消重复行，而且不会排序。</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">SQL&gt; select ename,sal,job <span class="keyword">from</span> emp where sal &gt; <span class="number">2500</span> union all select ename,sal,job <span class="keyword">from</span> emp where job = <span class="string">'MANAGER'</span>;</span><br><span class="line"></span><br><span class="line">ENAME                       SAL JOB</span><br><span class="line">-------------------- ---------- ------------------</span><br><span class="line">JONES                      <span class="number">2975</span> MANAGER</span><br><span class="line">BLAKE                      <span class="number">2850</span> MANAGER</span><br><span class="line">SCOTT                      <span class="number">3000</span> ANALYST</span><br><span class="line">KING                       <span class="number">5000</span> PRESIDENT</span><br><span class="line">FORD                       <span class="number">3000</span> ANALYST</span><br><span class="line">JONES                      <span class="number">2975</span> MANAGER</span><br><span class="line">BLAKE                      <span class="number">2850</span> MANAGER</span><br><span class="line">CLARK                      <span class="number">2450</span> MANAGER</span><br><span class="line"></span><br><span class="line">已选择<span class="number">8</span>行。</span><br><span class="line"></span><br><span class="line">已用时间:  <span class="number">00</span>: <span class="number">00</span>: <span class="number">00.01</span></span><br></pre></td></tr></table></figure>

<h5 id="intersect"><a href="#intersect" class="headerlink" title="intersect"></a>intersect</h5><p>使用该操作符用于取得两个结果集的交集。</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SQL</span>&gt; <span class="keyword">select</span> ename,sal,job <span class="keyword">from</span> emp <span class="keyword">where</span> sal &gt; <span class="number">2500</span> <span class="keyword">intersect</span> <span class="keyword">select</span> ename,sal,job <span class="keyword">from</span> emp <span class="keyword">where</span> job = <span class="string">'MANAGER'</span>;</span><br><span class="line"></span><br><span class="line">ENAME                       SAL JOB</span><br><span class="line"><span class="comment">-------------------- ---------- ------------------</span></span><br><span class="line">BLAKE                      <span class="number">2850</span> MANAGER</span><br><span class="line">JONES                      <span class="number">2975</span> MANAGER</span><br><span class="line"></span><br><span class="line">已用时间:  <span class="number">00</span>: <span class="number">00</span>: <span class="number">00.00</span></span><br></pre></td></tr></table></figure>

<h5 id="minus"><a href="#minus" class="headerlink" title="minus"></a>minus</h5><p>使用改操作符用于取得两个结果集的差集， 他只会显示存在第一个集合中， 而不存在第二个集合中的数据。</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">SQL&gt; select ename,sal,job <span class="keyword">from</span> emp where sal &gt; <span class="number">2500</span> minus select ename,sal,job <span class="keyword">from</span> emp where job = <span class="string">'MANAGER'</span>;</span><br><span class="line"></span><br><span class="line">ENAME                       SAL JOB</span><br><span class="line">-------------------- ---------- ------------------</span><br><span class="line">FORD                       <span class="number">3000</span> ANALYST</span><br><span class="line">KING                       <span class="number">5000</span> PRESIDENT</span><br><span class="line">SCOTT                      <span class="number">3000</span> ANALYST</span><br><span class="line"></span><br><span class="line">已用时间:  <span class="number">00</span>: <span class="number">00</span>: <span class="number">00.00</span></span><br></pre></td></tr></table></figure>

<p>集合操作要比 and， or 效率高很多。</p>
<h4 id="操作数据"><a href="#操作数据" class="headerlink" title="操作数据"></a>操作数据</h4><p>使用特定的格式插入日期值。</p>
<h5 id="使用to-date函数"><a href="#使用to-date函数" class="headerlink" title="使用to_date函数"></a>使用to_date函数</h5><p>插入带有日期的表,并按照年月日格式插入</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">SQL&gt; insert <span class="built_in">int</span>o emp values(<span class="number">9999</span>,<span class="string">'huang'</span>,<span class="string">'PERSIDENT'</span>,<span class="literal">null</span>,to_date(<span class="string">'1997-01-01'</span>,<span class="string">'YYYY-MM-DD'</span>),<span class="number">800</span>,<span class="number">1000</span>,<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">已创建 <span class="number">1</span> 行。</span><br><span class="line"></span><br><span class="line">已用时间:  <span class="number">00</span>: <span class="number">00</span>: <span class="number">00.06</span></span><br></pre></td></tr></table></figure>

<p>使用 to_date 函数可以插入任意形式的日期</p>
<h5 id="使用子查询插入数据"><a href="#使用子查询插入数据" class="headerlink" title="使用子查询插入数据"></a>使用子查询插入数据</h5><p>一条 insert 语句可以插入大量的数据，当处理行迁移或者装载外部表的数据到数据库时, 可以使用子查询插入数据。</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">SQL&gt; insert <span class="built_in">int</span>o mytable(id,name,deptno) select empno,ename,deptno <span class="keyword">from</span> emp where deptno = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">已创建<span class="number">4</span>行。</span><br><span class="line"></span><br><span class="line">已用时间:  <span class="number">00</span>: <span class="number">00</span>: <span class="number">00.02</span></span><br><span class="line">SQL&gt; select * <span class="keyword">from</span> mytable;</span><br><span class="line"></span><br><span class="line">        ID NAME                        SAL JOB                    DEPTNO</span><br><span class="line">---------- -------------------- ---------- ------------------ ----------</span><br><span class="line">      <span class="number">7369</span> SMITH                       <span class="number">800</span> CLERK                      <span class="number">20</span></span><br><span class="line">      <span class="number">7499</span> ALLEN                      <span class="number">1600</span> SALESMAN                   <span class="number">30</span></span><br><span class="line">      <span class="number">7521</span> WARD                       <span class="number">1250</span> SALESMAN                   <span class="number">30</span></span><br><span class="line">      <span class="number">7566</span> JONES                      <span class="number">2975</span> MANAGER                    <span class="number">20</span></span><br><span class="line">      <span class="number">7654</span> MARTIN                     <span class="number">1250</span> SALESMAN                   <span class="number">30</span></span><br><span class="line">      <span class="number">7698</span> BLAKE                      <span class="number">2850</span> MANAGER                    <span class="number">30</span></span><br><span class="line">      <span class="number">7782</span> CLARK                      <span class="number">2450</span> MANAGER                    <span class="number">10</span></span><br><span class="line">      <span class="number">7788</span> SCOTT                      <span class="number">3000</span> ANALYST                    <span class="number">20</span></span><br><span class="line">      <span class="number">7839</span> KING                       <span class="number">5000</span> PRESIDENT                  <span class="number">10</span></span><br><span class="line">      <span class="number">7844</span> TURNER                     <span class="number">1500</span> SALESMAN                   <span class="number">30</span></span><br><span class="line">      <span class="number">7876</span> ADAMS                      <span class="number">1100</span> CLERK                      <span class="number">20</span></span><br><span class="line"></span><br><span class="line">        ID NAME                        SAL JOB                    DEPTNO</span><br><span class="line">---------- -------------------- ---------- ------------------ ----------</span><br><span class="line">      <span class="number">7900</span> JAMES                       <span class="number">950</span> CLERK                      <span class="number">30</span></span><br><span class="line">      <span class="number">7902</span> FORD                       <span class="number">3000</span> ANALYST                    <span class="number">20</span></span><br><span class="line">      <span class="number">7934</span> MILLER                     <span class="number">1300</span> CLERK                      <span class="number">10</span></span><br><span class="line">      <span class="number">7782</span> CLARK                                                      <span class="number">10</span></span><br><span class="line">      <span class="number">7839</span> KING                                                       <span class="number">10</span></span><br><span class="line">      <span class="number">7934</span> MILLER                                                     <span class="number">10</span></span><br><span class="line">      <span class="number">9999</span> huang                                                      <span class="number">10</span></span><br><span class="line"></span><br><span class="line">已选择<span class="number">18</span>行。</span><br><span class="line"></span><br><span class="line">已用时间:  <span class="number">00</span>: <span class="number">00</span>: <span class="number">00.02</span></span><br></pre></td></tr></table></figure>

<p>后面 4 行为新插入的数据。</p>
<h5 id="使用子查询更新数据"><a href="#使用子查询更新数据" class="headerlink" title="使用子查询更新数据"></a>使用子查询更新数据</h5><p>希望员工 huang 的岗位、工资与 SCOOT 一样</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">SQL&gt; update mytable <span class="keyword">set</span>(job,sal) = (select job,sal <span class="keyword">from</span> mytable where name=<span class="string">'SCOTT'</span>) where name = <span class="string">'huang'</span>;</span><br><span class="line"></span><br><span class="line">已更新 <span class="number">1</span> 行。</span><br><span class="line"></span><br><span class="line">已用时间:  <span class="number">00</span>: <span class="number">00</span>: <span class="number">00.00</span></span><br><span class="line">SQL&gt; select * <span class="keyword">from</span> mytable;</span><br><span class="line"></span><br><span class="line">        ID NAME                        SAL JOB                    DEPTNO</span><br><span class="line">---------- -------------------- ---------- ------------------ ----------</span><br><span class="line">      <span class="number">7369</span> SMITH                       <span class="number">800</span> CLERK                      <span class="number">20</span></span><br><span class="line">      <span class="number">7499</span> ALLEN                      <span class="number">1600</span> SALESMAN                   <span class="number">30</span></span><br><span class="line">      <span class="number">7521</span> WARD                       <span class="number">1250</span> SALESMAN                   <span class="number">30</span></span><br><span class="line">      <span class="number">7566</span> JONES                      <span class="number">2975</span> MANAGER                    <span class="number">20</span></span><br><span class="line">      <span class="number">7654</span> MARTIN                     <span class="number">1250</span> SALESMAN                   <span class="number">30</span></span><br><span class="line">      <span class="number">7698</span> BLAKE                      <span class="number">2850</span> MANAGER                    <span class="number">30</span></span><br><span class="line">      <span class="number">7782</span> CLARK                      <span class="number">2450</span> MANAGER                    <span class="number">10</span></span><br><span class="line">      <span class="number">7788</span> SCOTT                      <span class="number">3000</span> ANALYST                    <span class="number">20</span></span><br><span class="line">      <span class="number">7839</span> KING                       <span class="number">5000</span> PRESIDENT                  <span class="number">10</span></span><br><span class="line">      <span class="number">7844</span> TURNER                     <span class="number">1500</span> SALESMAN                   <span class="number">30</span></span><br><span class="line">      <span class="number">7876</span> ADAMS                      <span class="number">1100</span> CLERK                      <span class="number">20</span></span><br><span class="line"></span><br><span class="line">        ID NAME                        SAL JOB                    DEPTNO</span><br><span class="line">---------- -------------------- ---------- ------------------ ----------</span><br><span class="line">      <span class="number">7900</span> JAMES                       <span class="number">950</span> CLERK                      <span class="number">30</span></span><br><span class="line">      <span class="number">7902</span> FORD                       <span class="number">3000</span> ANALYST                    <span class="number">20</span></span><br><span class="line">      <span class="number">7934</span> MILLER                     <span class="number">1300</span> CLERK                      <span class="number">10</span></span><br><span class="line">      <span class="number">7782</span> CLARK                                                      <span class="number">10</span></span><br><span class="line">      <span class="number">7839</span> KING                                                       <span class="number">10</span></span><br><span class="line">      <span class="number">7934</span> MILLER                                                     <span class="number">10</span></span><br><span class="line">      <span class="number">9999</span> huang                      <span class="number">3000</span> ANALYST                    <span class="number">10</span></span><br><span class="line"></span><br><span class="line">已选择<span class="number">18</span>行。</span><br><span class="line"></span><br><span class="line">已用时间:  <span class="number">00</span>: <span class="number">00</span>: <span class="number">00.02</span></span><br></pre></td></tr></table></figure>

<p>name 的值要用大写, Oracle 对值的大小写是敏感的。</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>分布式架构——Redis进阶</title>
    <url>/2019/09/10/%E5%88%86%E5%B8%83%E5%BC%8F%E6%9E%B6%E6%9E%84%E2%80%94%E2%80%94Redis%E8%BF%9B%E9%98%B6/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Redis 基本数据类型有五种：string（字符串），hash（哈希），list（链表），set（集合），zsort（有序集合）。</p>
<a id="more"></a>

<h2 id="字符串类型-string"><a href="#字符串类型-string" class="headerlink" title="字符串类型 string"></a>字符串类型 string</h2><p>字符串类型是 Redis 中最基本的数据类型，它能存储任何形式的字符串，包括二进制数据，序列化后的数据， JSON 化的对象甚至是一张图片（描述大段的文本信息）。最大 512M。</p>
<table>
<thead>
<tr>
<th align="center">key</th>
<th align="center">value</th>
</tr>
</thead>
<tbody><tr>
<td align="center">username</td>
<td align="center">张三和李四</td>
</tr>
</tbody></table>
<h3 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h3><h4 id="set"><a href="#set" class="headerlink" title="set"></a>set</h4><p>将字符串值 value 设置到 key 中</p>
<p>语法： set key value</p>
<p>查看已经插入的 key</p>
<p>向已经存在的 key 设置新的 value，会覆盖原来的值</p>
<h4 id="get"><a href="#get" class="headerlink" title="get"></a>get</h4><p>获取 key 中设置的字符串值。</p>
<p>语法： get key</p>
<p>例如：获取 username 这个 key 对应的 value</p>
<h4 id="incr"><a href="#incr" class="headerlink" title="incr"></a>incr</h4><p>将 key 中储存的数字值加 1，如果 key 不存在，则 key 的值先被初始化为 0 再执行 incr 操作（只能对数字类型的数据操作）。</p>
<p>语法： incr key</p>
<h4 id="decr"><a href="#decr" class="headerlink" title="decr"></a>decr</h4><p>将 key 中储存的数字值减1，如果 key 不存在，则么 key 的值先被初始化为 0 再执行 decr 操作（只能对数字类型的数据操作）。</p>
<p>语法： decr key</p>
<h4 id="append"><a href="#append" class="headerlink" title="append"></a>append</h4><p>语法： append key value</p>
<p>如果 key 存在， 则将 value 追加到 key 原来旧值的末尾，如果 key 不存在， 则将 key 设置值为 value。</p>
<p>返回值：追加字符串之后的总长度。</p>
<h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><h4 id="strlen"><a href="#strlen" class="headerlink" title="strlen"></a>strlen</h4><p>语法： strlen key</p>
<p>说明： 返回 key 所储存的字符串值的长度。</p>
<p>返回值：  </p>
<ol>
<li>如果key存在，返回字符串值的长度</li>
<li>key不存在，返回 0</li>
</ol>
<h4 id="getrange"><a href="#getrange" class="headerlink" title="getrange"></a>getrange</h4><p>语法： getrange key start end</p>
<p>作用： 获取 key 中字符串值从 start 开始 到 end 结束 的子字符串,包括 start 和 end, 负数表示从字符串的末尾开始， -1 表示最后一个字符。</p>
<p>返回值： 截取的子字符串</p>
<p>使用的字符串 key: school, value: guangxian</p>
<h4 id="setrange"><a href="#setrange" class="headerlink" title="setrange"></a>setrange</h4><p>语法： setrange key offset value</p>
<p>说明： 用 value 覆盖（替换） key 的存储的值从 offset 开始,不存在的 key 做空白字符串。</p>
<p>返回值： 修改后的字符串的长度</p>
<h4 id="mset"><a href="#mset" class="headerlink" title="mset"></a>mset</h4><p>语法： mset key value [key value…]</p>
<p>说明： 同时设置一个或多个 key-value 对。</p>
<p>返回值： OK</p>
<h4 id="mget"><a href="#mget" class="headerlink" title="mget"></a>mget</h4><p>语法： mget key [key …]</p>
<p>作用： 获取所有(一个或多个)给定 key 的值。</p>
<p>返回值： 包含所有 key 的列表</p>
<h2 id="哈希类型-hash"><a href="#哈希类型-hash" class="headerlink" title="哈希类型 hash"></a>哈希类型 hash</h2><p>Redis hash 是一个 string 类型的 field 和 value 的映射表， hash 特别适合用于存储对象（存对象， Redis 中所有的 key 都是文本类型）。</p>
<table>
<thead>
<tr>
<th align="center">key</th>
<th align="center">loginuser</th>
</tr>
</thead>
<tbody><tr>
<td align="center">filed</td>
<td align="center">value</td>
</tr>
<tr>
<td align="center">unname</td>
<td align="center">张三</td>
</tr>
<tr>
<td align="center">times</td>
<td align="center">5</td>
</tr>
<tr>
<td align="center">region</td>
<td align="center">北京</td>
</tr>
</tbody></table>
<h3 id="基本命令-1"><a href="#基本命令-1" class="headerlink" title="基本命令"></a>基本命令</h3><h4 id="hset"><a href="#hset" class="headerlink" title="hset"></a>hset</h4><p>语法： hset hash 表的 key field value</p>
<p>作用： 将哈希表 key 中的域 field 的值设为 value ， 如果 key 不存在， 则新建 hash 表，执行赋值，如果有 field ,则覆盖值。</p>
<p>返回值：  </p>
<ol>
<li>如果 field 是 hash 表中新 field，且设置值成功，返回 1  </li>
<li>如果 field 已经存在，旧值覆盖新值，返回 0</li>
</ol>
<h4 id="hget"><a href="#hget" class="headerlink" title="hget"></a>hget</h4><p>语法： hget key field</p>
<p>作用： 获取哈希表 key 中给定域 field 的值。</p>
<p>返回值： field 域的值，如果 key 不存在或者 field 不存在返回 nil</p>
<h4 id="hmset"><a href="#hmset" class="headerlink" title="hmset"></a>hmset</h4><p>语法： hmset key field value [field value…]</p>
<p>说明： 同时将多个 field-value (域-值)设置到哈希表 key 中，此命令会覆盖已经存在的 field，hash 表 key 不存在，创建空的 hash 表，执行 hmset。</p>
<p>返回值：设置成功返回 ok， 如果失败返回一个错误</p>
<h4 id="hmget"><a href="#hmget" class="headerlink" title="hmget"></a>hmget</h4><p>语法： hmget key field [field…]</p>
<p>作用:获取哈希表 key 中一个或多个给定域的值。</p>
<p>返回值：返回和 field 顺序对应的值，如果 field 不存在，返回 nil</p>
<h4 id="hgetall"><a href="#hgetall" class="headerlink" title="hgetall"></a>hgetall</h4><p>语法： hgetall key</p>
<p>作用： 获取哈希表 key 中所有的域和值。</p>
<p>返回值：以列表形式返回 hash 中域和域的值 ， key 不存在，返回空 hash</p>
<h4 id="hdel"><a href="#hdel" class="headerlink" title="hdel"></a>hdel</h4><p>语法： hdel key field [field…]</p>
<p>作用： 删除哈希表 key 中的一个或多个指定域 field，不存在 field 直接忽略。</p>
<p>返回值：成功删除的 field 的数量</p>
<h3 id="常用命令-1"><a href="#常用命令-1" class="headerlink" title="常用命令"></a>常用命令</h3><h4 id="hkeys"><a href="#hkeys" class="headerlink" title="hkeys"></a>hkeys</h4><p>语法： hkeys key</p>
<p>作用：查看哈希表 key 中的所有 field 域。</p>
<p>返回值：包含所有 field 的列表， key 不存在返回空列表</p>
<h4 id="hvals"><a href="#hvals" class="headerlink" title="hvals"></a>hvals</h4><p>语法： hvals key</p>
<p>作用： 返回哈希表 中所有域的值。</p>
<p>返回值：包含哈希表所有域值的列表， key 不存在返回空列表</p>
<h4 id="hexists"><a href="#hexists" class="headerlink" title="hexists"></a>hexists</h4><p>语法： hexists key field</p>
<p>作用： 查看哈希表 key 中，给定域 field 是否存在。</p>
<p>返回值： 如果 field 存在，返回 1， 其他返回 0</p>
<h2 id="列表-list"><a href="#列表-list" class="headerlink" title="列表 list"></a>列表 list</h2><p>Redis 列表是简单的字符串列表，按照插入顺序排序。可以添加一个元素导列表的头部（左边）或者尾部（右边）(保证数据出现的顺序，按照一定顺序出现)。</p>
<table>
<thead>
<tr>
<th align="center">key</th>
<th align="center">value</th>
</tr>
</thead>
<tbody><tr>
<td align="center">region</td>
<td align="center">北京 上海 天津</td>
</tr>
</tbody></table>
<h3 id="基本命令-2"><a href="#基本命令-2" class="headerlink" title="基本命令"></a>基本命令</h3><h4 id="lpush"><a href="#lpush" class="headerlink" title="lpush"></a>lpush</h4><p>语法： lpush key value [value…]</p>
<p>作用： 将一个或多个值 value 插入到列表 key 的表头（最左边），从左边开始加入值， 从左到右的顺序依次插入到表头。</p>
<p>返回值： 数字， 新列表的长度</p>
<h4 id="rpush"><a href="#rpush" class="headerlink" title="rpush"></a>rpush</h4><p>语法： rpush key value [value…]</p>
<p>作用： 将一个或多个值 value 插入到列表 key 的表尾（最右边）， 各个 value 值按从左到右的顺序依次插入到表尾。</p>
<p>返回值：数字，新列表的长度</p>
<h4 id="lrange"><a href="#lrange" class="headerlink" title="lrange"></a>lrange</h4><p>语法： lrange key start stop</p>
<p>作用： 获取列表 key 中指定区间内的元素， 0 表示列表的第一个元素，以 1 表示列表的第二个元素； start , stop 是列表的下标值，也可以负数的下标， -1 表示列表的最后一个元素， -2 表示列表的倒数第二个元素，以此类推。 start ， stop 超出列表的范围不会出现错误。</p>
<p>返回值： 指定区间的列表</p>
<h4 id="lindex"><a href="#lindex" class="headerlink" title="lindex"></a>lindex</h4><p>语法： lindex key index</p>
<p>作用： 获取列表 key 中下标为指定 index 的元素， 列表元素不删除， 只是查询。 0 表示列表的第一个元素，以 1 表示列表的第二个元素； start , stop 是列表的下标值，也可以负数的下标， -1 表示列表的最后一个元素， -2 表示列表的倒数第二个元素，以此类推。</p>
<p>返回值：指定下标的元素； index 不在列表范围，返回 nil</p>
<h4 id="llen"><a href="#llen" class="headerlink" title="llen"></a>llen</h4><p>语法： llen key</p>
<p>作用： 获取列表 key 的长度。</p>
<p>返回值： 数值，列表的长度； key 不存在返回 0</p>
<h3 id="常用命令-2"><a href="#常用命令-2" class="headerlink" title="常用命令"></a>常用命令</h3><h4 id="lrem"><a href="#lrem" class="headerlink" title="lrem"></a>lrem</h4><p>语法： lrem key count value</p>
<p>作用： 根据参数 count 的值，移除列表中与参数 value 相等的元素， count &gt;0 ， 从列表的左侧向右开始移除； count &lt; 0 从列表的尾部开始移除； count = 0 移除表中所有与 value 相等的值。</p>
<p>返回值： 数值，移除的元素个数</p>
<h4 id="lset"><a href="#lset" class="headerlink" title="lset"></a>lset</h4><p>语法： lset key index value</p>
<p>作用： 将列表 key 下标为 index 的元素的值设置为 value。</p>
<p>返回值：设置成功返回 ok ; key 不存在或者 index 超出范围返回错误信息</p>
<h4 id="linsert"><a href="#linsert" class="headerlink" title="linsert"></a>linsert</h4><p>语法： linsert key BEFORE|ALFTER pivot value</p>
<p>作用： 将值 value 插入到列表 key 当中位于值 pivot 之前或之后的位置。 key 不存在， pivot 不在列表中，不执行任何操作。</p>
<p>返回值： 命令执行成功，返回新列表的长度。没有找到 pivot 返回 -1， key 不存在返回 0</p>
<h2 id="集合类型-set"><a href="#集合类型-set" class="headerlink" title="集合类型 set"></a>集合类型 set</h2><p>Redis 的 set 是 string 类型的无序集合，集合成员是唯一的，即集合中不能出现重复的数据。</p>
<table>
<thead>
<tr>
<th align="center">key</th>
<th align="center">value</th>
</tr>
</thead>
<tbody><tr>
<td align="center">framework</td>
<td align="center">spring<br>  mybatis<br>  struts</td>
</tr>
</tbody></table>
<h3 id="基本命令-3"><a href="#基本命令-3" class="headerlink" title="基本命令"></a>基本命令</h3><h4 id="sadd"><a href="#sadd" class="headerlink" title="sadd"></a>sadd</h4><p>语法： sadd key member [member…]</p>
<p>作用： 将一个或多个 member 元素加入到集合 key 当中，已经存在于集合的 member 元素将被忽略， 不会再加入。</p>
<p>返回值：加入到集合的新元素的个数。不包括被忽略的元素</p>
<h4 id="smembers"><a href="#smembers" class="headerlink" title="smembers"></a>smembers</h4><p>语法： smembers key</p>
<p>作用： 获取集合 key 中的所有成员元素，不存在的 key 视为空集合。</p>
<p>返回值：集合中的所有成员</p>
<h4 id="sismember"><a href="#sismember" class="headerlink" title="sismember"></a>sismember</h4><p>语法： sismember key member</p>
<p>作用： 判断 member 元素是否是集合 key 的成员。</p>
<p>返回值： member 是集合成员返回 1，其他返回 0</p>
<h4 id="scard"><a href="#scard" class="headerlink" title="scard"></a>scard</h4><p>语法： scard key<br>作用： 获取集合里面的元素个数。</p>
<p>返回值：数字， key 的元素个数。 其他情况返回 0</p>
<h4 id="srem"><a href="#srem" class="headerlink" title="srem"></a>srem</h4><p>语法： srem key member [member…]</p>
<p>作用： 删除集合 key 中的一个或多个 member 元素，不存在的元素被忽略。</p>
<p>返回值：数字，成功删除的元素个数， 不包括被忽略的元素</p>
<h3 id="常用命令-3"><a href="#常用命令-3" class="headerlink" title="常用命令"></a>常用命令</h3><h4 id="srandmember"><a href="#srandmember" class="headerlink" title="srandmember"></a>srandmember</h4><p>语法： srandmember key [count]</p>
<p>作用：只提供 key，随机返回集合中一个元素，元素不删除，依然在集合中；提供了 count 时， count 正数, 返回包含 count 个数元素的集合， 集合元素各不相同。 count 是负数，返回一个 count 绝对值的长度的集合， 集合中元素可能会重复多次。</p>
<p>返回值：一个元素；多个元素的集合</p>
<h4 id="spop"><a href="#spop" class="headerlink" title="spop"></a>spop</h4><p>语法： spop key [count]</p>
<p>作用： 随机从集合中删除一个元素, count 是删除的元素个数。</p>
<p>返回值：被删除的元素， key 不存在或空集合返回 nil</p>
<h2 id="有序集合类型-zset-sorted-set"><a href="#有序集合类型-zset-sorted-set" class="headerlink" title="有序集合类型 zset (sorted set)"></a>有序集合类型 zset (sorted set)</h2><p>Redis 有序集合 zset 和集合 set 一样也是 string 类型元素的集合，且不允许重复的成员。不同的是 zset 的每个元素都会关联一个分数（分数可以重复）， Redis 通过分数来为集合中的成员进行从小到大的排序。</p>
<table>
<thead>
<tr>
<th align="center">key</th>
<th align="center">value score</th>
</tr>
</thead>
<tbody><tr>
<td align="center">salary</td>
<td align="center">张三 3500<br>  李四 5000<br>  王五 8000</td>
</tr>
</tbody></table>
<h3 id="基本命令-4"><a href="#基本命令-4" class="headerlink" title="基本命令"></a>基本命令</h3><h4 id="zadd"><a href="#zadd" class="headerlink" title="zadd"></a>zadd</h4><p>语法： zadd key score member [score member…]</p>
<p>作用： 将一个或多个 member 元素及其 score 值加入到有序集合 key 中，如果 member 存在集合中，则更新值； score 可以是整数或浮点数。</p>
<p>返回值： 数字， 新添加的元素个数</p>
<h4 id="zrange"><a href="#zrange" class="headerlink" title="zrange"></a>zrange</h4><p>语法： zrange key start stop [WITHSCORES]</p>
<p>作用：查询有序集合，指定区间的内的元素。 集合成员按 score 值从小到大来排序。 start，stop 都是从 0 开始。 0 是第一个元素， 1 是第二个元素，依次类推。 以 -1 表示最后一个成员， -2 表示倒数第二个成员。 WITHSCORES 选项让 score 和 value 一同返回。</p>
<p>返回值：自定区间的成员集合</p>
<h4 id="zrevrange"><a href="#zrevrange" class="headerlink" title="zrevrange"></a>zrevrange</h4><p>语法： zrevrange key start stop [WITHSCORES]</p>
<p>作用： 返回有序集 key 中，指定区间内的成员。其中成员的位置按 score 值递减(从大到小)来排列。 其它同 zrange 命令。</p>
<p>返回值：自定区间的成员集合</p>
<h4 id="zrem"><a href="#zrem" class="headerlink" title="zrem"></a>zrem</h4><p>语法： zrem key member [member…]</p>
<p>作用： 删除有序集合 key 中的一个或多个成员，不存在的成员被忽略。</p>
<p>返回值：被成功删除的成员数量，不包括被忽略的成员</p>
<h4 id="zcard"><a href="#zcard" class="headerlink" title="zcard"></a>zcard</h4><p>语法： zcard key</p>
<p>作用： 获取有序集 key 的元素成员的个数。</p>
<p>返回值： key 存在返回集合元素的个数， key 不存在，返回 0</p>
<h3 id="常用命令-4"><a href="#常用命令-4" class="headerlink" title="常用命令"></a>常用命令</h3><h4 id="zrangebyscore"><a href="#zrangebyscore" class="headerlink" title="zrangebyscore"></a>zrangebyscore</h4><p>语法： zrangebyscore key min max [WITHSCORES ] [LIMIT offset count]</p>
<p>作用： 获取有序集 key 中，所有 score 值介于 min 和 max 之间（包括 min 和 max） 的成员，有序成员是按递增（从小到大）排序。</p>
<ol>
<li>min ,max: 是包括在内，使用符号 “(”： 表示不包括。 min ， max 可以使用 -inf 。</li>
<li>+inf: 表示最小和最大。</li>
<li>limit: 用来限制返回结果的数量和区间。</li>
<li>withscores: 显示 score 和 value 。</li>
</ol>
<p>返回值： 指定区间的集合数据</p>
<h4 id="zrevrangebyscore"><a href="#zrevrangebyscore" class="headerlink" title="zrevrangebyscore"></a>zrevrangebyscore</h4><p>语法： zrevrangebyscore key max min [WITHSCORES ] [LIMIT offset count]</p>
<p>作用： 返回有序集 key 中， score 值介于 max 和 min 之间(默认包括等于 max 或 min )的所有的成员。有序集成员按 score 值递减(从大到小)的次序排列。 其他同 zrangebyscore。</p>
<p>返回值：指定区间内，带有分数值(可选)的有序集成员的列表</p>
<h4 id="zcount"><a href="#zcount" class="headerlink" title="zcount"></a>zcount</h4><p>语法： zcount key min max</p>
<p>作用： 返回有序集 key 中， score 值在 min 和 max 之间(默认包括 score 值等于 min 或 max )的成员的数量。</p>
<p>返回值：分数值在 min 和 max 之间的成员的数量</p>
<p>未完……</p>
]]></content>
      <categories>
        <category>分布式</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>分布式架构——Redis基础</title>
    <url>/2019/08/30/%E5%88%86%E5%B8%83%E5%BC%8F%E6%9E%B6%E6%9E%84%E2%80%94%E2%80%94Redis%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>分布式应用程序就是指应用程序分布在不同计算机上，通过网络来共同完成一项任务，通常为服务器/客户端模式。更广义上理解“分布”，不只是应用程序，还包括数据库等，分布在不同计算机，完成同一个任务。这种架构提供了负载均衡的能力，大大提高了系统负载能力，解决了网站高并发的需求。</p>
<a id="more"></a>

<h2 id="分布式的特点"><a href="#分布式的特点" class="headerlink" title="分布式的特点"></a>分布式的特点</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul>
<li><p>降低了耦合度：把模块拆分,使用接口通信,降低模块之间的耦合度。</p>
</li>
<li><p>责任清晰：把项目拆分成若干个子项目,不同的团队负责不同的子项目。</p>
</li>
<li><p>扩展方便：增加功能时只需要再增加一个子项目,调用其他系统的接口就可以。</p>
</li>
<li><p>部署方便:可以灵活的进行分布式部署。</p>
</li>
<li><p>提高代码的复用性：比如 Service 层，如果不采用分布式 REST 服务（REST 服务是一种 Web 服务架构，其目标是为了创建具有良好扩展性的分布式系统）方式架构就会在手机 WAP 商城，微信商城，PC， Android， IOS 每个端都要写一个 Service 层逻辑,开发量大,难以维护一起升级，这时候就可以采用分布式 REST 服务方式，公用一个 Service 层。</p>
</li>
</ul>
<h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul>
<li>系统之间的交互要使用远程通信,接口开发增大工作量,但是利大于弊。</li>
</ul>
<h2 id="Redis-简介"><a href="#Redis-简介" class="headerlink" title="Redis 简介"></a>Redis 简介</h2><h3 id="Redis-介绍"><a href="#Redis-介绍" class="headerlink" title="Redis 介绍"></a>Redis 介绍</h3><p>Remote Dictionary Server（Redis)）是一个开源的使用 ANSI C 语言编写、支持网络、可基于内存亦可持久化的 Key-Value 数据库。 Key 字符类型， 其值（value）可以是字符串（String）, 哈希（Map）, 列表（list）, 集合（sets）和有序集合（sorted sets）等类型， 每种数据类型有自己的专属命令。 所以它通常也被称为数据结构服务器。</p>
<h3 id="主要特点"><a href="#主要特点" class="headerlink" title="主要特点"></a>主要特点</h3><ul>
<li><p>Redis 数据库完全在内存中，使用磁盘仅用于持久性。</p>
</li>
<li><p>与许多键值数据存储相比， Redis 拥有一套较为丰富的数据类型。</p>
</li>
<li><p>Redis 可以将数据复制到任意数量的从服务器</p>
</li>
</ul>
<h2 id="Redis-安装"><a href="#Redis-安装" class="headerlink" title="Redis 安装"></a>Redis 安装</h2><h3 id="Linux-环境下载地址"><a href="#Linux-环境下载地址" class="headerlink" title="Linux 环境下载地址"></a>Linux 环境下载地址</h3><p><a href="http://download.redis.io/releases/" target="_blank" rel="noopener">http://download.redis.io/releases/</a></p>
<h3 id="Windows-环境下载地址"><a href="#Windows-环境下载地址" class="headerlink" title="Windows 环境下载地址"></a>Windows 环境下载地址</h3><p><a href="https://github.com/microsoftarchive/redis/releases" target="_blank" rel="noopener">https://github.com/microsoftarchive/redis/releases</a></p>
<h3 id="Linux-环境安装过程"><a href="#Linux-环境安装过程" class="headerlink" title="Linux 环境安装过程"></a>Linux 环境安装过程</h3><p>注意：<br>make 命令执行过程中可能报错，根据控制台输出的错误信息进行解决：</p>
<p>错误一： gcc 命令找不到，是由于没有安装 gcc 导致<br>解决方式：安装 gcc 编译器后在执行 make 命令</p>
<p>什么是 gcc？</p>
<p>gcc 是 GNU compiler collection 的缩写，它是 Linux 下一个编译器集合（相当于 javac），是 C 或 C++ 程序的编译器。 </p>
<p>怎么安装 gcc？</p>
<p>使用 yum 进行安装 gcc</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">yum -y <span class="keyword">install</span> gcc</span><br></pre></td></tr></table></figure>

<p>错误二： error: jemalloc/jemalloc.h: No such file or directory<br>解决方式执行 make MALLOC=libc</p>
<p>（1）把压缩包上传到 Linux 系统并解压到 usr/local 目录。</p>
<img src="/2019/08/30/分布式架构——Redis基础/redis00-01.png">

<p>（2）编译 Redis 文件，Redis 是使用 C 语言编写的，需要使用 gcc 编译器。</p>
<img src="/2019/08/30/分布式架构——Redis基础/redis00-02.png">

<img src="/2019/08/30/分布式架构——Redis基础/redis00-03.png">

<p>没有 gcc 编译器，安装 gcc。</p>
<img src="/2019/08/30/分布式架构——Redis基础/redis00-08.png">

<img src="/2019/08/30/分布式架构——Redis基础/redis00-09.png">

<p>注意：安装完 gcc 之后，执行 make 之前，先执行 make distclean 清理一下上次 make 后产生的文件。</p>
<img src="/2019/08/30/分布式架构——Redis基础/redis00-10.png">

<img src="/2019/08/30/分布式架构——Redis基础/redis00-11.png">

<p>（3）make 编译结果</p>
<img src="/2019/08/30/分布式架构——Redis基础/redis00-12.png">

<h3 id="Windows-环境安装"><a href="#Windows-环境安装" class="headerlink" title="Windows 环境安装"></a>Windows 环境安装</h3><p>选择压缩包，解压出来即可使用，也可以选择第一个，使用安装包安装使用。</p>
<img src="/2019/08/30/分布式架构——Redis基础/redis00-13.png">

<h2 id="Redis-使用"><a href="#Redis-使用" class="headerlink" title="Redis 使用"></a>Redis 使用</h2><p>Redis 在 Linux 系统上发挥的性能比在 Windows 系统上好。</p>
<h3 id="启动-Redis"><a href="#启动-Redis" class="headerlink" title="启动 Redis"></a>启动 Redis</h3><h4 id="前台启动"><a href="#前台启动" class="headerlink" title="前台启动"></a>前台启动</h4><p>进入 Redis 的安装路径</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">[<span class="symbol">huang@</span>localhost home]$ cd /usr/local</span><br><span class="line">[<span class="symbol">huang@</span>localhost local]$ cd redis<span class="number">-3.2</span><span class="number">.10</span>/</span><br><span class="line">[<span class="symbol">huang@</span>localhost redis<span class="number">-3.2</span><span class="number">.10</span>]$ cd src</span><br></pre></td></tr></table></figure>

<p>Redis 应用以前台的方式启动，不能退出当前窗口， 退出窗口，应用终止。</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">[huang<span class="variable">@localhost</span> src]<span class="variable">$ </span>./redis-server</span><br></pre></td></tr></table></figure>

<img src="/2019/08/30/分布式架构——Redis基础/redis01.png">

<p>在其他窗口查看 Redis 启动的进程</p>
<img src="/2019/08/30/分布式架构——Redis基础/redis02.png">

<h4 id="后台启动"><a href="#后台启动" class="headerlink" title="后台启动"></a>后台启动</h4><p>Redis 应用以后台的方式启动，关闭窗口后 Redis 进程依然存在。</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">[huang<span class="variable">@localhost</span> src]<span class="variable">$ </span>./redis-server &amp;</span><br></pre></td></tr></table></figure>

<img src="/2019/08/30/分布式架构——Redis基础/redis03.png">

<h3 id="关闭-Redis"><a href="#关闭-Redis" class="headerlink" title="关闭 Redis"></a>关闭 Redis</h3><h3 id="Redis-基本操作命令"><a href="#Redis-基本操作命令" class="headerlink" title="Redis 基本操作命令"></a>Redis 基本操作命令</h3><p>Redis 默认为 16 个库（在 redis.conf 文件配置），默认自动使用 0 号库。</p>
<h4 id="沟通命令，查看状态"><a href="#沟通命令，查看状态" class="headerlink" title="沟通命令，查看状态"></a>沟通命令，查看状态</h4><p>输入 ping， Redis 给我们返回 PONG，表示 Redis 服务运行正常。</p>
<h4 id="查看当前数据库中-key-的数目"><a href="#查看当前数据库中-key-的数目" class="headerlink" title="查看当前数据库中 key 的数目"></a>查看当前数据库中 key 的数目</h4><p>语法： dbsize<br>作用： 返回当前数据库的 key 的数量。<br>返回值：数字， key 的数量</p>
<h4 id="切换库命令"><a href="#切换库命令" class="headerlink" title="切换库命令"></a>切换库命令</h4><p>命令为 select db，使用其他数据库， 命令是 select index。</p>
<h4 id="删除当前库的数据"><a href="#删除当前库的数据" class="headerlink" title="删除当前库的数据"></a>删除当前库的数据</h4><p>命令为 flushdb。</p>
<h4 id="退出当前-Redis-连接"><a href="#退出当前-Redis-连接" class="headerlink" title="退出当前 Redis 连接"></a>退出当前 Redis 连接</h4><p>命令为 exit 或 quit。</p>
<h3 id="Redis-的-Key-的操作命令"><a href="#Redis-的-Key-的操作命令" class="headerlink" title="Redis 的 Key 的操作命令"></a>Redis 的 Key 的操作命令</h3><h4 id="keys"><a href="#keys" class="headerlink" title="keys"></a>keys</h4><p>语法： keys pattern<br>作用：查找所有符合模式 pattern 的 key. pattern 可以使用通配符。<br>通配符：</p>
<ul>
<li>“* ”：表示 0 到多个字符 ，例如： keys * 查询所有的 key。  </li>
<li>“？”：表示单个字符，例如： wo?d , 匹配 word , wood</li>
</ul>
<h4 id="expire"><a href="#expire" class="headerlink" title="expire"></a>expire</h4><p>语法： expire key seconds<br>作用：设置 key 的生存时间， 超过时间， key 自动删除。单位是秒。<br>返回值：设置成功返回数字 1， 其他情况是 0</p>
<h4 id="ttl"><a href="#ttl" class="headerlink" title="ttl"></a>ttl</h4><p>法： ttl key<br>作用：以秒为单位，返回 key 的剩余生存时间（ttl: time to live）<br>返回值：  </p>
<ul>
<li>-1 ：没有设置 key 的生存时间， key 永不过期。  </li>
<li>-2 ： key 不存在。  </li>
<li>数字： key 的剩余时间，秒为单位。  </li>
</ul>
<h4 id="type"><a href="#type" class="headerlink" title="type"></a>type</h4><p>语法： type key<br>作用：查看 key 所存储值的数据类型。<br>返回值：字符串表示的数据类型  </p>
<ul>
<li>none（key 不存在）  </li>
<li>string（字符串）  </li>
<li>list（列表）  </li>
<li>set（集合）  </li>
<li>zset（有序集）  </li>
<li>hash（哈希表）</li>
</ul>
<h4 id="del"><a href="#del" class="headerlink" title="del"></a>del</h4><p>语法： del key [key…]<br>作用：删除存在的 key ，不存在的 key 忽略。<br>返回值：数字，删除的 key 的数量</p>
]]></content>
      <categories>
        <category>分布式</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Java常用的注解</title>
    <url>/2019/08/23/Java%E5%B8%B8%E7%94%A8%E7%9A%84%E6%B3%A8%E8%A7%A3/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>注解本身没有功能的，就和 xml 一样。注解和 xml 都是一种元数据，元数据即解释数据的数据，这就是所谓配置。</p>
<a id="more"></a>

<h2 id="Spring-部分"><a href="#Spring-部分" class="headerlink" title="Spring 部分"></a>Spring 部分</h2><h3 id="声明-bean-的注解"><a href="#声明-bean-的注解" class="headerlink" title="声明 bean 的注解"></a>声明 bean 的注解</h3><p>@Component 组件，没有明确的角色，在类上使用注解@Component，该注解的 value 属性用于指定该 bean 的 id 值</p>
<p>@Repository 用于对 DAO 实现类进行注解</p>
<p>@Service 用于对 Service 实现类进行注解</p>
<p>@Controller 用于对 Controller 实现类进行注解</p>
<h3 id="注入-bean-的注解"><a href="#注入-bean-的注解" class="headerlink" title="注入 bean 的注解"></a>注入 bean 的注解</h3><p>@Autowired：由 Spring 提供</p>
<p>@Inject：由 JSR-330 提供</p>
<p>@Resource：由 JSR-250 提供</p>
<p>都可以注解在 set 方法和属性上，推荐注解在属性上(一目了然，少写代码)。</p>
<h3 id="Java-配置类相关注解"><a href="#Java-配置类相关注解" class="headerlink" title="Java 配置类相关注解"></a>Java 配置类相关注解</h3><p>@Configuration 表示当前类充当 Spring 容器，即所有的 Bean 将由这个类来创建(类上)</p>
<p>@Bean 注解在方法上，声明当前方法的返回值为一个 bean ，替代 xml 中的方式（方法上）</p>
<p>@Configuration 声明当前类为配置类，其中内部组合了 @Component 注解，表明这个类是一个 bean (类上)</p>
<p>@ComponentScan 用于对 Component 进行扫描，相当于 xml 中的（类上）</p>
<p>@WishlyConfiguration 为 @Configuration 与 @ComponentScan 的组合注解，可以替代这两个注解</p>
<h3 id="切面（AOP）相关注解"><a href="#切面（AOP）相关注解" class="headerlink" title="切面（AOP）相关注解"></a>切面（AOP）相关注解</h3><p>Spring 支持 AspectJ 的注解式切面编程。</p>
<p>@Aspect 指定当前 POJO 类将作为切面(类上)</p>
<p>使用 @After 、 @Before 、 @Around 定义建言 (advice) ，可直接将拦截规则（切点）作为参数。</p>
<p>@After 在方法执行之后执行（方法上）</p>
<p>@Before 在方法执行之前执行（方法上）</p>
<p>@Around 在方法执行之前与之后执行（方法上）</p>
<p>@Pointcut 定义切入点</p>
<p>在 Java 配置类中使用 @EnableAspectJAutoProxy 注解开启 Spring 对 AspectJ 代理的支持（类上）</p>
<h3 id="Bean-的属性支持"><a href="#Bean-的属性支持" class="headerlink" title="@Bean 的属性支持"></a>@Bean 的属性支持</h3><p>@Scope 设置 Spring 容器如何新建 Bean 实例(方法上，得有 @Bean )</p>
<p>其设置类型包括：</p>
<p>Singleton (单例,一个 Spring 容器中只有一个 bean 实例，默认模式)<br>Protetype (每次调用新建一个 bean )<br>Request ( web 项目中，给每个 http request 新建一个 bean )<br>Session ( web项 目中，给每个 http session 新建一个 bean )<br>GlobalSession (给每一个 global http session 新建一个 Bean 实例)</p>
<p>@StepScope 在 Spring Batch 中还有涉及</p>
<p>@PostConstruct 由 JSR-250 提供，在构造函数执行完之后执行，等价于 xml 配置文件中 bean 的 initMethod</p>
<p>@PreDestory 由 JSR-250 提供，在 Bean 销毁之前执行，等价于 xml 配置文件中 bean 的 destroyMethod</p>
<h3 id="Value注解"><a href="#Value注解" class="headerlink" title="@Value注解"></a>@Value注解</h3><p>@Value 为属性注入值(属性上)支持如下方式的注入：</p>
<h4 id="注入普通字符串"><a href="#注入普通字符串" class="headerlink" title="注入普通字符串"></a>注入普通字符串</h4><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Value(<span class="meta-string">"normal"</span>)</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> String normal</span><br></pre></td></tr></table></figure>

<h4 id="注入文件资源"><a href="#注入文件资源" class="headerlink" title="注入文件资源"></a>注入文件资源</h4><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Value(<span class="meta-string">"classpath:com/huang/spring/configinject/config.txt"</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Resource resourceFile;</span><br></pre></td></tr></table></figure>

<h4 id="注入-URL-资源"><a href="#注入-URL-资源" class="headerlink" title="注入 URL 资源"></a>注入 URL 资源</h4><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">   @Value(<span class="string">"https://www.huangyuanzhi.top"</span>)</span><br><span class="line"></span><br><span class="line">private<span class="built_in"> Resource </span>testUrl;</span><br></pre></td></tr></table></figure>

<h4 id="注入表达式结果"><a href="#注入表达式结果" class="headerlink" title="注入表达式结果"></a>注入表达式结果</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">   @<span class="keyword">Value</span>("#&#123; <span class="selector-tag">T</span>(<span class="selector-tag">java</span><span class="selector-class">.lang</span><span class="selector-class">.Math</span>)<span class="selector-class">.random</span>() * 100<span class="selector-class">.0</span> &#125;")</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">private</span> <span class="selector-tag">double</span> <span class="selector-tag">randomNumber</span>;</span><br></pre></td></tr></table></figure>

<h4 id="注入其它-bean-属性"><a href="#注入其它-bean-属性" class="headerlink" title="注入其它 bean 属性"></a>注入其它 bean 属性</h4><figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line"><span class="symbol">@Value</span>(<span class="string">"&#123;domeClass.name&#125;"</span>)</span><br><span class="line"><span class="built_in">String</span> name<span class="comment">;</span></span><br></pre></td></tr></table></figure>

<h4 id="注入配置文件"><a href="#注入配置文件" class="headerlink" title="注入配置文件"></a>注入配置文件</h4><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Value(<span class="meta-string">"<span class="subst">$&#123;book.name&#125;</span>"</span>)</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> String bookName;</span><br></pre></td></tr></table></figure>

<p>注入配置使用方法： </p>
<p>(1) 编写配置文件（test.properties）</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">book.name</span>=《三体》</span><br></pre></td></tr></table></figure>

<p>(2) @PropertySource 加载配置文件(类上)</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PropertySource(<span class="meta-string">"classpath:com/huang/spring/configinject/config.properties"</span>)</span></span><br></pre></td></tr></table></figure>

<p>(3) 还需配置一个 PropertySourcesPlaceholderConfigurer 的 bean 。</p>
<h3 id="环境切换"><a href="#环境切换" class="headerlink" title="环境切换"></a>环境切换</h3><p>@Profile 通过设定 Environment 的 ActiveProfiles 来设定当前 context 需要使用的配置环境。(类或方法上)</p>
<p>@Conditional Spring4 中可以使用此注解定义条件话的 bean ，通过实现 Condition 接口，并重写 matches 方法，从而决定该 bean 是否被实例化。(方法上)</p>
<h3 id="异步相关"><a href="#异步相关" class="headerlink" title="异步相关"></a>异步相关</h3><p>@EnableAsync 配置类中，通过此注解开启对异步任务的支持，叙事性 AsyncConfigurer 接口(类上)</p>
<p>@Async 在实际执行的 bean 方法使用该注解来申明其是一个异步任务(方法上或类上所有的方法都将异步，需要 @EnableAsync 开启异步任务)</p>
<h3 id="定时任务相关"><a href="#定时任务相关" class="headerlink" title="定时任务相关"></a>定时任务相关</h3><p>@EnableScheduling 在配置类上使用，开启计划任务的支持(类上)</p>
<p>@Scheduled 来申明这是一个任务，包括 cron , fixDelay , fixRate 等类型(方法上，需先开启计划任务的支持)</p>
<h3 id="Enable-注解说明"><a href="#Enable-注解说明" class="headerlink" title="@Enable* 注解说明"></a>@Enable* 注解说明</h3><p>这些注解主要用来开启对xxx的支持。</p>
<p>@EnableAspectJAutoProxy 开启对 AspectJ 自动代理的支持</p>
<p>@EnableAsync 开启异步方法的支持</p>
<p>@EnableScheduling 开启计划任务的支持</p>
<p>@EnableWebMvc 开启 Web MVC 的配置支持</p>
<p>@EnableConfigurationProperties 开启对 @ConfigurationProperties 注解配置 Bean 的支持</p>
<p>@EnableJpaRepositories 开启对 SpringData JPA Repository 的支持</p>
<p>@EnableTransactionManagement 开启注解式事务的支持</p>
<p>@EnableCaching 开启注解式的缓存支持</p>
<h3 id="测试相关注解"><a href="#测试相关注解" class="headerlink" title="测试相关注解"></a>测试相关注解</h3><p>@RunWith 运行器，Spring 中通常用于对 JUnit 的支持</p>
<p>@ContextConfiguration 用来加载配置 ApplicationContext ，其中 classes 属性用来加载配置类</p>
<h2 id="Spring-MVC-部分"><a href="#Spring-MVC-部分" class="headerlink" title="Spring MVC 部分"></a>Spring MVC 部分</h2><p>@EnableWebMvc 在配置类中开启 Web MVC 的配置支持，如一些 ViewResolver 或者 MessageConverter 等，若无此句，重写 WebMvcConfigurerAdapter 方法(用于对 SpringMVC 的配置)。</p>
<p>@Controller 表示当前类为处理器</p>
<p>@RequestMapping 表示当前方法为处理器方法；该方法要对 value 属性所指定的 URL 进行处理与响应； 被注解的方法的方法名可以随意。</p>
<p>@ResponseBody 支持将返回值放在 response 内，而不是一个页面，通常用户返回 json 数据（返回值旁或方法上）</p>
<p>@RequestBody 允许 request 的参数在 request 体中，而不是在直接连接在地址后面。（放在参数前）</p>
<p>@PathVariable 用于接收路径参数，比如@ RequestMapping(“/hello/{name}”) 申明的路径，将注解放在参数中前，即可获取该值，通常作为 Restful 的接口实现方法。</p>
<p>@RestController 该注解为一个组合注解，相当于 @Controller 和 @ResponseBody 的组合，注解在类上，意味着，该 Controller 的所有方法都默认加上了 @ResponseBody。</p>
<p>@ControllerAdvice 通过该注解，我们可以将对于控制器的全局配置放置在同一个位置，注解了 @Controller 的类的方法可使用 @ExceptionHandler 、 @InitBinder 、 @ModelAttribute 注解到方法上，这对所有注解了 @RequestMapping 的控制器内的方法有效。</p>
<p>@ExceptionHandler 用于全局处理控制器里的异常</p>
<p>@InitBinder 用来设置 WebDataBinder ， WebDataBinder 用来自动绑定前台请求参数到 Model 中。</p>
<p>@ModelAttribute 本来的作用是绑定键值对到 Model 里，在 @ControllerAdvice 中是让全局的 @RequestMapping 都能获得在此处设置的键值对。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>注解</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis常用的设计模式</title>
    <url>/2019/08/21/MyBatis%E5%B8%B8%E7%94%A8%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Builder-模式"><a href="#Builder-模式" class="headerlink" title="Builder 模式"></a>Builder 模式</h2><p>Builder 模式的定义是“将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。”，它属于创建类模式，一般来说，如果一个对象的构建比较复杂，超出了构造函数所能包含的范围，就可以使用工厂模式和 Builder 模式，相对于工厂模式会产出一个完整的产品，Builder 应用于更加复杂的对象的构建，甚至只会构建产品的一个部分。</p>
<a id="more"></a>

<img src="/2019/08/21/MyBatis常用的设计模式/des01.jpg">

<p>在 MyBatis环境的初始化过程中，SqlSessionFactoryBuilder 会调用 XMLConfigBuilder 读取所有的 MyBatisMapConfig.xml 和所有的 *Mapper.xml 文件，构建 MyBatis 运行的核心对象 Configuration 对象，然后将该 Configuration 对象作为参数构建一个 SqlSessionFactory 对象。</p>
<p>其中 XMLConfigBuilder 在构建 Configuration 对象时，也会调用 XMLMapperBuilder 用于读取 *.Mapper 文件，而 XMLMapperBuilder 会使用 XMLStatementBuilder 来读取和 build 所有的 SQL 语句。</p>
<p>在这个过程中，有一个相似的特点，就是这些 Builder 会读取文件或者配置，然后做大量的 XpathParser 解析、配置或语法的解析、反射生成对象、存入结果缓存等步骤，这么多的工作都不是一个构造函数所能包括的，因此大量采用了Builder模式来解决。</p>
<p>对于 Builder 的具体类，方法都大都用 build* 开头，比如 SqlSessionFactoryBuilder 为例，它包含以下方法：</p>
<img src="/2019/08/21/MyBatis常用的设计模式/des03.png">

<p>即根据不同的输入参数来构建 SqlSessionFactory 这个工厂对象。</p>
<h2 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h2><p>在 MyBatis 中比如 SqlSessionFactory 使用的是工厂模式，该工厂没有那么复杂的逻辑，是一个简单工厂模式。</p>
<p>简单工厂模式(Simple Factory Pattern)：又称为静态工厂方法(Static Factory Method)模式，它属于类创建型模式。在简单工厂模式中，可以根据参数的不同返回不同类的实例。简单工厂模式专门定义一个类来负责创建其他类的实例，被创建的实例通常都具有共同的父类。</p>
<img src="/2019/08/21/MyBatis常用的设计模式/des02.png">


<h3 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h3><p>SqlSession 可以认为是一个 MyBatis 工作的核心的接口，通过这个接口可以执行执行 SQL 语句、获取 Mappers 、管理事务。类似于连接 MySQL 的 Connection 对象。</p>
<img src="/2019/08/21/MyBatis常用的设计模式/des04.png">

<p>可以看到，该 Factory的openSession 方法重载了很多个，分别支持 autoCommit 、Executor 、Transaction 等参数的输入，来构建核心的 SqlSession 对象。在 DefaultSqlSessionFactory 的默认工厂实现里，有一个方法可以看出工厂怎么产出一个产品：</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> SqlSession <span class="keyword">open</span><span class="constructor">SessionFromDataSource(ExecutorType <span class="params">execType</span>, TransactionIsolationLevel <span class="params">level</span>, <span class="params">boolean</span> <span class="params">autoCommit</span>)</span> &#123;</span><br><span class="line">  Transaction tx = null;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    final Environment environment = configuration.get<span class="constructor">Environment()</span>;</span><br><span class="line">    final TransactionFactory transactionFactory = get<span class="constructor">TransactionFactoryFromEnvironment(<span class="params">environment</span>)</span>;</span><br><span class="line">    tx = transactionFactory.<span class="keyword">new</span><span class="constructor">Transaction(<span class="params">environment</span>.<span class="params">getDataSource</span>()</span>, level, autoCommit);</span><br><span class="line">    final Executor executor = configuration.<span class="keyword">new</span><span class="constructor">Executor(<span class="params">tx</span>, <span class="params">execType</span>, <span class="params">autoCommit</span>)</span>;</span><br><span class="line">    return <span class="keyword">new</span> <span class="constructor">DefaultSqlSession(<span class="params">configuration</span>, <span class="params">executor</span>)</span>;</span><br><span class="line">  &#125; catch (Exception e) &#123;</span><br><span class="line">    close<span class="constructor">Transaction(<span class="params">tx</span>)</span>; <span class="comment">// may have fetched a connection so lets call close()</span></span><br><span class="line">    throw <span class="module-access"><span class="module"><span class="identifier">ExceptionFactory</span>.</span></span>wrap<span class="constructor">Exception(<span class="string">"Error opening session.  Cause: "</span> + <span class="params">e</span>, <span class="params">e</span>)</span>;</span><br><span class="line">  &#125; finally &#123;</span><br><span class="line">    <span class="module-access"><span class="module"><span class="identifier">ErrorContext</span>.</span></span>instance<span class="literal">()</span>.reset<span class="literal">()</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>是一个 openSession 调用的底层方法，该方法先从 configuration 读取对应的环境配置，然后初始化 TransactionFactory 获得一个 Transaction 对象，然后通过 Transaction 获取一个 Executor 对象，最后通过 configuration、Executor、是否 autoCommit 三个参数构建了 SqlSession。SqlSession 的执行，其实是委托给对应的 Executor 来进行的。</p>
<p>而对于LogFactory，它的实现代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">LogFactory</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Constructor<span class="meta">&lt;?</span> extends Log&gt; logConstructor;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> LogFactory() &#123;</span><br><span class="line">        <span class="comment">// disable construction</span></span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Log getLog(<span class="class"><span class="keyword">Class</span>&lt;?&gt; <span class="title">aClass</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getLog(aClass.getName());</span><br></pre></td></tr></table></figure>

<p>这里有个特别的地方，Log 变量的的类型是 Constructor&lt;? extendsLog&gt;，也就是说该工厂生产的不只是一个产品，而是具有 Log 公共接口的一系列产品，比如 Log4jImpl、Slf4jImpl 等很多具体的 Log。</p>
<h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><p>单例模式(Singleton Pattern)：单例模式确保某一个类只有一个实例，而且自行实例化并向整个系统提供这个实例，这个类称为单例类，它提供全局访问的方法。</p>
<p>单例模式的要点有三个：一是某个类只能有一个实例；二是它必须自行创建这个实例；三是它必须自行向整个系统提供这个实例。单例模式是一种对象创建型模式。单例模式又名单件模式或单态模式。</p>
<p>在 MyBatis 中有两个地方用到单例模式，ErrorContext 和 LogFactory，其中 ErrorContext 是用在每个线程范围内的单例，用于记录该线程的执行环境错误信息，而 LogFactory 则是提供给整个 MyBatis 使用的日志工厂，用于获得针对项目配置好的日志对象。</p>
<p>ErrorContext 的单例实现代码：</p>
<figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> final ThreadLocal&lt;ErrorContext&gt; LOCAL = <span class="keyword">new</span> <span class="type">ThreadLocal</span>&lt;ErrorContext&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> ErrorContext stored;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">String</span> resource;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">String</span> activity;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">String</span> object;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">String</span> message;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">String</span> sql;</span><br><span class="line"><span class="keyword">private</span> Throwable cause;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> ErrorContext() &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ErrorContext instance() &#123;</span><br><span class="line">  ErrorContext context = LOCAL.<span class="keyword">get</span>();</span><br><span class="line">  <span class="keyword">if</span> (context == <span class="literal">null</span>) &#123;</span><br><span class="line">    context = <span class="keyword">new</span> <span class="type">ErrorContext</span>();</span><br><span class="line">    LOCAL.<span class="keyword">set</span>(context);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> context;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>构造函数是 private 修饰，具有一个 static 的局部 instance 变量和一个获取 instance 变量的方法，在获取实例的方法中，先判断是否为空如果是的话就先创建，然后返回构造好的对象。</p>
<p>需要注意的是是，LOCAL 的静态实例变量使用了 ThreadLoca l修饰，也就是说它属于每个线程各自的数据，而在 instance() 方法中，先获取本线程的该实例，如果没有就创建该线程独有的 ErrorContext。</p>
<h2 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h2><p>代理模式(Proxy Pattern) ：给某一个对象提供一个代理，并由代理对象控制对原对象的引用。代理模式的英 文叫做 Proxy 或 Surrogate，它是一种对象结构型模式。代理模式可以认为是 MyBatis 的核心使用的模式，正是由于这个模式，我们只需要编写 Mapper.java 接口，不需要实现，由 MyBatis 后台帮我们完成具体 SQL 的执行。</p>
<p>代理模式包含如下角色：</p>
<ul>
<li><p>Subject: 抽象主题角色  </p>
</li>
<li><p>Proxy: 代理主题角色  </p>
</li>
<li><p>RealSubject: 真实主题角色</p>
</li>
</ul>
<img src="/2019/08/21/MyBatis常用的设计模式/des05.png">

<p>这里有两个步骤，第一个是提前创建一个Proxy，第二个是使用的时候会自动请求Proxy，然后由Proxy来执行具体事务；</p>
<p>当我们使用 Configuration 的 getMapper 方法时，会调用 mapperRegistry.getMapper 方法，而该方法又会调用 mapperProxyFactory.newInstance(sqlSession) 来生成一个具体的代理：</p>
<figure class="highlight monkey"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MapperProxyFactory</span>&lt;<span class="title">T</span>&gt; &#123;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> <span class="class"><span class="keyword">Class</span>&lt;<span class="title">T</span>&gt; <span class="title">mapperInterface</span>;</span></span><br><span class="line">  <span class="keyword">private</span> Map&lt;<span class="function"><span class="keyword">Method</span>, <span class="title">MapperMethod</span>&gt; <span class="title">methodCache</span> =</span> <span class="keyword">new</span> ConcurrentHashMap&lt;<span class="function"><span class="keyword">Method</span>, <span class="title">MapperMethod</span>&gt;(</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> MapperProxyFactory(<span class="class"><span class="keyword">Class</span>&lt;<span class="title">T</span>&gt; <span class="title">mapperInterface</span>) &#123;</span></span><br><span class="line">    this.mapperInterface = mapperInterface;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="class"><span class="keyword">Class</span>&lt;<span class="title">T</span>&gt; <span class="title">getMapperInterface</span>() &#123;</span></span><br><span class="line">    <span class="keyword">return</span> mapperInterface;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> Map&lt;<span class="function"><span class="keyword">Method</span>, <span class="title">MapperMethod</span>&gt; <span class="title">getMethodCache</span>(</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> methodCache;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @SuppressWarnings(<span class="string">"unchecked"</span>)</span><br><span class="line">  protected T newInstance(MapperProxy&lt;T&gt; mapperProxy) &#123;</span><br><span class="line">    <span class="keyword">return</span> (T) Proxy.newProxyInstance(mapperInterface.getClassLoader(), <span class="keyword">new</span> <span class="class"><span class="keyword">Class</span>[] &#123; <span class="title">mapperInterface</span> &#125;, <span class="title">mapperProxy</span>);</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> T newInstance(SqlSession sqlSession) &#123;</span><br><span class="line">    <span class="keyword">final</span> MapperProxy&lt;T&gt; mapperProxy = <span class="keyword">new</span> MapperProxy&lt;T&gt;(sqlSession, mapperInterface, methodCache);</span><br><span class="line">    <span class="keyword">return</span> newInstance(mapperProxy);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在这里，先通过 T newInstance(SqlSession sqlSession) 方法会得到一个 MapperProxy 对象，然后调用 T newInstance(MapperProxy<t> mapperProxy) 生成代理对象然后返回。</t></p>
<p>而查看 MapperProxy 的代码，可以看到如下内容：</p>
<figure class="highlight monkey"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MapperProxy</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">InvocationHandler</span>, <span class="title">Serializable</span> &#123;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> static <span class="keyword">final</span> long serialVersionUID = -<span class="number">6424540398559729838</span>L;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> SqlSession sqlSession;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> <span class="class"><span class="keyword">Class</span>&lt;<span class="title">T</span>&gt; <span class="title">mapperInterface</span>;</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;<span class="function"><span class="keyword">Method</span>, <span class="title">MapperMethod</span>&gt; <span class="title">methodCache</span>;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> MapperProxy(SqlSession sqlSession, <span class="class"><span class="keyword">Class</span>&lt;<span class="title">T</span>&gt; <span class="title">mapperInterface</span>, <span class="title">Map</span>&lt;<span class="title">Method</span>, <span class="title">MapperMethod</span>&gt; <span class="title">methodCache</span>) &#123;</span></span><br><span class="line">    this.sqlSession = sqlSession;</span><br><span class="line">    this.mapperInterface = mapperInterface;</span><br><span class="line">    this.methodCache = methodCache;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> Object invoke(Object proxy, <span class="function"><span class="keyword">Method</span> <span class="title">method</span>, <span class="title">Object</span>[] <span class="title">args</span>) <span class="title">throws</span> <span class="title">Throwable</span> &#123;</span></span><br><span class="line">    <span class="keyword">if</span> (Object.class.equals(<span class="function"><span class="keyword">method</span>.<span class="title">getDeclaringClass</span>(</span>))) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">method</span>.<span class="title">invoke</span>(</span>this, args);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">        <span class="keyword">throw</span> ExceptionUtil.unwrapThrowable(t);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">final</span> MapperMethod mapperMethod = cachedMapperMethod(<span class="function"><span class="keyword">method</span>);</span></span><br><span class="line">    <span class="keyword">return</span> mapperMethod.execute(sqlSession, args);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>这是非常典型的，该 MapperProxy 类实现了 InvocationHandler 接口，并且实现了该接口的 invoke 方法。</p>
<p>通过这种方式，我们只需要编写 Mapper.java 接口类，当真正执行一个 Mapper 接口的时候，就会转发给 MapperProxy.invoke 方法，而该方法则会调用后续的 sqlSession.cud&gt;executor.execute&gt;prepareStatement 等一系列方法，完成 SQL 的执行和返回。</p>
<h2 id="组合模式"><a href="#组合模式" class="headerlink" title="组合模式"></a>组合模式</h2><p>组合模式组合多个对象形成树形结构以表示“整体-部分”的结构层次。</p>
<p>组合模式对单个对象(叶子对象)和组合对象(组合对象)具有一致性，它将对象组织到树结构中，可以用来描述整体与部分的关系。同时它也模糊了简单元素(叶子对象)和复杂元素(容器对象)的概念，使得客户能够像处理简单元素一样来处理复杂元素，从而使客户程序能够与复杂元素的内部结构解耦。</p>
<p>在使用组合模式中需要注意一点也是组合模式最关键的地方：叶子对象和组合对象实现相同的接口。这就是组合模式能够将叶子节点和对象节点进行一致处理的原因。</p>
<img src="/2019/08/21/MyBatis常用的设计模式/des06.png">

<h3 id="组合模式-1"><a href="#组合模式-1" class="headerlink" title="组合模式"></a>组合模式</h3><p>MyBatis 支持动态 SQL 的强大功能，比如下面的这个SQL：</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">update</span> id=<span class="string">"update"</span> parameterType=<span class="string">"org.format.dynamicproxy.mybatis.bean.User"</span>&gt;</span><br><span class="line">    <span class="keyword">UPDATE</span> users</span><br><span class="line">    &lt;<span class="keyword">trim</span> prefix=<span class="string">"SET"</span> prefixOverrides=<span class="string">","</span>&gt;</span><br><span class="line">        &lt;<span class="keyword">if</span> <span class="keyword">test</span>=<span class="string">"name != null and name != ''"</span>&gt;</span><br><span class="line">            name = #&#123;name&#125;</span><br><span class="line">        &lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">        &lt;<span class="keyword">if</span> <span class="keyword">test</span>=<span class="string">"age != null and age != ''"</span>&gt;</span><br><span class="line">            , age = #&#123;age&#125;</span><br><span class="line">        &lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">        &lt;<span class="keyword">if</span> <span class="keyword">test</span>=<span class="string">"birthday != null and birthday != ''"</span>&gt;</span><br><span class="line">            , birthday = #&#123;birthday&#125;</span><br><span class="line">        &lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">    &lt;/<span class="keyword">trim</span>&gt;</span><br><span class="line">    where id = <span class="variable">$&#123;id&#125;</span></span><br><span class="line">&lt;/<span class="keyword">update</span>&gt;</span><br></pre></td></tr></table></figure>

<p>在这里面使用到了 trim、i f等动态元素，可以根据条件来生成不同情况下的 SQL 。</p>
<p>在 DynamicSqlSource.getBoundSql 方法里，调用了 rootSqlNode.apply(context) 方法，apply 方法是所有的动态节点都实现的接口：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">public<span class="built_in"> interface </span>SqlNode &#123;</span><br><span class="line">  boolean apply(DynamicContext context);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对于实现该 SqlSource 接口的所有节点，就是整个组合模式树的各个节点：</p>
<img src="/2019/08/21/MyBatis常用的设计模式/des07.png">

<h3 id="SqlNode"><a href="#SqlNode" class="headerlink" title="SqlNode"></a>SqlNode</h3><p>组合模式的简单之处在于，所有的子节点都是同一类节点，可以递归的向下执行，比如对于 TextSqlNode ，因为它是最底层的叶子节点，所以直接将对应的内容 append 到 SQL 语句中：</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="built_in">public</span> <span class="type">boolean</span> apply(DynamicContext context) &#123;</span><br><span class="line">  GenericTokenParser parser = createParser(<span class="built_in">new</span> BindingTokenParser(context));</span><br><span class="line">  context.appendSql(<span class="keyword">parser</span>.parse(<span class="type">text</span>));</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但是对于 IfSqlNode ，就需要先做判断，如果判断通过，仍然会调用子元素的 SqlNode ，即 contents.apply 方法，实现递归的解析。</p>
<figure class="highlight xquery"><table><tr><td class="code"><pre><span class="line"> public<span class="built_in"> boolean</span><span class="built_in"> apply</span>(DynamicContext <span class="keyword">context</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (evaluator.evaluateBoolean(test, <span class="keyword">context</span>.getBindings())) &#123;</span><br><span class="line">      contents<span class="built_in">.apply</span>(<span class="keyword">context</span>);</span><br><span class="line">      <span class="keyword">return</span><span class="built_in"> true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span><span class="built_in"> false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="模板方法模式"><a href="#模板方法模式" class="headerlink" title="模板方法模式"></a>模板方法模式</h2><p>模板方法模式是所有模式中最为常见的几个模式之一，是基于继承的代码复用的基本技术。</p>
<p>模板方法模式需要开发抽象类和具体子类的设计师之间的协作。一个设计师负责给出一个算法的轮廓和骨架，另一些设计师则负责给出这个算法的各个逻辑步骤。代表这些具体逻辑步骤的方法称做基本方法(primitive method)；而将这些基本方法汇总起来的方法叫做模板方法(template method)，这个设计模式的名字就是从此而来。</p>
<p>模板类定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。</p>
<img src="/2019/08/21/MyBatis常用的设计模式/des08.png">

<h3 id="模板方法模式-1"><a href="#模板方法模式-1" class="headerlink" title="模板方法模式"></a>模板方法模式</h3><p>在 MyBatis 中，sqlSession 的 SQL 执行，都是委托给 Executor 实现的，Executor 包含以下结构：</p>
<img src="/2019/08/21/MyBatis常用的设计模式/des09.png">


<h3 id="Executor接口"><a href="#Executor接口" class="headerlink" title="Executor接口"></a>Executor接口</h3><p>其中的 BaseExecutor 就采用了模板方法模式，它实现了大部分的 SQL 执行逻辑，然后把以下几个方法交给子类定制化完成：</p>
<figure class="highlight xquery"><table><tr><td class="code"><pre><span class="line"> public<span class="built_in"> boolean</span><span class="built_in"> apply</span>(DynamicContext <span class="keyword">context</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (evaluator.evaluateBoolean(test, <span class="keyword">context</span>.getBindings())) &#123;</span><br><span class="line">      contents<span class="built_in">.apply</span>(<span class="keyword">context</span>);</span><br><span class="line">      <span class="keyword">return</span><span class="built_in"> true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span><span class="built_in"> false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>该模板方法类有几个子类的具体实现，使用了不同的策略：</p>
<ul>
<li>简单 SimpleExecutor：每执行一次 update 或 select，就开启一个 Statement 对象，用完立刻关闭 Statement 对象。（可以是 Statement 或 PrepareStatement 对象）  </li>
<li>重用 ReuseExecutor：执行 update 或 select，以 sql 作为 key 查找 Statement 对象，存在就使用，不存在就创建，用完后，不关闭 Statement 对象，而是放置于 Map 内，供下一次使用。（可以是 Statement 或 PrepareStatement 对象）  </li>
<li>批量 BatchExecutor：执行 update （没有 select，JDBC 批处理不支持 select ），将所有sql都添加到批处理中（addBatch()），等待统一执行（executeBatch()），它缓存了多个 Statement 对象，每个 Statement 对象都是 addBatch() 完毕后，等待逐一执行 executeBatch() 批处理的；BatchExecutor 相当于维护了多个桶，每个桶里都装了很多属于自己的SQL，就像苹果蓝里装了很多苹果，番茄蓝里装了很多番茄，最后，再统一倒进仓库。（可以是 Statement 或 PrepareStatement 对象）</li>
</ul>
<p>比如在 SimpleExecutor 中这样实现 update 方法：</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">public <span class="built_in">int</span> <span class="keyword">do</span><span class="constructor">Update(MappedStatement <span class="params">ms</span>, Object <span class="params">parameter</span>)</span> throws SQLException &#123;</span><br><span class="line">  Statement stmt = null;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    Configuration configuration = ms.get<span class="constructor">Configuration()</span>;</span><br><span class="line">    StatementHandler handler = configuration.<span class="keyword">new</span><span class="constructor">StatementHandler(<span class="params">this</span>, <span class="params">ms</span>, <span class="params">parameter</span>, RowBounds.DEFAULT, <span class="params">null</span>, <span class="params">null</span>)</span>;</span><br><span class="line">    stmt = prepare<span class="constructor">Statement(<span class="params">handler</span>, <span class="params">ms</span>.<span class="params">getStatementLog</span>()</span>);</span><br><span class="line">    return handler.update(stmt);</span><br><span class="line">  &#125; finally &#123;</span><br><span class="line">    close<span class="constructor">Statement(<span class="params">stmt</span>)</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h2><p>适配器模式(Adapter Pattern)的定义是，将某个类的接口转换为接口客户所需的类型。 换句话说， 适配器模式解决的问题是， 使得原本由于接口不兼容而不能一起工作、不能统一管理的那些类可以在一起工作、可以进行统一管理，其别名为包装器(Wrapper)。适配器模式既可以作为类结构型模式，也可以作为对象结构型模式。</p>
<img src="/2019/08/21/MyBatis常用的设计模式/des10.png">

<p>在 MyBatsi 的 logging 包中，有一个 Log 接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Log</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">boolean</span> <span class="title">isDebugEnabled</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">boolean</span> <span class="title">isTraceEnabled</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">error</span><span class="params">(String s, Throwable e)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">error</span><span class="params">(String s)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">debug</span><span class="params">(String s)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">trace</span><span class="params">(String s)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">warn</span><span class="params">(String s)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>该接口定义了 MyBatis 直接使用的日志方法，而 Log 接口具体由谁来实现呢？MyBatis 提供了多种日志框架的实现，这些实现都匹配这个 Log 接口所定义的接口方法，最终实现了所有外部日志框架到 MyBatis 日志包的适配：</p>
<img src="/2019/08/21/MyBatis常用的设计模式/des11.png">

<p>比如对于 Log4jImpl 的实现来说，该实现持有了 org.apache.log4j.Logger 的实例，然后所有的日志方法，均委托该实例来实现。</p>
<figure class="highlight processing"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> class Log4jImpl implements Log &#123;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">String</span> FQCN = Log4jImpl.class.getName();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> Logger <span class="built_in">log</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> Log4jImpl(<span class="keyword">String</span> clazz) &#123;</span><br><span class="line">    <span class="built_in">log</span> = Logger.getLogger(clazz);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="built_in">boolean</span> isDebugEnabled() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">log</span>.isDebugEnabled();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="built_in">boolean</span> isTraceEnabled() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">log</span>.isTraceEnabled();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> error(<span class="keyword">String</span> s, Throwable e) &#123;</span><br><span class="line">    <span class="built_in">log</span>.<span class="built_in">log</span>(FQCN, Level.ERROR, s, e);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> error(<span class="keyword">String</span> s) &#123;</span><br><span class="line">    <span class="built_in">log</span>.<span class="built_in">log</span>(FQCN, Level.ERROR, s, <span class="keyword">null</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> debug(<span class="keyword">String</span> s) &#123;</span><br><span class="line">    <span class="built_in">log</span>.<span class="built_in">log</span>(FQCN, Level.DEBUG, s, <span class="keyword">null</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> trace(<span class="keyword">String</span> s) &#123;</span><br><span class="line">    <span class="built_in">log</span>.<span class="built_in">log</span>(FQCN, Level.TRACE, s, <span class="keyword">null</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> warn(<span class="keyword">String</span> s) &#123;</span><br><span class="line">    <span class="built_in">log</span>.<span class="built_in">log</span>(FQCN, Level.WARN, s, <span class="keyword">null</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="装饰者模式"><a href="#装饰者模式" class="headerlink" title="装饰者模式"></a>装饰者模式</h2><p>装饰模式(Decorator Pattern) ：动态地给一个对象增加一些额外的职责(Responsibility)，就增加对象功能来说，装饰模式比生成子类实现更为灵活。其别名也可以称为包装器(Wrapper)，与适配器模式的别名相同，但它们适用于不同的场合。根据翻译的不同，装饰模式也有人称之为“油漆工模式”，它是一种对象结构型模式。</p>
<img src="/2019/08/21/MyBatis常用的设计模式/des12.png">

<h3 id="装饰者模式-1"><a href="#装饰者模式-1" class="headerlink" title="装饰者模式"></a>装饰者模式</h3><p>在 MyBatis 中，缓存的功能由根接口Cache（org.apache.ibatis.cache.Cache）定义。整个体系采用装饰器设计模式，数据存储和缓存的基本功能由 PerpetualCache（org.apache.ibatis.cache.impl.PerpetualCache）永久缓存实现，然后通过一系列的装饰器来对 PerpetualCache 永久缓存进行缓存策略等方便的控制。如下图：</p>
<img src="/2019/08/21/MyBatis常用的设计模式/des13.png">

<h3 id="Cache"><a href="#Cache" class="headerlink" title="Cache"></a>Cache</h3><p>用于装饰 PerpetualCache 的标准装饰器共有8个（全部在 org.apache.ibatis.cache.decorators 包中）：</p>
<ol>
<li>FifoCache：先进先出算法，缓存回收策略  </li>
<li>LoggingCache：输出缓存命中的日志信息  </li>
<li>LruCache：最近最少使用算法，缓存回收策略  </li>
<li>ScheduledCache：调度缓存，负责定时清空缓存  </li>
<li>SerializedCache：缓存序列化和反序列化存储  </li>
<li>SoftCache：基于软引用实现的缓存管理策略  </li>
<li>SynchronizedCache：同步的缓存装饰器，用于防止多线程并发访问  </li>
<li>WeakCache：基于弱引用实现的缓存管理策略</li>
</ol>
<p>另外，还有一个特殊的装饰器 TransactionalCache：事务性的缓存</p>
<p>正如大多数持久层框架一样，MyBatis 缓存同样分为一级缓存和二级缓存</p>
<ul>
<li>一级缓存，又叫本地缓存，是 PerpetualCache 类型的永久缓存，保存在执行器中（BaseExecutor），而执行器又在 SqlSession（DefaultSqlSession） 中，所以一级缓存的生命周期与 SqlSession 是相同的。</li>
<li>二级缓存，又叫自定义缓存，实现了 Cache 接口的类都可以作为二级缓存，所以可配置如 encache 等的第三方缓存。二级缓存以 namespace 名称空间为其唯一标识，被保存在 Configuration 核心配置对象中。</li>
</ul>
<p>二级缓存对象的默认类型为 PerpetualCache ，如果配置的缓存是默认类型，则 MyBatis 会根据配置自动追加一系列装饰器。</p>
<p>Cache对象之间的引用顺序为：</p>
<p>SynchronizedCache–&gt;LoggingCache–&gt;SerializedCache–&gt;ScheduledCache–&gt;LruCache–&gt;PerpetualCache</p>
<h2 id="迭代器模式"><a href="#迭代器模式" class="headerlink" title="迭代器模式"></a>迭代器模式</h2><p>迭代器（Iterator）模式，又叫做游标（Cursor）模式。GOF 给出的定义为：提供一种方法访问一个容器（container）对象中各个元素，而又不需暴露该对象的内部细节。</p>


<p>Java 的 Iterator 就是迭代器模式的接口，只要实现了该接口，就相当于应用了迭代器模式：</p>
<img src="/2019/08/21/MyBatis常用的设计模式/des15.png">

<p>比如 MyBatis 的 PropertyTokenizer 是 property 包中的重量级类，该类会被 reflection 包中其他的类频繁的引用到。这个类实现了 Iterator 接口，在使用时经常被用到的是 Iterator 接口中的 hasNext 这个函数。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PropertyTokenizer</span> <span class="keyword">implements</span> <span class="title">Iterable</span>&lt;<span class="title">PropertyTokenizer</span>&gt;, <span class="title">Iterator</span>&lt;<span class="title">PropertyTokenizer</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="keyword">private</span> String indexedName;</span><br><span class="line">  <span class="keyword">private</span> String index;</span><br><span class="line">  <span class="keyword">private</span> String children;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">PropertyTokenizer</span><span class="params">(String fullname)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> delim = fullname.indexOf(<span class="string">'.'</span>);</span><br><span class="line">    <span class="keyword">if</span> (delim &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">      name = fullname.substring(<span class="number">0</span>, delim);</span><br><span class="line">      children = fullname.substring(delim + <span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      name = fullname;</span><br><span class="line">      children = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    indexedName = name;</span><br><span class="line">    delim = name.indexOf(<span class="string">'['</span>);</span><br><span class="line">    <span class="keyword">if</span> (delim &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">      index = name.substring(delim + <span class="number">1</span>, name.length() - <span class="number">1</span>);</span><br><span class="line">      name = name.substring(<span class="number">0</span>, delim);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getIndex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> index;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getIndexedName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> indexedName;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getChildren</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> children;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> children != <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> PropertyTokenizer <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> PropertyTokenizer(children);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">"Remove is not supported, as it has no meaning in the context of properties."</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Iterator&lt;PropertyTokenizer&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到，这个类传入一个字符串到构造函数，然后提供了 iterator 方法对解析后的子串进行遍历，是一个很常用的方法类。</p>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>MyBatis</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringMVC核心技术</title>
    <url>/2019/08/17/SpringMVC%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>SpringMVC 以 DispatcherServlet 为核心，负责协调和组织不同组件以完成请求处理并返回响应的工作，实现了 MVC 模式。</p>
<a id="more"></a>

<h2 id="请求转发与重定向"><a href="#请求转发与重定向" class="headerlink" title="请求转发与重定向"></a>请求转发与重定向</h2><p>当处理器对请求处理完毕后，向其它资源进行跳转时，有两种跳转方式：请求转发与重定向。而根据所要跳转的资源类型，又可分为两类：跳转到页面与跳转到其它处理器。</p>
<blockquote>
<p>注意：<br>对于请求转发的页面，可以是WEB-INF中页面；而重定向的页面，是不能为WEB-INF中页的。因为重定向相当于用户再次发出一次请求，而用户是不能直接访问 WEB-INF 中资源的。</p>
</blockquote>
<img src="/2019/08/17/SpringMVC核心技术/core01.png">


<h3 id="返回-ModelAndView-时的请求转发"><a href="#返回-ModelAndView-时的请求转发" class="headerlink" title="返回 ModelAndView 时的请求转发"></a>返回 ModelAndView 时的请求转发</h3><p>默认情况下， 当处理器方法返回 ModelAndView 时，跳转到指定的 View，使用的是请求转发。但也可显式的进行指出，此时，需在 setViewName()指定的视图前添加 forward:，且此时的视图不会再与视图解析器中的前辍与后辍进行拼接。即必须写出相对于项目根的路径。</p>
<p>相关知识请查看之前的文章：<br><a href="https://www.huangyuanzhi.top/2019/08/14/SpringMVC%E9%85%8D%E7%BD%AE%E5%BC%8F%E5%BC%80%E5%8F%91/#more" title="Spring配置式开发">Spring配置式开发</a><br><a href="https://www.huangyuanzhi.top/2019/08/15/SpringMVC%E6%B3%A8%E8%A7%A3%E5%BC%8F%E5%BC%80%E5%8F%91/#more" title="SpringMVC注解式开发">SpringMVC注解式开发</a> </p>
<h4 id="1-请求转发到页面"><a href="#1-请求转发到页面" class="headerlink" title="1. 请求转发到页面"></a>1. 请求转发到页面</h4><p>当通过请求转发跳转到目标资源（页面或 Controller）时，若需要向下传递数据，除了可以使用 request， session 外，还可以将数据存放于 ModelAndView 中的 Model 中。页面通过 EL 表达式可直接访问该数据。</p>
<img src="/2019/08/17/SpringMVC核心技术/core02.png">


<h4 id="2-请求转发到其它-Controller"><a href="#2-请求转发到其它-Controller" class="headerlink" title="2. 请求转发到其它 Controller"></a>2. 请求转发到其它 Controller</h4><img src="/2019/08/17/SpringMVC核心技术/core03.png">


<h3 id="返回-ModelAndView-时的重定向"><a href="#返回-ModelAndView-时的重定向" class="headerlink" title="返回 ModelAndView 时的重定向"></a>返回 ModelAndView 时的重定向</h3><p>返回 ModelAndView 时的重定向，需在 setViewName()指定的视图前添加 redirect:，且此时的视图不会再与视图解析器中的前辍与后辍进行拼接。即必须写出相对于项目根的路径。</p>
<h4 id="1-重定向到页面"><a href="#1-重定向到页面" class="headerlink" title="1. 重定向到页面"></a>1. 重定向到页面</h4><p>在重定向时，请求参数是无法通过 request 的属性向下一级资源中传递的。但可以通过以下方式将请求参数向下传递。</p>
<p>（1） 通过 ModelAndView 的 Model 携带参数</p>
<p>当 ModelAndView 中的 Model 存入数据后，视图解析器 InternalResourceViewResolver 会将 map 中的 key 与 value，以请求参数的形式放到请求的 URL 后。</p>
<ul>
<li>由于视图解析器会将 Map 的 value 放入到 URL 后作为请求参数传递出去，所以无论什么类型的 value，均会变为 String。故此， 放入到 Model 中的 value，只能是基本数据类型与 String，不能是自定义类型的对象数据。  </li>
<li>重定向的面页中是无法从 request 中读取数据的。但由于 map 中的 key 与 value，以请求参数的形式放到了请求的 URL 后，所以，页面可以通过 EL 表达式中的请求参数 param 读取。  </li>
<li>重定向的页面不能是/WEB-INF 中的页面。</li>
</ul>
<img src="/2019/08/17/SpringMVC核心技术/core04.png">

<p>（2） 使用 HttpSession 携带参数</p>
<img src="/2019/08/17/SpringMVC核心技术/core05.png">


<h4 id="2-重定向到-Controller"><a href="#2-重定向到-Controller" class="headerlink" title="2. 重定向到 Controller"></a>2. 重定向到 Controller</h4><p>重定向到其它 Controller 时，若要携带参数， 完全可以采用前面的方式。而对于目标 Controller 接收这些参数，则各不相同。</p>
<p>（1） 通过 ModelAndView 的 Model 携带参数</p>
<p>目标 Controller 在接收这些参数时， 只要保证目标 Controller 的方法形参名称与发送 Controller发送的参数名称相同即可接收。当然，目标Controller也可以进行参数的整体接收。只要保证参数名称与目标 Controller 接收参数类型的属性名相同即可。</p>
<img src="/2019/08/17/SpringMVC核心技术/core06.png">

<p>（2） 使用 HttpSession 携带参数</p>
<img src="/2019/08/17/SpringMVC核心技术/core07.png">


<h3 id="返回-String-时的请求转发"><a href="#返回-String-时的请求转发" class="headerlink" title="返回 String 时的请求转发"></a>返回 String 时的请求转发</h3><p>当处理器方法返回 String 时，该 String 即为要跳转的视图。 在其前面加上前辍 forward:，则可显式的指定跳转方式为请求转发。 同样，视图解析器不会对其进行前辍与后辍的拼接。请求转发的目标资源无论是一个页面，还是一个 Controller，用法相同。</p>
<blockquote>
<p>注意：<br>此时不能再使用 ModelAndView 传递数据了。因为在处理器方法中定义的 ModelAndView 对象就是个局部变量，方法运行结束，变量销毁。而当前的处理器方法返回的为 String，而非 ModelAndView，所以 ModelAndView 不起作用了。</p>
</blockquote>
<img src="/2019/08/17/SpringMVC核心技术/core08.png">


<h3 id="返回-String-时的重定向"><a href="#返回-String-时的重定向" class="headerlink" title="返回 String 时的重定向"></a>返回 String 时的重定向</h3><p>当重定向到目标资源时，若需要向下传递参数值，除了可以直接通过请求 URL 携带参数，通过 HttpSession 携带参数外，还可使用其它方式。</p>
<h4 id="1-重定向到页面-1"><a href="#1-重定向到页面-1" class="headerlink" title="1. 重定向到页面"></a>1. 重定向到页面</h4><p>（1） 通过 Model 形参携带参数</p>
<p>可以在 Controller 形参中添加 Model 参数，将要传递的数据放入 Model 中进行参数传递。该方式同样也是将参数拼接到了重定向请求的 URL 后，所以放入其中的数据只能是基本类型数据，不能是自定义类型。</p>
<img src="/2019/08/17/SpringMVC核心技术/core09.png">

<p>（2） 通过形参 RedirectAttributes 的 addAttribute()携带参数</p>
<p>RedirectAttributes 是一个继承自 Model 的接口，其底层仍然使用 ModelMap 实现。通过 addAttribute()方法会将参数名及参数值放入该 Map 中，然后视图解析器会将其拼接到请求的 URL 中。 所以，这种携带参数的方式，不能携带自定义对象。</p>
<img src="/2019/08/17/SpringMVC核心技术/core10.png">


<h4 id="2-重定向到-Controller-1"><a href="#2-重定向到-Controller-1" class="headerlink" title="2. 重定向到 Controller"></a>2. 重定向到 Controller</h4><p>重定向到 Controller 时，携带参数的方式，除了可以使用请求 URL 后携带方式， HttpSession携带方式， Model 形参携带方式，及 RedirectAttributes 形参的 addAttibute()携带方式外，还可以使用 RedirectAttributes 形参的 addFlushAttibute()携带方式。</p>
<p>（1） 通过 Model 形参携带参数</p>
<img src="/2019/08/17/SpringMVC核心技术/core11.png">

<p>（2） 通过形参 RedirectAttributes 的 addFlushAttribute()携带参数</p>
<p>RedirectAttributes 形参的 addFlushAttibute()携带方式不会将放入其中的属性值通过请求 URL 传递， 所以其中可以存放任意对象。</p>
<img src="/2019/08/17/SpringMVC核心技术/core12.png">


<h3 id="返回-void-时的请求转发"><a href="#返回-void-时的请求转发" class="headerlink" title="返回 void 时的请求转发"></a>返回 void 时的请求转发</h3><p>当处理器方法返回 void 时，若要实现请求转发，则需要使用 HttpServletRequest 的请求转发方法。 无论下一级资源是页面，还是 Controller，用法相同。</p>
<blockquote>
<p>注意：<br>若有数据需要向下一级资源传递，则需要将数据放入到 request 或 session 中。 不能将数据放到 Model、 RedirectAttributes 中。 </p>
</blockquote>
<img src="/2019/08/17/SpringMVC核心技术/core13.png">


<h3 id="返回-void-时的重定向"><a href="#返回-void-时的重定向" class="headerlink" title="返回 void 时的重定向"></a>返回 void 时的重定向</h3><p>当处理器方法返回 void 时，若要实现重定向，则需要使用 HttpServletResponse 的重定向方法 sendRedirect()。</p>
<blockquote>
<p>注意：<br>若有数据需要向下一级资源传递，则需要将数据放入到 session 中。</p>
</blockquote>
<img src="/2019/08/17/SpringMVC核心技术/core14.png">


<h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><h3 id="1-SimpleMappingExceptionResolver-异常处理器"><a href="#1-SimpleMappingExceptionResolver-异常处理器" class="headerlink" title="1. SimpleMappingExceptionResolver 异常处理器"></a>1. SimpleMappingExceptionResolver 异常处理器</h3><p>该方式只需要在 SpringMVC 配置文件中注册该异常处理器 Bean 即可。该 Bean 比较特殊，没有 id 属性，无需显式调用或被注入给其它&lt;bean/&gt;，当异常发生时会自动执行该类。</p>
<blockquote>
<p>缺点：<br>在捕获到指定异常时，不能执行一些操作</p>
</blockquote>
<p>（1） 自定义异常类</p>
<p>定义三个异常类： NameException、 AgeException、 StudentException。其中 StudentException 是另外两个异常的父类。</p>
<img src="/2019/08/17/SpringMVC核心技术/core15.png">

<p>（2） 定义处理器</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">@Controller		<span class="comment">//表示当前类是一个处理器</span></span><br><span class="line">@<span class="constructor">RequestMapping(<span class="string">"/test"</span>)</span>	<span class="comment">//命名空间</span></span><br><span class="line">public <span class="keyword">class</span> MyController  &#123;</span><br><span class="line"></span><br><span class="line">	@<span class="constructor">RequestMapping(<span class="string">"/register.do"</span>)</span></span><br><span class="line">	<span class="comment">//底层使用类型转换器</span></span><br><span class="line">	public ModelAndView <span class="keyword">do</span><span class="constructor">Register(String <span class="params">name</span>,<span class="params">int</span> <span class="params">age</span>)</span> throws StudentException &#123;</span><br><span class="line">		</span><br><span class="line"><span class="comment">//		int i = 3 / 0;</span></span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span> (!<span class="string">"huang"</span>.equals(name)) &#123;</span><br><span class="line">			throw <span class="keyword">new</span> <span class="constructor">NameException(<span class="string">"用户名不正确!"</span>)</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (age &gt; <span class="number">60</span>) &#123;</span><br><span class="line">			throw <span class="keyword">new</span> <span class="constructor">AgeException(<span class="string">"年龄太大了!"</span>)</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		ModelAndView mv = <span class="keyword">new</span> <span class="constructor">ModelAndView()</span>;</span><br><span class="line">		mv.add<span class="constructor">Object(<span class="string">"name"</span>,<span class="params">name</span>)</span>;</span><br><span class="line">		mv.add<span class="constructor">Object(<span class="string">"age"</span>,<span class="params">age</span>)</span>;</span><br><span class="line">		mv.set<span class="constructor">ViewName(<span class="string">"/WEB-INF/jsp/welcome.jsp"</span>)</span>;</span><br><span class="line">		return mv;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（3） 注册异常处理器</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置异常处理器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.handler.SimpleMappingExceptionResolver"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"defaultErrorView"</span> <span class="attr">value</span>=<span class="string">"errors/error.jsp"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"exceptionAttribute"</span> <span class="attr">value</span>=<span class="string">"ex"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"exceptionMappings"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"com.huang.exceptions.NameException"</span>&gt;</span>/errors/nameError.jsp<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"com.huang.exceptions.AgeException"</span>&gt;</span>/errors/ageError.jsp<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>exceptionMappings： Properties 类型属性，用于指定具体的不同类型的异常所对应的异常响应页面。 Key 为异常类的全限定性类名， value 则为响应页面路径。  </li>
<li>defaultErrorView：指定默认的异常响应页面。若发生的异常不是 exceptionMappings 中指定的异常，则使用默认异常响应页面。  </li>
<li>exceptionAttribute：捕获到的异常对象。一般异常响应页面中使用。</li>
</ul>
<p>（4） 定义异常响应页面</p>
<p>在 WebRoot 下新建一个目录 errors，在其中定义三个异常响应页面。</p>
<img src="/2019/08/17/SpringMVC核心技术/core16.png">

<p>（5） 运行结果</p>
<img src="/2019/08/17/SpringMVC核心技术/core17.png">

<img src="/2019/08/17/SpringMVC核心技术/core18.png">

<img src="/2019/08/17/SpringMVC核心技术/core19.png">


<h3 id="2-自定义异常处理器"><a href="#2-自定义异常处理器" class="headerlink" title="2. 自定义异常处理器"></a>2. 自定义异常处理器</h3><p>自定义异常处理器，需要实现 HandlerExceptionResolver 接口，并且该类需要在 SpringMVC 配置文件中进行注册。</p>
<p>（1） 定义异常处理器</p>
<p>当一个类实现了 HandlerExceptionResolver 接口后，只要有异常发生，无论什么异常，都会自动执行接口方法 resolveException()。</p>
<figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyHandlerExceptionResolver</span> <span class="keyword">implements</span> <span class="title">HandlerExceptionResolver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> ModelAndView resolveException(HttpServletRequest request, HttpServletResponse response, Object <span class="keyword">handler</span>,</span><br><span class="line">			Exception ex) &#123;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//将异常对象加入数据模型中</span></span><br><span class="line">		ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">		mv.addObject(<span class="string">"ex"</span>,ex);</span><br><span class="line">		<span class="comment">//这是默认错误响应界面</span></span><br><span class="line">		mv.setViewName(<span class="string">"/errors/error.jsp"</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//设置NameException响应界面</span></span><br><span class="line">		<span class="keyword">if</span> (ex <span class="keyword">instanceof</span> NameException) &#123;</span><br><span class="line">			mv.setViewName(<span class="string">"/errors/nameError.jsp"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//设置AgeException响应界面</span></span><br><span class="line">		<span class="keyword">if</span> (ex <span class="keyword">instanceof</span> AgeException) &#123;</span><br><span class="line">			mv.setViewName(<span class="string">"/errors/ageError.jsp"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> mv;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>（2） 注册异常处理器</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 注册异常处理器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.huang.resolvers.MyHandlerExceptionResolver"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-异常处理注解"><a href="#3-异常处理注解" class="headerlink" title="3. 异常处理注解"></a>3. 异常处理注解</h3><p>使用注解@ExceptionHandler 可以将一个方法指定为异常处理方法。该注解只有一个可选属性 value，为一个 Class&lt;?&gt;数组，用于指定该注解的方法所要处理的异常类，即所要匹配的异常。</p>
<p>（1） 定义异常处理的 Controller</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">@Controller</span><br><span class="line">public <span class="keyword">class</span> BaseController &#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 处理NameException异常</span></span><br><span class="line">	@<span class="constructor">ExceptionHandler(NameException.<span class="params">class</span>)</span></span><br><span class="line">	public ModelAndView handler<span class="constructor">NameException(Exception <span class="params">ex</span>)</span> &#123;</span><br><span class="line">		ModelAndView mv = <span class="keyword">new</span> <span class="constructor">ModelAndView()</span>;</span><br><span class="line">		mv.add<span class="constructor">Object(<span class="string">"ex"</span>,<span class="params">ex</span>)</span>;</span><br><span class="line">		mv.set<span class="constructor">ViewName(<span class="string">"/errors/nameError.jsp"</span>)</span>;</span><br><span class="line">		return mv;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 处理AgeException异常</span></span><br><span class="line">	@<span class="constructor">ExceptionHandler(AgeException.<span class="params">class</span>)</span></span><br><span class="line">	public ModelAndView handler<span class="constructor">AgeException(Exception <span class="params">ex</span>)</span> &#123;</span><br><span class="line">		ModelAndView mv = <span class="keyword">new</span> <span class="constructor">ModelAndView()</span>;</span><br><span class="line">		mv.add<span class="constructor">Object(<span class="string">"ex"</span>,<span class="params">ex</span>)</span>;</span><br><span class="line">		mv.set<span class="constructor">ViewName(<span class="string">"/errors/ageError.jsp"</span>)</span>;</span><br><span class="line">		return mv;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 处理其它异常</span></span><br><span class="line">	@ExceptionHandler</span><br><span class="line">	public ModelAndView handler<span class="constructor">Exception(Exception <span class="params">ex</span>)</span> &#123;</span><br><span class="line">		ModelAndView mv = <span class="keyword">new</span> <span class="constructor">ModelAndView()</span>;</span><br><span class="line">		mv.add<span class="constructor">Object(<span class="string">"ex"</span>,<span class="params">ex</span>)</span>;</span><br><span class="line">		mv.set<span class="constructor">ViewName(<span class="string">"/errors/error.jsp"</span>)</span>;</span><br><span class="line">		return mv;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（2） 修改 Controller</p>
<img src="/2019/08/17/SpringMVC核心技术/core20.png">

<p>（3） 修改 springmvc 配置文件</p>
<img src="/2019/08/17/SpringMVC核心技术/core21.png">


<h2 id="类型转换器"><a href="#类型转换器" class="headerlink" title="类型转换器"></a>类型转换器</h2><p>表单提交的无论是 int 还是 double 类型的请求参数，用于处理该请求的处理器方法的形参，均可直接接收到相应类型的相应数据，而非接收到 String 再手工转换。那是因为在 SpringMVC 框架中， 有默认的类型转换器。这些默认的类型转换器，可以将 String 类型的数据，自动转换为相应类型的数据。</p>
<h3 id="自定义类型转换器"><a href="#自定义类型转换器" class="headerlink" title="自定义类型转换器"></a>自定义类型转换器</h3><p>若要定义类型转换器，则需要实现 Converter 接口。 该 Converter 接口有两个泛型：第一个为待转换的类型，第二个为目标类型。而该接口的方法 convert()，用于完成类型转换。</p>
<p>（1） 实现 Converter 接口</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Converter接口中的两个泛型表示：</span></span><br><span class="line"><span class="comment">//第一个：表示源的类型</span></span><br><span class="line"><span class="comment">//第二个：表示宿的类型，即转换为的目标类型</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> MyDateConverter <span class="keyword">implements</span> Converter&lt;<span class="built_in">String</span>, <span class="built_in">Date</span>&gt; &#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="built_in">Date</span> convert(<span class="built_in">String</span> source) &#123;</span><br><span class="line">		SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>);</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> sdf.parse(source);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（2） 修改 springmvc 配置文件</p>
<p>在 SpringMVC 的配置文件中对类型转换进行配置，首先要注册类型转换器，然后再注册一个转换服务 Bean。将类型转换器注入给该转换服务 Bean。最后由处理器适配器来使用该转换服务 Bean。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 注册组件扫描器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.huang.handlers"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 注册类型转换器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myDateConverter"</span> <span class="attr">class</span>=<span class="string">"com.huang.converters.MyDateConverter"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 注册转换服务对象：创建转换服务 Bean --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"conversionService"</span> <span class="attr">class</span>=<span class="string">"org.springframework.context.support.ConversionServiceFactoryBean"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"converters"</span> <span class="attr">ref</span>=<span class="string">"myDateConverter"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 注册mvc注解驱动： 使用转换服务 Bean--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span> <span class="attr">conversion-service</span>=<span class="string">"conversionService"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>（3） 修改处理器、目标文件、index页面</p>
<img src="/2019/08/17/SpringMVC核心技术/core22.png">

<p>（4） 运行结果</p>
<img src="/2019/08/17/SpringMVC核心技术/core23.png">


<h3 id="接收多种日期格式的类型转换器"><a href="#接收多种日期格式的类型转换器" class="headerlink" title="接收多种日期格式的类型转换器"></a>接收多种日期格式的类型转换器</h3><p>采用下面这种方法，日期格式可以为 yyyy-MM-dd、yyyy/MM/dd 或 yyyyMMdd，修改类型转换器：</p>
<figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyDateConverter</span> <span class="keyword"><span class="keyword">implements</span> <span class="type">Converter</span></span>&lt;<span class="title">String</span>, <span class="title">Date</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">	@Override</span><br><span class="line">	<span class="keyword">public</span> Date convert(<span class="keyword">String</span> source) &#123;</span><br><span class="line">		SimpleDateFormat sdf = getDateFormat(source);</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> sdf.parse(source);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> SimpleDateFormat getDateFormat(<span class="keyword">String</span> source) &#123;</span><br><span class="line">		SimpleDateFormat sdf = <span class="keyword">new</span> <span class="type">SimpleDateFormat</span>();</span><br><span class="line">		</span><br><span class="line">			<span class="comment">//日期格式为 yyyy-MM-dd</span></span><br><span class="line">		<span class="keyword">if</span> (Pattern.matches(<span class="string">"^\\d&#123;4&#125;-\\d&#123;2&#125;-\\d&#123;2&#125;$"</span>,source)) &#123;</span><br><span class="line">			sdf = <span class="keyword">new</span> <span class="type">SimpleDateFormat</span>(<span class="string">"yyyy-MM-dd"</span>);</span><br><span class="line">			</span><br><span class="line">			<span class="comment">//日期格式为 yyyy/MM/dd</span></span><br><span class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span> (Pattern.matches(<span class="string">"^\\d&#123;4&#125;/\\d&#123;2&#125;/\\d&#123;2&#125;$"</span>,source)) &#123;</span><br><span class="line">			sdf = <span class="keyword">new</span> <span class="type">SimpleDateFormat</span>(<span class="string">"yyyy/MM/dd"</span>);</span><br><span class="line">		</span><br><span class="line">			<span class="comment">//日期格式为 yyyyMMdd</span></span><br><span class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span> (Pattern.matches(<span class="string">"^\\d&#123;4&#125;\\d&#123;2&#125;\\d&#123;2&#125;$"</span>,source)) &#123;</span><br><span class="line">			sdf = <span class="keyword">new</span> <span class="type">SimpleDateFormat</span>(<span class="string">"yyyyMMdd"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> sdf;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="数据回显"><a href="#数据回显" class="headerlink" title="数据回显"></a>数据回显</h3><p>当数据类型转换发生异常后，需要返回到表单页面，让用户重新填写。但正常情况下，发生类型转换异常，系统会自动跳转到 400 页面。所以，若要在发生类型转换异常后，跳转到指定页面，则需要将异常捕获，然后通过异常处理器跳转到指定页面。</p>
<p>（1） 修改处理器</p>
<p>数据回显原理： 在异常处理器中， 通过 request.getParameter()将用户输入的表单原始数据获取到后，直接放入到 ModelAndView 中的 Model 中，然后从要转向的页面中就可以直接通过 EL 表达式读取出，也就实现了数据回显。</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">@<span class="constructor">ExceptionHandler(TypeMismatchException.<span class="params">class</span>)</span></span><br><span class="line">public ModelAndView <span class="keyword">exception</span><span class="constructor">Resolver(HttpServletRequest <span class="params">request</span>, Exception <span class="params">ex</span>)</span> &#123;</span><br><span class="line">	ModelAndView mv = <span class="keyword">new</span> <span class="constructor">ModelAndView()</span>;</span><br><span class="line">	mv.add<span class="constructor">Object(<span class="string">"ex"</span>,<span class="params">ex</span>)</span>;</span><br><span class="line">	</span><br><span class="line">	String age = request.get<span class="constructor">Parameter(<span class="string">"age"</span>)</span>;</span><br><span class="line">	String birthday = request.get<span class="constructor">Parameter(<span class="string">"birthday"</span>)</span>;</span><br><span class="line">	</span><br><span class="line">	mv.add<span class="constructor">Object(<span class="string">"age"</span>, <span class="params">age</span>)</span>;</span><br><span class="line">	mv.add<span class="constructor">Object(<span class="string">"birthday"</span>, <span class="params">birthday</span>)</span>;</span><br><span class="line">	mv.set<span class="constructor">ViewName(<span class="string">"/index.jsp"</span>)</span>;</span><br><span class="line">	return mv;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（2） 修改页面表单</p>
<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml">$</span><span class="template-variable">&#123;ex.message &#125;</span><span class="xml"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line"><span class="xml"> <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;pageContext.request.contextPath &#125;</span><span class="xml"><span class="tag"><span class="string">/test/register.do"</span> <span class="attr">method</span>=<span class="string">"POST"</span>&gt;</span></span></span><br><span class="line"><span class="xml">  	年龄：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;age &#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line"><span class="xml">  	生日：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"birthday"</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;birthday &#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line"><span class="xml">  	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"注册"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>（3） 修改类型转换器</p>
<figure class="highlight ceylon"><table><tr><td class="code"><pre><span class="line">	<span class="comment">//抛出一个类型匹配异常。</span></span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">	<span class="keyword">throw</span> <span class="keyword">new</span> TypeMismatchException(<span class="string">""</span>,Date.<span class="keyword">class</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（4） 运行结果</p>
<img src="/2019/08/17/SpringMVC核心技术/core24.png">

<img src="/2019/08/17/SpringMVC核心技术/core25.png">


<h3 id="自定义类型转换失败后提示信息"><a href="#自定义类型转换失败后提示信息" class="headerlink" title="自定义类型转换失败后提示信息"></a>自定义类型转换失败后提示信息</h3><p>SpringMVC 并没有专门的用于自定义类型转换失败后提示信息的功能。需要程序员自己实现。</p>
<p>（1） 修改处理器</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">@<span class="constructor">ExceptionHandler(TypeMismatchException.<span class="params">class</span>)</span></span><br><span class="line">public ModelAndView <span class="keyword">exception</span><span class="constructor">Resolver(HttpServletRequest <span class="params">request</span>, Exception <span class="params">ex</span>)</span> &#123;</span><br><span class="line">	ModelAndView mv = <span class="keyword">new</span> <span class="constructor">ModelAndView()</span>;</span><br><span class="line">	</span><br><span class="line">	String age = request.get<span class="constructor">Parameter(<span class="string">"age"</span>)</span>;</span><br><span class="line">	String birthday = request.get<span class="constructor">Parameter(<span class="string">"birthday"</span>)</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 捕获到的异常信息</span></span><br><span class="line">	String errorMSG = ex.get<span class="constructor">Message()</span>;</span><br><span class="line">	<span class="keyword">if</span>(errorMSG.contains(age)) &#123;</span><br><span class="line">		mv.add<span class="constructor">Object(<span class="string">"ageErrors"</span>, <span class="string">"年龄输入有误"</span>)</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(errorMSG.contains(birthday)) &#123;</span><br><span class="line">		mv.add<span class="constructor">Object(<span class="string">"birthErrors"</span>, <span class="string">"日期输入有误"</span>)</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	mv.add<span class="constructor">Object(<span class="string">"age"</span>, <span class="params">age</span>)</span>;</span><br><span class="line">	mv.add<span class="constructor">Object(<span class="string">"birthday"</span>, <span class="params">birthday</span>)</span>;</span><br><span class="line">	mv.add<span class="constructor">Object(<span class="string">"ex"</span>, <span class="params">ex</span>)</span>;</span><br><span class="line">	mv.set<span class="constructor">ViewName(<span class="string">"/index.jsp"</span>)</span>;</span><br><span class="line">	return mv;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（2） 修改页面表单</p>
<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml">	$</span><span class="template-variable">&#123;ex.message &#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;pageContext.request.contextPath &#125;</span><span class="xml"><span class="tag"><span class="string">/test/register.do"</span> <span class="attr">method</span>=<span class="string">"POST"</span>&gt;</span></span></span><br><span class="line"><span class="xml">  	年龄：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;age &#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span>$</span><span class="template-variable">&#123;ageErrors &#125;</span><span class="xml"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line"><span class="xml">  	生日：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"birthday"</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;birthday &#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span>$</span><span class="template-variable">&#123;birthErrors &#125;</span><span class="xml"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line"><span class="xml">  	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"注册"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>（3） 运行结果</p>
<img src="/2019/08/17/SpringMVC核心技术/core26.png">

<img src="/2019/08/17/SpringMVC核心技术/core27.png">


<h2 id="数据验证"><a href="#数据验证" class="headerlink" title="数据验证"></a>数据验证</h2><p>在 Web 应用程序中，为了防止客户端传来的数据引发程序的异常，常常需要对数据进行验证。输入验证分为客户端验证与服务器端验证。客户端验证主要通过 JavaScript 脚本进行，而服务器端验证则主要是通过 Java 代码进行验证。为了保证数据的安全性，一般情况下，客户端验证与服务器端验证都是要进行的。</p>
<p>需求：要求用户输入的表单数据满足如下要求：<br>姓名：非空，且长度 3-6 个字符<br>成绩： 0-100 分<br>手机号：非空，且必须符合手机号格式</p>
<p>（1） 定义实体</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">Student</span> &#123;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	<span class="keyword">private</span> <span class="built_in">double</span> score;</span><br><span class="line">	<span class="keyword">private</span> String mobile;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（2） 在实体属性上添加验证注解</p>
<p>在注解的 message 属性中，可以使用{属性名}的方式来引用指定的注解的属性值。</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="comment">//姓名3~6个字符</span></span><br><span class="line"><span class="variable">@NotNull</span>(message=<span class="string">"姓名不能为空"</span>)</span><br><span class="line"><span class="variable">@Size</span>(min=<span class="number">3</span>, max=<span class="number">6</span>, message=<span class="string">"姓名长度应在&#123;min&#125;-&#123;max&#125;个字符"</span>)</span><br><span class="line">private String name;</span><br><span class="line"></span><br><span class="line"><span class="comment">//成绩0~100</span></span><br><span class="line"><span class="variable">@Min</span>(value=<span class="number">0</span>, message=<span class="string">"成绩不能小于&#123;value&#125;"</span>)</span><br><span class="line"><span class="variable">@Max</span>(value=<span class="number">100</span>, message=<span class="string">"成绩不能大于&#123;value&#125;"</span>)</span><br><span class="line">private double score;</span><br><span class="line"></span><br><span class="line"><span class="comment">//手机号格式：1[3/4/5/7/8]xxxxxxxxx</span></span><br><span class="line"><span class="variable">@NotNull</span>(message=<span class="string">"电话不能为空"</span>)</span><br><span class="line"><span class="variable">@Pattern</span>(regexp=<span class="string">"^1[34578]\\d&#123;9&#125;$"</span>, message=<span class="string">"手机号格式不正确"</span>)</span><br><span class="line">private String mobile;</span><br></pre></td></tr></table></figure>

<p>Hibernate Validator 中常用的验证注解介绍：</p>
<table>
<thead>
<tr>
<th align="center">序号</th>
<th align="left">验证注解</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="left">@AssertFalse</td>
<td align="left">验证注解的元素值是 false</td>
</tr>
<tr>
<td align="center">2</td>
<td align="left">@AssertTrue</td>
<td align="left">验证注解的元素值是 true</td>
</tr>
<tr>
<td align="center">3</td>
<td align="left">@DecimalMin（ value=x）</td>
<td align="left">验证注解的元素值小于等于指定的十进制 value 值</td>
</tr>
<tr>
<td align="center">4</td>
<td align="left">@DecimalMax（ value=x）</td>
<td align="left">验证注解的元素值大于等于指定的十进制 value 值</td>
</tr>
<tr>
<td align="center">5</td>
<td align="left">@Digits(integer=整数位数,fraction=小数位数)</td>
<td align="left">验证注解的元素值的整数位数和小数位数上限</td>
</tr>
<tr>
<td align="center">6</td>
<td align="left">@Future</td>
<td align="left">验证注解的元素值（日期类型）比当前时间晚</td>
</tr>
<tr>
<td align="center">7</td>
<td align="left">@Max（ value=x）</td>
<td align="left">验证注解的元素值小于等于指定的 value 值</td>
</tr>
<tr>
<td align="center">8</td>
<td align="left">@Min（ value=x）</td>
<td align="left">验证注解的元素值大于等于指定的 value 值</td>
</tr>
<tr>
<td align="center">9</td>
<td align="left">@NotNull</td>
<td align="left">验证注解的元素值不是 null</td>
</tr>
<tr>
<td align="center">10</td>
<td align="left">@Null</td>
<td align="left">验证注解的元素值是 null</td>
</tr>
<tr>
<td align="center">11</td>
<td align="left">@Past</td>
<td align="left">验证注解的元素值（日期类型）比当前时间早</td>
</tr>
<tr>
<td align="center">12</td>
<td align="left">@Pattern(regex=正则表达式)</td>
<td align="left">验证注解的元素值不指定的正则表达式匹配</td>
</tr>
<tr>
<td align="center">13</td>
<td align="left">@Size(min=最小值, max=最大值)</td>
<td align="left">验证注解的元素值的在 min 和 max（包含）指定区间之内，如字符长度、集合大小</td>
</tr>
<tr>
<td align="center">14</td>
<td align="left">@Valid</td>
<td align="left">验证关联的对象，如账户对象里有一个订单对象，指定验证订单对象</td>
</tr>
<tr>
<td align="center">15</td>
<td align="left">@NotEmpty</td>
<td align="left">验证注解的元素值不为 null 且丌为空（字符串长度丌为 0、集合大小丌为 0）</td>
</tr>
<tr>
<td align="center">16</td>
<td align="left">@Range(min=最小值, max=最大值)</td>
<td align="left">验证注解的元素值在最小值和最大值之间</td>
</tr>
<tr>
<td align="center">17</td>
<td align="left">@NotBlank</td>
<td align="left">验证注解的元素值不为空（不为 null、去除首位空格后长度为 0），不同于@NotEmpty， @NotBlank 只应用于字符串且在比较时会去除字符串的空格</td>
</tr>
<tr>
<td align="center">18</td>
<td align="left">@Length(min=下限, max=上限)</td>
<td align="left">验证注解的元素值长度在 min 和 max 区间内</td>
</tr>
<tr>
<td align="center">19</td>
<td align="left">@Email</td>
<td align="left">验证注解的元素值是 Email，也可以通过正则表达式和 flag 指定自定义的 email 格式</td>
</tr>
</tbody></table>
<p>（3） 定义 Controller</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">@Controller		<span class="comment">//表示当前类是一个处理器</span></span><br><span class="line">@<span class="constructor">RequestMapping(<span class="string">"/test"</span>)</span>	<span class="comment">//命名空间</span></span><br><span class="line">public <span class="keyword">class</span> MyController &#123;</span><br><span class="line"></span><br><span class="line">	@<span class="constructor">RequestMapping(<span class="string">"/register.do"</span>)</span></span><br><span class="line">	<span class="comment">//底层使用类型转换器</span></span><br><span class="line">	public ModelAndView <span class="keyword">do</span><span class="constructor">Register(@Validated Student <span class="params">student</span>,BindingResult <span class="params">br</span>)</span>  &#123;</span><br><span class="line">		ModelAndView mv = <span class="keyword">new</span> <span class="constructor">ModelAndView()</span>;</span><br><span class="line">		mv.add<span class="constructor">Object(<span class="string">"student"</span>,<span class="params">student</span>)</span>;</span><br><span class="line">		mv.set<span class="constructor">ViewName(<span class="string">"/WEB-INF/jsp/welcome.jsp"</span>)</span>;</span><br><span class="line">		</span><br><span class="line">		<span class="built_in">int</span> errorCount = br.get<span class="constructor">ErrorCount()</span>;</span><br><span class="line">		<span class="keyword">if</span> (errorCount &gt; <span class="number">0</span>) &#123;</span><br><span class="line">			FieldError nameError = br.get<span class="constructor">FieldError(<span class="string">"name"</span>)</span>;</span><br><span class="line">			FieldError scoreError = br.get<span class="constructor">FieldError(<span class="string">"score"</span>)</span>;</span><br><span class="line">			FieldError mobileError = br.get<span class="constructor">FieldError(<span class="string">"mobile"</span>)</span>;</span><br><span class="line">			</span><br><span class="line">			<span class="keyword">if</span> (nameError != null) &#123;</span><br><span class="line">				String nameErrorMSG = nameError.get<span class="constructor">DefaultMessage()</span>;</span><br><span class="line">				mv.add<span class="constructor">Object(<span class="string">"nameErrorMSG"</span>,<span class="params">nameErrorMSG</span>)</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (scoreError != null) &#123;</span><br><span class="line">				String scoreErrorMSG = scoreError.get<span class="constructor">DefaultMessage()</span>;</span><br><span class="line">				mv.add<span class="constructor">Object(<span class="string">"scoreErrorMSG"</span>,<span class="params">scoreErrorMSG</span>)</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (mobileError != null) &#123;</span><br><span class="line">				String mobileErrorMSG = mobileError.get<span class="constructor">DefaultMessage()</span>;</span><br><span class="line">				mv.add<span class="constructor">Object(<span class="string">"mobileErrorMSG"</span>,<span class="params">mobileErrorMSG</span>)</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			mv.set<span class="constructor">ViewName(<span class="string">"/index.jsp"</span>)</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		return mv;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>由于这里使用的验证器为 Bean 对象验证器，所以对于要验证的参数数据，需要打包后由处理器方法以 Bean 形参类型的方式接收，并使用@Validated 注解标注。注意， 不能将 @Validated 注解在 String 类型与基本类型的形参前。紧跟着@Validated 所注解的形参的后面，是一个 BindingResult 类型的形参。通过该形参可获取到所有验证异常信息。</p>
<p>BindingResult 接口中常用的方法有：</p>
<ul>
<li>getAllErrors()：获取到所有的异常信息。其返回值为 List，但若没有发生异常，则该 List 为也被创建，只不过其 size()为 0，而非 List 为 Null。  </li>
<li>getFieldError()：获取指定属性的异常信息。  </li>
<li>getErrorCount()：获取所有异常的数量。  </li>
<li>getRawFieldValue()：获取到用户输入的引发验证异常的原始值。</li>
</ul>
<p>（4） 定义 SpringMVC 配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">   <span class="comment">&lt;!-- 注册组件扫描器 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.huang.handlers"</span>/&gt;</span></span><br><span class="line">   </span><br><span class="line">   <span class="comment">&lt;!-- 生成验证器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myValidator"</span> <span class="attr">class</span>=<span class="string">"org.springframework.validation.beanvalidation.LocalValidatorFactoryBean"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"providerClass"</span> <span class="attr">value</span>=<span class="string">"org.hibernate.validator.HibernateValidator"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 注册mvc注解驱动 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span> <span class="attr">validator</span>=<span class="string">"myValidator"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>（5） 定义目标页面和 index 页面</p>
<p>空字符串转换成 double 类型会出错</p>
<img src="/2019/08/17/SpringMVC核心技术/core28.png">

<p>（6） 运行结果</p>
<img src="/2019/08/17/SpringMVC核心技术/core29.png">

<img src="/2019/08/17/SpringMVC核心技术/core30.png">

<img src="/2019/08/17/SpringMVC核心技术/core31.png">

<img src="/2019/08/17/SpringMVC核心技术/core32.png">

<img src="/2019/08/17/SpringMVC核心技术/core33.png">


<h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><h3 id="上传单个文件"><a href="#上传单个文件" class="headerlink" title="上传单个文件"></a>上传单个文件</h3><p>（1） 定义上传页面</p>
<p>定义具有文件上传功能的页面 index.jsp， 其表单的设置需要注意， method 属性为 POST，enctype 属性为 multipart/form-data。</p>
<figure class="highlight accesslog"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;form action=<span class="string">"$&#123;pageContext.request.contextPath &#125;/test/upload.do"</span> method=<span class="string">"<span class="keyword">POST</span>"</span> enctype=<span class="string">"multipart/form-data"</span>&gt;</span><br><span class="line">  	文件：&lt;input type=<span class="string">"file"</span> name=<span class="string">"img"</span>/&gt;&lt;br&gt;</span><br><span class="line">  	&lt;input type=<span class="string">"submit"</span> value=<span class="string">"上传"</span>/&gt;</span><br><span class="line">  &lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>

<p>（2） 定义处理器</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">@Controller		<span class="comment">//表示当前类是一个处理器</span></span><br><span class="line">@<span class="constructor">RequestMapping(<span class="string">"/test"</span>)</span>	<span class="comment">//命名空间</span></span><br><span class="line">public <span class="keyword">class</span> MyController  &#123;</span><br><span class="line"></span><br><span class="line">	@<span class="constructor">RequestMapping(<span class="string">"/upload.do"</span>)</span></span><br><span class="line">	public String <span class="keyword">do</span><span class="constructor">FileUpload(MultipartFile <span class="params">img</span>, HttpSession <span class="params">session</span>)</span> throws Exception &#123;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//服务端的images目录需要手工先创建好</span></span><br><span class="line">		<span class="comment">// String path = "d:/images";</span></span><br><span class="line">		String path = session.get<span class="constructor">ServletContext()</span>.get<span class="constructor">RealPath(<span class="string">"/images"</span>)</span>;</span><br><span class="line">		<span class="keyword">if</span> (img.get<span class="constructor">Size()</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">			<span class="comment">// 获取到上传文件的原始名称</span></span><br><span class="line">			String fileName = img.get<span class="constructor">OriginalFilename()</span>;</span><br><span class="line">			<span class="comment">//限制上传文件类型</span></span><br><span class="line">			<span class="keyword">if</span> (fileName.ends<span class="constructor">With(<span class="string">"jpg"</span>)</span><span class="operator"> || </span>fileName.ends<span class="constructor">With(<span class="string">"png"</span>)</span>) &#123;</span><br><span class="line">				File file = <span class="keyword">new</span> <span class="constructor">File(<span class="params">path</span>, <span class="params">fileName</span>)</span>;</span><br><span class="line">				<span class="comment">//完成上传</span></span><br><span class="line">				img.transfer<span class="constructor">To(<span class="params">file</span>)</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		return <span class="string">"/success.jsp"</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对于处理器的定义，需要注意以下几点：</p>
<ul>
<li>处理器方法的形参</li>
</ul>
<p>用于接收表单元素所提交参数的处理器方法的形参类型不是 File，而是 MultipartFile。MultipartFile 为一个接口，专门用于处理文件上传问题。该接口中具有很多有用的方法，例如获取参数名称 getName()； 获取文件的原始名称 getOriginalFilename()； 获取文件大小 getSize()； 判断文件是否为空 isEmpty()； 文件上传transferTo()等。</p>
<p>MultipartFile 接口常用的实现类为 CommonsMultipartResolver。 而该实现类中具有设置上传文件大小、上传文件字符集等属性，可以通过为其注入值，来限定上传的文件。</p>
<ul>
<li>未选择上传文件</li>
</ul>
<p>若用户未选择上传的文件就直接提交了表单，此时处理器方法的 MultipateFile 形参所接收到的实参值并非为 null，而是一个内容为 empty 的文件。所以，对于未选择上传文件的情况的处理，其判断条件为 file.isEmpty()，而非 file == null。</p>
<ul>
<li>上传文件类型</li>
</ul>
<p>SpringMVC 的文件上传功能并未有直接的用于限定文件上传类型的方法或属性，需要对获取到的文件名后辍加以判断。此时使用 String 的 endWith()方法较为简捷。</p>
<ul>
<li>上传方法</li>
</ul>
<p>对于上传单个文件，直接使用 MultipartFile 的 transferTo()方法，就可以完成上传功能。但是，需要注意的是，该方法要求服务端用于存放客户上传文件的目录必须存在，否则报错。即其不会自己创建该目标目录。</p>
<p>（3） 在 SpringMVC 中注册文件上传处理器</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 注册组件扫描器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span></span></span><br><span class="line"><span class="tag">	<span class="attr">base-package</span>=<span class="string">"com.huang.handlers"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- MultipartFile 接口的实现类 CommonsMultipartResolver 的 Bean。要求该 Bean 的 id 必须为 multipartResolver。 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"multipartResolver"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">class</span>=<span class="string">"org.springframework.web.multipart.commons.CommonsMultipartResolver"</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 文件上传字符集 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"defaultEncoding"</span> <span class="attr">value</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 单位：B		如果不对该属性进行设置，或指定其值为-1，则表示不对上传文件大小作限制 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxUploadSize"</span> <span class="attr">value</span>=<span class="string">"1048576"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 注册异常处理器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span></span></span><br><span class="line"><span class="tag">	<span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.handler.SimpleMappingExceptionResolver"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"defaultErrorView"</span> <span class="attr">value</span>=<span class="string">"/error.jsp"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：<br>该大小为上传文件的总大小。即，若上传多个文件，则多个文件的大小之和不能大小该设定值。当然，也可通过设置属性 maxUploadSizePerFile，再添加对每个上传文件的大小设置。即每个文件的大小不能超过 maxUploadSizePerFile 指定值，而文件大小总和也不能超过 maxUploadSize 指定值。</p>
</blockquote>
<p>（4） 定义上传成功与失败页面</p>
<img src="/2019/08/17/SpringMVC核心技术/core34.png">


<h3 id="上传多个文件"><a href="#上传多个文件" class="headerlink" title="上传多个文件"></a>上传多个文件</h3><p>（1） 修改 index 页面</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;form action="$&#123;pageContext.request.contextPath &#125;/test/upload.do" <span class="keyword">method</span>="POST" enctype="multipart/form-data"&gt;</span><br><span class="line">  	文件<span class="number">1</span>：&lt;<span class="keyword">input</span> <span class="keyword">type</span>="file" <span class="type">name</span>="img"/&gt;&lt;br&gt;</span><br><span class="line">  	文件<span class="number">2</span>：&lt;<span class="keyword">input</span> <span class="keyword">type</span>="file" <span class="type">name</span>="img"/&gt;&lt;br&gt;</span><br><span class="line">  	文件<span class="number">3</span>：&lt;<span class="keyword">input</span> <span class="keyword">type</span>="file" <span class="type">name</span>="img"/&gt;&lt;br&gt;</span><br><span class="line">  	&lt;<span class="keyword">input</span> <span class="keyword">type</span>="submit" <span class="keyword">value</span>="上传"/&gt;</span><br><span class="line">  &lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>

<p>（2） 修改处理器类</p>
<img src="/2019/08/17/SpringMVC核心技术/core35.png">

<p>（3） 运行结果</p>
<img src="/2019/08/17/SpringMVC核心技术/core36.png">


<h2 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h2><p>Interceptor 拦截器的主要作用是拦截指定的用户请求， 并进行相应的预处理与后处理。 其拦截的时间点在“处理器映射器根据用户提交的请求映射出了所要执行的处理器类， 并且也找到了要执行该处理器类的处理器适配器，在处理器适配器执行处理器之前”。当然，在处理器映射器映射出所要执行的处理器类时，已经将拦截器与处理器组合为了一个处理器执行链，并返回给了中央调度器。</p>
<h3 id="一个拦截器的执行"><a href="#一个拦截器的执行" class="headerlink" title="一个拦截器的执行"></a>一个拦截器的执行</h3><p>（1） 自定义拦截器</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> OneInterceptor implements HandlerInterceptor &#123;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">public</span> <span class="type">boolean</span> preHandle(HttpServletRequest request,</span><br><span class="line">			HttpServletResponse response, <span class="keyword">Object</span> <span class="keyword">handler</span>) throws <span class="keyword">Exception</span> &#123;</span><br><span class="line">		<span class="keyword">System</span>.<span class="keyword">out</span>.println("执行OneIntercepor ---- preHandle()方法 ------");</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">public</span> <span class="type">void</span> postHandle(HttpServletRequest request,</span><br><span class="line">			HttpServletResponse response, <span class="keyword">Object</span> <span class="keyword">handler</span>,</span><br><span class="line">			ModelAndView modelAndView) throws <span class="keyword">Exception</span> &#123;</span><br><span class="line">		<span class="keyword">System</span>.<span class="keyword">out</span>.println("执行OneIntercepor ---- postHandle()方法 ------");</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">public</span> <span class="type">void</span> afterCompletion(HttpServletRequest request,</span><br><span class="line">			HttpServletResponse response, <span class="keyword">Object</span> <span class="keyword">handler</span>, <span class="keyword">Exception</span> ex)</span><br><span class="line">			throws <span class="keyword">Exception</span> &#123;</span><br><span class="line">		<span class="keyword">System</span>.<span class="keyword">out</span>.println("执行OneIntercepor ---- afterCompletion()方法 ------");</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>自定义拦截器，需要实现 HandlerInterceptor 接口。而该接口中含有三个方法：</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">pre<span class="constructor">Handle(<span class="params">request</span>, <span class="params">response</span>, Object <span class="params">handler</span>)</span></span><br></pre></td></tr></table></figure>

<p>该方法在处理器方法执行之前执行。其返回值为 boolean，若为 true，则紧接着会执行处理器方法，且会将 afterCompletion()方法放入到一个专门的方法栈中等待执行。</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">post<span class="constructor">Handle(<span class="params">request</span>, <span class="params">response</span>, Object <span class="params">handler</span>, <span class="params">modelAndView</span>)</span></span><br></pre></td></tr></table></figure>

<p>该方法在处理器方法执行之后执行。处理器方法若最终未被执行，则该方法不会执行。由于该方法是在处理器方法执行完后执行，且该方法参数中包含 ModelAndView，所以该方法可以修改处理器方法的处理结果数据，且可以修改跳转方向。</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">after<span class="constructor">Completion(<span class="params">request</span>, <span class="params">response</span>, Object <span class="params">handler</span>, Exception <span class="params">ex</span>)</span></span><br></pre></td></tr></table></figure>

<p>当 preHandle()方法返回 true 时，会将该方法放到专门的方法栈中，等到对请求进行响应的所有工作完成之后才执行该方法。 即该方法是在中央调度器渲染（数据填充） 了响应页面之后执行的，此时对 ModelAndView 再操作也对响应无济于事。</p>
<p>（2） 注册拦截器</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">   <span class="comment">&lt;!-- 注册组件扫描器 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.huang.*"</span>/&gt;</span></span><br><span class="line">   </span><br><span class="line">   <span class="comment">&lt;!-- 注册拦截器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/**"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.huang.interceptors.OneInterceptor"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>&lt;mvc:mapping/&gt;用于指定当前所注册的拦截器可以拦截的请求路径，而/**表示拦截所有请求。</p>
<p>（3） 定义处理器</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span>		<span class="comment">//表示当前类是一个处理器</span></span><br><span class="line"><span class="meta">@RequestMapping(<span class="meta-string">"/test"</span>)</span>	<span class="comment">//命名空间</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyController</span>  </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@RequestMapping(<span class="meta-string">"/some.do"</span>)</span></span><br><span class="line">	<span class="keyword">public</span> String doSome() &#123;</span><br><span class="line">		System.<span class="keyword">out</span>.println(<span class="string">"执行处理器的doSome()方法"</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">return</span> <span class="string">"/WEB-INF/jsp/welcome.jsp"</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（4） 运行结果</p>
<img src="/2019/08/17/SpringMVC核心技术/core37.png">

<p>（5） 一个拦截器中方法与处理器方法的执行顺序</p>
<img src="/2019/08/17/SpringMVC核心技术/core38.png">


<h3 id="多个拦截器的执行"><a href="#多个拦截器的执行" class="headerlink" title="多个拦截器的执行"></a>多个拦截器的执行</h3><p>（1） 再定义一个拦截器</p>
<img src="/2019/08/17/SpringMVC核心技术/core39.png">

<p>（2） 多个拦截器的注册与执行</p>
<img src="/2019/08/17/SpringMVC核心技术/core40.png">

<p>（3） 运行结果</p>
<img src="/2019/08/17/SpringMVC核心技术/core41.png">

<p>当有多个拦截器时，形成拦截器链。拦截器链的执行顺序，与其注册顺序一致。当某一个拦截器的 preHandle()方法返回 true 并被执行到时，会向一个专门的方法栈中放入该拦截器的 afterCompletion()方法。</p>
<p>（4） 多个拦截器中方法与处理器方法的执行顺序</p>
<img src="/2019/08/17/SpringMVC核心技术/core42.png">


<p>只要有一个 preHandle()方法返回 false，则上部的执行链将被断开，其后续的处理器方法与 postHandle()方法将无法执行。但是，无论执行链执行情况怎样，只要方法栈中有方法，即执行链中只要有 preHandle()方法返回 true，就会执行方法栈中的 afterCompletion()方法，最终都会给出响应。</p>
]]></content>
      <categories>
        <category>SpringMVC核心技术</category>
      </categories>
  </entry>
  <entry>
    <title>SpringMVC注解式开发</title>
    <url>/2019/08/15/SpringMVC%E6%B3%A8%E8%A7%A3%E5%BC%8F%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>所谓 SpringMVC 的注解式开发是指，处理器是基于注解的类的开发。 对于每一个定义的处理器，无需在配置文件中逐个注册，只需在代码中通过对类与方法的注解，便可完成注册。即注解替换的是配置文件中对于处理器的注册部分。</p>
<a id="more"></a>

<h2 id="第一个注解式开发程序"><a href="#第一个注解式开发程序" class="headerlink" title="第一个注解式开发程序"></a>第一个注解式开发程序</h2><p><a href="https://www.huangyuanzhi.top/2019/08/12/SpringMVC%E6%A6%82%E8%BF%B0/#more" title="开发流程">开发流程五个步骤请查看之前的文章</a></p>
<h3 id="注册组件扫描器"><a href="#注册组件扫描器" class="headerlink" title="注册组件扫描器"></a>注册组件扫描器</h3><p>这里的组件即处理器，需要指定处理器所在基本包。</p>
<figure class="highlight vhdl"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">context</span>:<span class="keyword">component</span>-scan base-<span class="keyword">package</span>=<span class="string">"com.huang.handlers"</span>/&gt;</span><br></pre></td></tr></table></figure>

<h3 id="定义处理器"><a href="#定义处理器" class="headerlink" title="定义处理器"></a>定义处理器</h3><p>此时的处理器类无需继承任何父类，实现任何接口。只需在类上与方法上添加相应注解即可。</p>
<ul>
<li>@Controller：表示当前类为处理器  </li>
<li>@RequestMapping：表示当前方法为处理器方法。该方法要对 value 属性所指定的 URL 进行处理与响应。(被注解的方法的方法名可以随意)。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyController</span>  </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@RequestMapping</span>(<span class="string">"/my.do"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> ModelAndView <span class="title">doFirst</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">		mv.addObject(<span class="string">"message"</span>, <span class="string">"Hello World SpringMVC World!"</span>);</span><br><span class="line">		mv.setViewName(<span class="string">"/WEB-INF/jsp/welcome.jsp"</span>);</span><br><span class="line">		<span class="keyword">return</span> mv;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>若有多个请求路径均可匹配该处理器方法的执行，则@RequestMapping 的 value 属性中可以写上一个数组。</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&#123;<span class="meta-string">"/my.do"</span>,<span class="meta-string">"/hello.do"</span>&#125;)</span></span><br></pre></td></tr></table></figure>

<h2 id="处理器的请求映射规则的定义"><a href="#处理器的请求映射规则的定义" class="headerlink" title="处理器的请求映射规则的定义"></a>处理器的请求映射规则的定义</h2><p>通过@RequestMapping 注解可以定义处理器对于请求的映射规则。 该注解可以注解在方法上，也可以注解在类上，但意义是不同的。</p>
<h3 id="对请求-URI-的命名空间的定义"><a href="#对请求-URI-的命名空间的定义" class="headerlink" title="对请求 URI 的命名空间的定义"></a>对请求 URI 的命名空间的定义</h3><p>@RequestMapping 的 value 属性用于定义所匹配请求的 URI。但对于注解在方法上与类上，其 value 属性所指定的 URI，意义是不同的。</p>
<p>一个@Controller 所注解的类中，可以定义多个处理器方法。当然，不同的处理器方法所匹配的 URI 是不同的。 这些不同的 URI 被指定在注解于方法之上的@RequestMapping 的 value 属性中。 但若这些请求具有相同的 URI 部分，则这些相同的 URI， 可以被抽取到注解在类之上的@RequestMapping 的 value 属性中。此时的这个 URI 称为命名空间。</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">@Controller		<span class="comment">//表示当前类是一个处理器</span></span><br><span class="line">@<span class="constructor">RequestMapping(<span class="string">"/test"</span>)</span>	<span class="comment">//命名空间</span></span><br><span class="line">public <span class="keyword">class</span> MyController  &#123;</span><br><span class="line"></span><br><span class="line">	@<span class="constructor">RequestMapping(<span class="string">"/first.do"</span>)</span></span><br><span class="line">	public ModelAndView <span class="keyword">do</span><span class="constructor">First(HttpServletRequest <span class="params">request</span>, HttpServletResponse <span class="params">response</span>)</span> throws Exception &#123;</span><br><span class="line">		ModelAndView mv = <span class="keyword">new</span> <span class="constructor">ModelAndView()</span>;</span><br><span class="line">		mv.add<span class="constructor">Object(<span class="string">"message"</span>, <span class="string">"执行doFirst()方法"</span>)</span>;</span><br><span class="line">		mv.set<span class="constructor">ViewName(<span class="string">"/WEB-INF/jsp/welcome.jsp"</span>)</span>;</span><br><span class="line">		return mv;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	@<span class="constructor">RequestMapping(<span class="string">"/second.do"</span>)</span></span><br><span class="line">	public ModelAndView <span class="keyword">do</span><span class="constructor">Second(HttpServletRequest <span class="params">request</span>, HttpServletResponse <span class="params">response</span>)</span> throws Exception &#123;</span><br><span class="line">		ModelAndView mv = <span class="keyword">new</span> <span class="constructor">ModelAndView()</span>;</span><br><span class="line">		mv.add<span class="constructor">Object(<span class="string">"message"</span>, <span class="string">"执行doSecond()方法"</span>)</span>;</span><br><span class="line">		mv.set<span class="constructor">ViewName(<span class="string">"/WEB-INF/jsp/welcome.jsp"</span>)</span>;</span><br><span class="line">		return mv;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="请求-URI-中通配符的应用"><a href="#请求-URI-中通配符的应用" class="headerlink" title="请求 URI 中通配符的应用"></a>请求 URI 中通配符的应用</h3><p>在处理器方法所映射的 URI 中，可以使用通配符，有两种用法。</p>
<h4 id="1-资源名称中使用通配符"><a href="#1-资源名称中使用通配符" class="headerlink" title="1. 资源名称中使用通配符"></a>1. 资源名称中使用通配符</h4><p>在请求的资源名称中使用通配符，表示请求的资源名称中只要包含指定的字符即可完成匹配。</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@RequestMapping</span>(<span class="string">"/third*.do"</span>)	<span class="comment">// 资源名称必须以third开头，后面可加其它字符</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">@RequestMapping</span>(<span class="string">"/*fourth.do"</span>)	<span class="comment">// 资源名称必须以fourth结尾，前面可加其它字符</span></span><br></pre></td></tr></table></figure>

<h4 id="2-资源路径中使用通配符"><a href="#2-资源路径中使用通配符" class="headerlink" title="2. 资源路径中使用通配符"></a>2. 资源路径中使用通配符</h4><ul>
<li>路径级数的精确匹配：/xxx/*/my.do： 表示在 my.do 的资源名称前面，只能有两级路径，第一级必须是/xxx，而第二级随意。  </li>
<li>路径级数的可变匹配：/xxx/**/my.do： 表示在 my.do 的资源名称前面，必须以/xxx 路径开头，而其它级的路径是否包含，若包含又包含几级，各级又叫什么名称，均随意。</li>
</ul>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">//路径级数的精确匹配</span></span><br><span class="line"><span class="meta">@RequestMapping(<span class="meta-string">"/*/fifth.do"</span>)</span>	<span class="comment">// 路径级数的绝对匹配，即要求在test与fifth.do之间必须要有一级路径</span></span><br></pre></td></tr></table></figure>

<p>访问方式</p>
<img src="/2019/08/15/SpringMVC注解式开发/ann01.png">

<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">//路径级数的可变匹配</span></span><br><span class="line"><span class="meta">@RequestMapping(<span class="meta-string">"/**/sixth.do"</span>)</span>	<span class="comment">// 要求在test与sixth.do之间可以包含多级路径，也可以没有其它路径</span></span><br></pre></td></tr></table></figure>

<p>访问方式(两种)</p>
<img src="/2019/08/15/SpringMVC注解式开发/ann02.png">

<img src="/2019/08/15/SpringMVC注解式开发/ann03.png">


<h3 id="对请求提交方式的定义"><a href="#对请求提交方式的定义" class="headerlink" title="对请求提交方式的定义"></a>对请求提交方式的定义</h3><p>对于@RequestMapping，其有一个属性 method，用于对被注解方法所处理请求的提交方式进行限制，即只有满足该 method 属性指定的提交方式的请求，才会执行该被注解方法。</p>
<figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line">//对请求提交方式的定义</span><br><span class="line"><span class="symbol">@RequestMapping</span>(<span class="string">"value=&#123;\"</span>/my.<span class="keyword">do</span>\<span class="string">", \"</span>hello.<span class="keyword">do</span>\<span class="string">"&#125;, method=RequestMethod.POST"</span>)</span><br></pre></td></tr></table></figure>

<p>由于 POST 提交只能通过表单或者 AJAX 提交，所以通过地址栏访问会出现 404 错误</p>
<blockquote>
<p>注意：<br>若不指定 method 属性，则无论是 GET 还是 POST 提交方式，均可匹配。即对于请求的提交方式无要求。</p>
</blockquote>
<p>客户端浏览器常用的请求方式，及其提交方式有以下几种：</p>
<table>
<thead>
<tr>
<th align="center">序号</th>
<th align="left">请求方式</th>
<th align="left">提交方式</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="left">表单请求</td>
<td align="left">默认 GET,可以指定 POST</td>
</tr>
<tr>
<td align="center">2</td>
<td align="left">AJAX 请求</td>
<td align="left">默认 GET,可以指定 POST</td>
</tr>
<tr>
<td align="center">3</td>
<td align="left">地址栏请求</td>
<td align="left">GET 请求</td>
</tr>
<tr>
<td align="center">4</td>
<td align="left">超链接请求</td>
<td align="left">GET 请求</td>
</tr>
<tr>
<td align="center">5</td>
<td align="left">src 资源路径请求</td>
<td align="left">GET 请求</td>
</tr>
</tbody></table>
<h3 id="对请求中携带参数的定义"><a href="#对请求中携带参数的定义" class="headerlink" title="对请求中携带参数的定义"></a>对请求中携带参数的定义</h3><p>@RequestMapping 中 params 属性中定义了请求中必须携带的参数的要求。</p>
<ul>
<li>@RequestMapping(value=”/xxx.do”, params={“name”,”age”}) ：要求请求中必须携带请求参数 name 与 age  </li>
<li>@RequestMapping(value=”/xxx.do”, params={“!name”,”age”}) ：要求请求中必须携带请求参数 age，但必须不能携带参数 name  </li>
<li>@RequestMapping(value=”/xxx.do”, params={“name=zs”,”ag=23”}) ：要求请求中必须携带请求参数 name，且其值必须为 zs；必须携带参数 age，其其值必须为 23  </li>
<li>@RequestMapping(value=”/xxx.do”, params=“name!=zs”) ：要求请求中必须携带请求参数 name，且其值必须不能为 zs</li>
</ul>
<h2 id="处理器方法的参数"><a href="#处理器方法的参数" class="headerlink" title="处理器方法的参数"></a>处理器方法的参数</h2><p>处理器方法可以包含以下五类参数，这些参数会在系统调用时由系统自动赋值，即程序员可在方法内直接使用。</p>
<ol>
<li>HttpServletRequest  </li>
<li>HttpServletResponse  </li>
<li>HttpSession  </li>
<li>用于承载数据的 Model  </li>
<li>请求中所携带的请求参数</li>
</ol>
<h3 id="逐个参数接收"><a href="#逐个参数接收" class="headerlink" title="逐个参数接收"></a>逐个参数接收</h3><p>只要保证请求参数名与该请求处理方法的参数名相同即可。</p>
<p>（1） 处理器类 MyController</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">@Controller		<span class="comment">//表示当前类是一个处理器</span></span><br><span class="line">@<span class="constructor">RequestMapping(<span class="string">"/test"</span>)</span>	<span class="comment">//命名空间</span></span><br><span class="line">public <span class="keyword">class</span> MyController  &#123;</span><br><span class="line"></span><br><span class="line">	@<span class="constructor">RequestMapping(<span class="string">"/register.do"</span>)</span></span><br><span class="line">	<span class="comment">//底层使用类型转换器</span></span><br><span class="line">	public ModelAndView <span class="keyword">do</span><span class="constructor">Register(String <span class="params">name</span>,<span class="params">int</span> <span class="params">age</span>)</span> &#123;</span><br><span class="line">		<span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"name ="</span> + name);</span><br><span class="line">		<span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"age ="</span> + age);</span><br><span class="line">		</span><br><span class="line">		ModelAndView mv = <span class="keyword">new</span> <span class="constructor">ModelAndView()</span>;</span><br><span class="line">		mv.add<span class="constructor">Object(<span class="string">"name"</span>,<span class="params">name</span>)</span>;</span><br><span class="line">		mv.add<span class="constructor">Object(<span class="string">"age"</span>,<span class="params">age</span>)</span>;</span><br><span class="line">		mv.set<span class="constructor">ViewName(<span class="string">"/WEB-INF/jsp/welcome.jsp"</span>)</span>;</span><br><span class="line">		return mv;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（2） index 页面</p>
<figure class="highlight accesslog"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">   &lt;form action=<span class="string">"$&#123;pageContext.request.contextPath &#125;/test/register.do"</span> method=<span class="string">"<span class="keyword">POST</span>"</span>&gt;</span><br><span class="line">   	姓名：&lt;input type=<span class="string">"text"</span> name=<span class="string">"name"</span>/&gt;&lt;br&gt;</span><br><span class="line">   	年龄：&lt;input type=<span class="string">"text"</span> name=<span class="string">"age"</span>/&gt;&lt;br&gt;</span><br><span class="line">   	&lt;input type=<span class="string">"submit"</span> value=<span class="string">"注册"</span>/&gt;</span><br><span class="line">   &lt;/form&gt;</span><br><span class="line"> &lt;/body&gt;</span><br></pre></td></tr></table></figure>

<p>(3) 目标页面</p>
<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml">	name = $</span><span class="template-variable">&#123;name &#125;</span><span class="xml"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line"><span class="xml">	age = $</span><span class="template-variable">&#123;age &#125;</span><span class="xml"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>（4） 运行结果的注册页面</p>
<img src="/2019/08/15/SpringMVC注解式开发/ann04.png">


<h3 id="请求参数中文乱码问题"><a href="#请求参数中文乱码问题" class="headerlink" title="请求参数中文乱码问题"></a>请求参数中文乱码问题</h3><p>对于前面所接收的请求参数，若含有中文，则会出现中文乱码问题。 Spring 对于请求参数中的中文乱码问题，给出了专门的字符集过滤器</p>
<h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><p>在 web.xml 中注册字符集过滤器，即可解决 Spring 的请求参数的中文乱码问题。不过，最好将该过滤器注册在其它过滤器之前。因为过滤器的执行是按照其注册顺序进行的。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 注册字符集过滤器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">&lt;!-- 指定字符集 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">&lt;!-- 指定强制使用指定的字符集 </span></span><br><span class="line"><span class="comment">		如果为true，不管系统有没有设置字符集，通通按照自己定义的字符集，即utf-8</span></span><br><span class="line"><span class="comment">		如果没有设置或者false，若系统设置了字符集按系统的，没设置按照自定义的</span></span><br><span class="line"><span class="comment">	--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h4><p>打开 CharacterEncodingFilter 类的源码，发现有两个 set 属性： encoding 与 forceEncoding。</p>
<ul>
<li>encoding： String 类型，指定字符集。  </li>
<li>forceEncoding： boolean 类型，指定是否强制使用指定的字符集。若为 true，则代码中指定的字符集将不起作用。若为 false，则代码中若指定了字符集，就使用代码指定字符集；若代码中没有指定字符集，则使用这里指定的字符集。</li>
</ul>
<img src="/2019/08/15/SpringMVC注解式开发/ann05.png">


<h3 id="校正请求参数名-RequestParam"><a href="#校正请求参数名-RequestParam" class="headerlink" title="校正请求参数名@RequestParam"></a>校正请求参数名@RequestParam</h3><p>若请求 URL 所携带的参数名称与处理方法中指定的参数名不相同时， 则需在处理方法参数前， 添加一个注解@RequestParam(“请求参数名”)，指定请<br>求 URL 所携带参数的名称。该注解是对处理器方法参数进行修饰的。@RequestParam()有三个属性：</p>
<ul>
<li>value： 指定请求参数的名称。  </li>
<li>required： 指定该注解所修饰的参数是否是必须的， boolean 类型。若为 true，则表示请求中所携带的参数中必须包含当前参数。若为 false，则表示有没有均可。  </li>
<li>defaultValue：指定当前参数的默认值。若请求 URI 中没有给出当前参数，则当前方法参数将取该默认值。即使 required 为 true，且 URI 中没有给出当前参数，该处理器方法参数会自动取该默认值，而不会报错。</li>
</ul>
<img src="/2019/08/15/SpringMVC注解式开发/ann06.png">


<h3 id="整体参数接收"><a href="#整体参数接收" class="headerlink" title="整体参数接收"></a>整体参数接收</h3><p>将处理器方法的参数定义为一个对象，只要保证请求参数名与这个对象的属性同名即可(表单的参数名与实体的属性一致)。</p>
<p>（1） 定义 VO 类 Student</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">Student</span> &#123;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	<span class="keyword">private</span> <span class="built_in">int</span> age;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（2） 修改处理器类</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">@Controller		<span class="comment">//表示当前类是一个处理器</span></span><br><span class="line">@<span class="constructor">RequestMapping(<span class="string">"/test"</span>)</span>	<span class="comment">//命名空间</span></span><br><span class="line">public <span class="keyword">class</span> MyController  &#123;</span><br><span class="line"></span><br><span class="line">	@<span class="constructor">RequestMapping(<span class="string">"/register.do"</span>)</span></span><br><span class="line">	public ModelAndView <span class="keyword">do</span><span class="constructor">Register(Student <span class="params">student</span>)</span> &#123;</span><br><span class="line">		<span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"name ="</span> + student.get<span class="constructor">Name()</span>);</span><br><span class="line">		<span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"age ="</span> + student.get<span class="constructor">Age()</span>);</span><br><span class="line">		</span><br><span class="line">		ModelAndView mv = <span class="keyword">new</span> <span class="constructor">ModelAndView()</span>;</span><br><span class="line">		mv.add<span class="constructor">Object(<span class="string">"student"</span>,<span class="params">student</span>)</span>;</span><br><span class="line">		mv.set<span class="constructor">ViewName(<span class="string">"/WEB-INF/jsp/welcome.jsp"</span>)</span>;</span><br><span class="line">		return mv;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>(3) 定义目标页面</p>
<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml">	student = $</span><span class="template-variable">&#123;student &#125;</span><span class="xml"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>（4） 修改 index 页面</p>
<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;pageContext.request.contextPath &#125;</span><span class="xml"><span class="tag"><span class="string">/test/register.do"</span> <span class="attr">method</span>=<span class="string">"POST"</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="comment">&lt;!-- 整体接收时，要求表单参数名与对象属性名相同 --&gt;</span></span></span><br><span class="line"><span class="xml">  	姓名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line"><span class="xml">  	年龄：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"age"</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line"><span class="xml">  	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"注册"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：<br>参数名称中不用写为“对象.属性”的形式。</p>
</blockquote>
<p>（5） 注册结果</p>
<img src="/2019/08/15/SpringMVC注解式开发/ann07.png">


<h3 id="域属性参数的接收"><a href="#域属性参数的接收" class="headerlink" title="域属性参数的接收"></a>域属性参数的接收</h3><p>所谓域属性，即对象属性。当请求参数中的数据为某类对象域属性的属性值时，要求请求参数名为“域属性名.属性”。</p>
<p>（1） 定义 VO 类</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">public class School &#123;</span><br><span class="line">	private String sname;</span><br><span class="line">	private String address;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">Student</span> &#123;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	<span class="keyword">private</span> <span class="built_in">int</span> age;</span><br><span class="line">	<span class="keyword">private</span> School school;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（2） 修改 index 页面</p>
<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"> <span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;pageContext.request.contextPath &#125;</span><span class="xml"><span class="tag"><span class="string">/test/register.do"</span> <span class="attr">method</span>=<span class="string">"POST"</span>&gt;</span></span></span><br><span class="line"><span class="xml">   <span class="comment">&lt;!-- 整体接收时，要求表单参数名与对象属性名相同 --&gt;</span></span></span><br><span class="line"><span class="xml">   	姓名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line"><span class="xml">   	年龄：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"age"</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 请求参数名为“域属性名.属性” --&gt;</span></span></span><br><span class="line"><span class="xml">   	学校：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"school.sname"</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line"><span class="xml">   	校址：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"school.address"</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line"><span class="xml">   	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"注册"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line"><span class="xml"> <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：<br>参数名称中要写为“对象.属性”的形式。</p>
</blockquote>
<h3 id="路径变量-PathVariable"><a href="#路径变量-PathVariable" class="headerlink" title="路径变量@PathVariable"></a>路径变量@PathVariable</h3><p>对于处理器方法中所接收的请求参数，可以来自于请求中所携带的参数，也可以来自于请求的 URI 中所携带的变量，即路径变量。不过，此时，需要借助@PathVariable 注解(参数在访问路径)。</p>
<p>@PathVariable 在不指定参数的情况下，默认其参数名，即路径变量名与用于接收其值的属性名相同。若路径变量名与用于接收其值的属性名不同，则@PathVariable 可通过参数指出路径变量名称。</p>
<p>（1） 处理器类</p>
<img src="/2019/08/15/SpringMVC注解式开发/ann08.png">

<p>（2） 访问方式</p>
<img src="/2019/08/15/SpringMVC注解式开发/ann09.png">


<h2 id="处理器方法的返回值"><a href="#处理器方法的返回值" class="headerlink" title="处理器方法的返回值"></a>处理器方法的返回值</h2><p>使用@Controller 注解的处理器的处理器方法，其返回值常用的有四种类型：</p>
<h3 id="1-返回-ModelAndView"><a href="#1-返回-ModelAndView" class="headerlink" title="1. 返回 ModelAndView"></a>1. 返回 ModelAndView</h3><p>若处理器方法处理完后，需要跳转到其它资源，且又要在跳转的资源间传递数据， 此时处理器方法返回 ModelAndView 比较好。当然，若要返回 ModelAndView，则处理器方法中需要定义 ModelAndView 对象。</p>
<h3 id="2-返回-String"><a href="#2-返回-String" class="headerlink" title="2. 返回 String"></a>2. 返回 String</h3><p>处理器方法返回的字符串可以指定逻辑视图名，通过视图解析器解析可以将其转换为物理视图地址。</p>
<h4 id="返回内部资源逻辑视图名"><a href="#返回内部资源逻辑视图名" class="headerlink" title="返回内部资源逻辑视图名"></a>返回内部资源逻辑视图名</h4><p>若要跳转的资源为内部资源，则视图解析器可以使用 InternalResourceViewResolver 内部资源视图解析器。此时处理器方法返回的字符串就是要跳转页面的文件名去掉文件扩展名后的部分。这个字符串与视图解析器中的 prefix、 suffix 相结合，即可形成要访问的 URI。</p>
<img src="/2019/08/15/SpringMVC注解式开发/ann10.png">


<p>也可以直接返回资源的物理视图名。此时就不需要在视图解析器中再配置前辍与后辍。</p>
<img src="/2019/08/15/SpringMVC注解式开发/ann11.png">


<h4 id="返回-View-对象名"><a href="#返回-View-对象名" class="headerlink" title="返回 View 对象名"></a>返回 View 对象名</h4><p>若要跳转的资源为外部资源，则视图解析器可以使用 BeanNameViewResolver，然后在配置文件中再定义一些外部资源视图 View 对象，此时处理器方法返回的字符串就是要跳转资源视图 View 的名称。 </p>
<p>（1） 修改 springmvc 配置文件</p>
<img src="/2019/08/15/SpringMVC注解式开发/ann12.png">

<p>（2） 修改处理器</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span>    <span class="comment">// 表示当前类是一个处理器</span></span><br><span class="line"><span class="meta">@RequestMapping(<span class="meta-string">"/test"</span>)</span>     <span class="comment">// 命名空间</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@RequestMapping(<span class="meta-string">"/my.do"</span>)</span></span><br><span class="line">	<span class="keyword">public</span> String doSome() &#123;</span><br><span class="line">		<span class="comment">/*// 逻辑视图</span></span><br><span class="line"><span class="comment">		return "welcome";*/</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 物理视图</span></span><br><span class="line">		<span class="keyword">return</span> <span class="string">"taobao"</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-返回-void"><a href="#3-返回-void" class="headerlink" title="3. 返回 void"></a>3. 返回 void</h3><p>对于处理器方法返回 void 的应用场景，主要有两种：</p>
<h4 id="通过-ServletAPI-传递数据并完成跳转"><a href="#通过-ServletAPI-传递数据并完成跳转" class="headerlink" title="通过 ServletAPI 传递数据并完成跳转"></a>通过 ServletAPI 传递数据并完成跳转</h4><p>可在方法参数中放入 HttpServletRequest 或 HttpSession，使方法中可以直接将数据放入到 request、 session 的域中，也可通过 request.getServletContext()获取到 ServletContext，从而将数据放入到 application 的域中。<br>可在方法参数中放入 HttpServletRequest 与 HttpServletResponse，使方法可以完成请求转发与重定向。 注意，重定向是无法完成对/WEB-INF/下资源的访问的。</p>
<ul>
<li>请求转发： request.getRequestDispatcher(“目标页面”).forward(request,response);</li>
<li>重定向： response.sendRedirect(“目标页面”);</li>
</ul>
<p>（1） 定义 VO 类 Student</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">Student</span> &#123;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	<span class="keyword">private</span> <span class="built_in">int</span> age;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（2） 修改处理器</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@Controller</span>    <span class="comment">// 表示当前类是一个处理器</span></span><br><span class="line"><span class="variable">@RequestMapping</span>(<span class="string">"/test"</span>)     <span class="comment">// 命名空间</span></span><br><span class="line">public class MyController &#123;</span><br><span class="line"></span><br><span class="line">	<span class="variable">@RequestMapping</span>(<span class="string">"/my.do"</span>)</span><br><span class="line">	public void register(HttpServletRequest request,HttpServletResponse response,Student student)throws Exception &#123;</span><br><span class="line">		<span class="selector-tag">request</span><span class="selector-class">.setAttribute</span>(<span class="string">"myStudent"</span>, student);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//请求转发</span></span><br><span class="line">		<span class="selector-tag">request</span><span class="selector-class">.getRequestDispatcher</span>(<span class="string">"/WEB-INF/jsp/welcome.jsp"</span>)<span class="selector-class">.forward</span>(request, response);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（3） 修改 springmvc 配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 注册组件扫描器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.huang.*"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="AJAX-响应"><a href="#AJAX-响应" class="headerlink" title="AJAX 响应"></a>AJAX 响应</h4><p>若处理器对请求处理后，无需跳转到其它任何资源，此时可以让处理器方法返回 void。例如，对于 AJAX 的异步请求的响应。</p>
<p>（1） 定义 index 页面</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"js/jquery-1.8.3.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">		$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">			$(<span class="string">"button"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">				$.ajax(&#123;</span></span><br><span class="line"><span class="actionscript">					url:<span class="string">"test/myAjax.do"</span>,</span></span><br><span class="line">					data:&#123;</span><br><span class="line"><span class="actionscript">						name:<span class="string">"张三"</span>,</span></span><br><span class="line">						age:23</span><br><span class="line">					&#125;,</span><br><span class="line"><span class="actionscript">					success:<span class="function"><span class="keyword">function</span><span class="params">(data)</span></span>&#123;</span></span><br><span class="line"><span class="javascript">						<span class="keyword">var</span> json = <span class="built_in">eval</span>(<span class="string">"("</span> + data + <span class="string">")"</span>);</span></span><br><span class="line"><span class="actionscript">						alert(json.pname + <span class="string">"   "</span> + json.page);</span></span><br><span class="line">					&#125;</span><br><span class="line">				&#125;);</span><br><span class="line">			&#125;);</span><br><span class="line">		&#125;);</span><br><span class="line">	<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>提交Ajax请求<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>（2） 修改处理器类 </p>
<figure class="highlight processing"><table><tr><td class="code"><pre><span class="line">@Controller    </span><br><span class="line">@RequestMapping(<span class="string">"/test"</span>)    </span><br><span class="line"><span class="keyword">public</span> class MyController &#123;</span><br><span class="line"></span><br><span class="line">	@RequestMapping(<span class="string">"/myAjax.do"</span>)</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> doAjax(<span class="keyword">String</span> name, <span class="built_in">int</span> age, HttpServletResponse response) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//将数据存放到map中</span></span><br><span class="line">		Map&lt;<span class="keyword">String</span>, <span class="keyword">Object</span>&gt; <span class="built_in">map</span> = <span class="keyword">new</span> <span class="keyword">HashMap</span>&lt;<span class="keyword">String</span>, <span class="keyword">Object</span>&gt;();</span><br><span class="line">		<span class="built_in">map</span>.put(<span class="string">"pname"</span>, name);</span><br><span class="line">		<span class="built_in">map</span>.put(<span class="string">"page"</span>, age);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//将map转为JSON</span></span><br><span class="line">		<span class="keyword">JSONObject</span> myJson = <span class="keyword">JSONObject</span>.fromObject(<span class="built_in">map</span>);</span><br><span class="line">		<span class="keyword">String</span> jsonStr = myJson.toString();</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//将数据发回客户端</span></span><br><span class="line">		PrintWriter out = response.getWriter();</span><br><span class="line">		out.<span class="built_in">print</span>(jsonStr);</span><br><span class="line">		out.close();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-返回-Object"><a href="#4-返回-Object" class="headerlink" title="4. 返回 Object"></a>4. 返回 Object</h3><p>处理器方法也可以返回 Object 对象。 但返回的这个 Object 对象不是作为逻辑视图出现的，而是作为直接在页面显示的数据出现的。返回 Object 对象，需要使用@ResponseBody 注解， 将转换后的 JSON 数据放入到响应体中。</p>
<h4 id="返回数值型对象"><a href="#返回数值型对象" class="headerlink" title="返回数值型对象"></a>返回数值型对象</h4><p>（1） 注册注解驱动</p>
<p>将 Object 数据转化为 JSON 数据，需要由 Http 消息转换器 HttpMessageConverter 完成。而转换器的开启，需要由&lt;mvc:annotation-driven/&gt;来完成。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 注册MVC注解驱动 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>（2） 修改 index 页面</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"js/jquery-1.8.3.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">	$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">		$(<span class="string">"button"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">			$.ajax(&#123;</span></span><br><span class="line"><span class="actionscript">				url:<span class="string">"test/myAjax.do"</span>,</span></span><br><span class="line"><span class="actionscript">				success:<span class="function"><span class="keyword">function</span><span class="params">(data)</span></span>&#123;</span></span><br><span class="line">					alert(data);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;);</span><br><span class="line">		&#125;);</span><br><span class="line">	&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"> <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">button</span>&gt;</span>提交Ajax请求<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>（3） 修改处理器</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@Controller</span>    </span><br><span class="line"><span class="variable">@RequestMapping</span>(<span class="string">"/test"</span>)    </span><br><span class="line">public class MyController &#123;</span><br><span class="line"></span><br><span class="line">	<span class="variable">@RequestMapping</span>(value=<span class="string">"/myAjax.do"</span>)</span><br><span class="line">	<span class="variable">@ResponseBody</span>   <span class="comment">// 将返回的数据放入到响应体中</span></span><br><span class="line">	public Object doAjax()  &#123;</span><br><span class="line">		<span class="selector-tag">return</span> <span class="selector-tag">123</span><span class="selector-class">.456</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（4） 修改配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 注册MVC注解驱动 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 注册组件扫描器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.huang.handlers"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="返回字符串对象"><a href="#返回字符串对象" class="headerlink" title="返回字符串对象"></a>返回字符串对象</h4><p>返回的字符串中带有中文字符，则接收方页面将会出现乱码 。此时需要使用<br>@RequestMapping 的 produces 属性指定字符集，该属性用于设置输出结果类型。</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span>    </span><br><span class="line"><span class="meta">@RequestMapping(<span class="meta-string">"/test"</span>)</span>    </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@RequestMapping(value=<span class="meta-string">"/myAjax.do"</span>,produces=<span class="meta-string">"text/html;charset=utf-8"</span>)</span></span><br><span class="line">	<span class="meta">@ResponseBody</span>   <span class="comment">// 将返回的数据放入到响应体中</span></span><br><span class="line">	<span class="keyword">public</span> Object doAjax()  &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">"广东广州"</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="返回自定义类型对象"><a href="#返回自定义类型对象" class="headerlink" title="返回自定义类型对象"></a>返回自定义类型对象</h4><p>返回自定义类型对象时，不能以对象的形式直接返回给客户端浏览器，而是将对象转换为 JSON 格式的数据发送给浏览器的。</p>
<p>（1） 定义 VO 类</p>
<img src="/2019/08/15/SpringMVC注解式开发/ann13.png">

<p>（2） 修改处理器 MyController</p>
<img src="/2019/08/15/SpringMVC注解式开发/ann14.png">

<p>（3） 修改 index 页面</p>
<img src="/2019/08/15/SpringMVC注解式开发/ann15.png">


<h4 id="返回-Map-集合"><a href="#返回-Map-集合" class="headerlink" title="返回 Map 集合"></a>返回 Map 集合</h4><p>（1） 修改处理器</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">@Controller    </span><br><span class="line">@RequestMapping(<span class="string">"/test"</span>)    </span><br><span class="line"><span class="keyword">public</span> class MyController &#123;</span><br><span class="line"></span><br><span class="line">	@RequestMapping(<span class="string">"/myAjax.do"</span>)</span><br><span class="line">	@ResponseBody   <span class="comment">// 将返回的数据放入到响应体中</span></span><br><span class="line">	<span class="keyword">public</span> Object doAjax()  &#123;</span><br><span class="line">		Map&lt;<span class="keyword">String</span>, Student&gt; <span class="built_in">map</span> = <span class="keyword">new</span> HashMap&lt;<span class="keyword">String</span>, Student&gt;();</span><br><span class="line">		<span class="built_in">map</span>.<span class="built_in">put</span>(<span class="string">"stu1"</span>, <span class="keyword">new</span> Student(<span class="string">"张三"</span>, <span class="number">23</span>) );</span><br><span class="line">		<span class="built_in">map</span>.<span class="built_in">put</span>(<span class="string">"stu2"</span>, <span class="keyword">new</span> Student(<span class="string">"李四"</span>, <span class="number">24</span>) );</span><br><span class="line">		</span><br><span class="line">		<span class="built_in">return</span> <span class="built_in">map</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（2） 修改 index 页面</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"js/jquery-1.8.3.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">	$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">		$(<span class="string">"button"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">			$.ajax(&#123;</span></span><br><span class="line"><span class="actionscript">				url:<span class="string">"test/myAjax.do"</span>,</span></span><br><span class="line"><span class="actionscript">				success:<span class="function"><span class="keyword">function</span><span class="params">(data)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">					alert(data.stu1.name + <span class="string">"  "</span> + data.stu2.age);</span></span><br><span class="line">				&#125;</span><br><span class="line">			&#125;);</span><br><span class="line">		&#125;);</span><br><span class="line">	&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"> <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">button</span>&gt;</span>提交Ajax请求<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="返回-List-集合"><a href="#返回-List-集合" class="headerlink" title="返回 List 集合"></a>返回 List 集合</h4><p>（1） 修改处理器</p>
<img src="/2019/08/15/SpringMVC注解式开发/ann16.png">

<p>（2） 修改 index 页面</p>
<img src="/2019/08/15/SpringMVC注解式开发/ann17.png">


























]]></content>
      <categories>
        <category>SpringMVC</category>
      </categories>
  </entry>
  <entry>
    <title>SpringMVC配置式开发</title>
    <url>/2019/08/14/SpringMVC%E9%85%8D%E7%BD%AE%E5%BC%8F%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>配置式开发是指，“处理器类是程序员手工定义的、实现了特定接口的类，然后在 SpringMVC 配置文件中对该类进行显式的、明确的注册”的开发方式。</p>
<a id="more"></a>


<h2 id="处理器映射器-HandlerMapping"><a href="#处理器映射器-HandlerMapping" class="headerlink" title="处理器映射器 HandlerMapping"></a>处理器映射器 HandlerMapping</h2><p>HandlerMapping 接口负责根据 request 请求找到对应的 Handler 处理器及 Interceptor 拦截器，并将它们封装在 HandlerExecutionChain 对象中，返回给中央调度器。其常用的实现类有两种：</p>
<h3 id="1-BeanNameUrlHandlerMapping"><a href="#1-BeanNameUrlHandlerMapping" class="headerlink" title="1. BeanNameUrlHandlerMapping"></a>1. BeanNameUrlHandlerMapping</h3><p>BeanNameUrlHandlerMapping 处理器映射器， 会根据请求的 url 与 spring 容器中定义的处理器 bean 的 name 属性值进行匹配，从而在 spring 容器中找到处理器 bean 实例。</p>
<img src="/2019/08/14/SpringMVC配置式开发/conf01.jpg">

<p>打开BeanNameUrlHandlerMapping的源码， 从处理器映射器的方法中可以看出，对于处理器的 Bean 的名称，必须以“/”开头，否则无法加入到 urls 数组中。</p>
<img src="/2019/08/14/SpringMVC配置式开发/conf02.jpg">

<blockquote>
<p>缺点：  </p>
<ol>
<li>处理器 Bean 的 id 为一个 url 请求路径，而不是 Bean 的名称，有些不伦不类。  </li>
<li>处理器Bean的定义与请求url绑定在了一起。 若出现多个url请求同一个处理器的情况，就需要在 Spring 容器中配置多个该处理器类的&lt;bean/&gt;。这将导致容器会创建多个该处理器类实例。</li>
</ol>
</blockquote>
<h3 id="2-SimpleUrlHandlerMapping"><a href="#2-SimpleUrlHandlerMapping" class="headerlink" title="2. SimpleUrlHandlerMapping"></a>2. SimpleUrlHandlerMapping</h3><p>SimpleUrlHandlerMapping 处理器映射器，会根据请求的 url 与 Spring 容器中定义的处理器映射器子标签的 key 属性进行匹配。匹配上后，再将该 key 的 value 值与处理器 bean 的 id 值进行匹配，从而在 spring 容器中找到处理器 bean。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 注册HandlerMapping --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.handler.SimpleUrlHandlerMapping"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mappings"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"/my.do"</span>&gt;</span>myController<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"/hello.do"</span>&gt;</span>myController<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 注册处理器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myController"</span> <span class="attr">class</span>=<span class="string">"com.huang.handlers.MyController"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>也可以使用 urlMap 属性：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 注册HandlerMapping --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.handler.SimpleUrlHandlerMapping"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"urlMap"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"/my.do"</span> <span class="attr">value</span>=<span class="string">"myController"</span>/&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"/hello.do"</span> <span class="attr">value</span>=<span class="string">"myController"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>优点：  </p>
<ol>
<li>可以将 url 与处理器的定义分离  </li>
<li>还可以对 url 进行统一映射管理</li>
</ol>
</blockquote>
<h2 id="处理器适配器-HandlerAdapter"><a href="#处理器适配器-HandlerAdapter" class="headerlink" title="处理器适配器 HandlerAdapter"></a>处理器适配器 HandlerAdapter</h2><p>有关适配器模式的详细介绍，请点击<a href="https://www.huangyuanzhi.top/2019/07/28/SSM%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/#more">这里</a></p>
<p>之所以要将 Handler 定义为 Controller 接口的实现类， 就是因为这里使用的处理器适配器是 SimpleControllerHandlerAdapter。打开其源码，可以看到将 handler 强转为了 Controller。在定义 Handler 时，若不将其定义为 Controller 接口的实现类，这里的强转要出错的。</p>
<img src="/2019/08/14/SpringMVC配置式开发/conf03.jpg">


<blockquote>
<p>注意：<br>中央调度器首先会调用该适配器的 supports()方法，判断该 Handler 是否与 Controller 具有 is-a 关系。在具有 is-a 关系的前提下，才会强转。</p>
</blockquote>
<h3 id="1-SimpleControllerHandlerAdapter"><a href="#1-SimpleControllerHandlerAdapter" class="headerlink" title="1. SimpleControllerHandlerAdapter"></a>1. SimpleControllerHandlerAdapter</h3><p>所有实现了 Controller 接口的处理器 Bean，均是通过此适配器进行适配、执行的。Controller 接口中有一个方法：</p>
<img src="/2019/08/14/SpringMVC配置式开发/conf04.jpg">


<p>该方法用于处理用户提交的请求。通过调用 Service 层代码，实现对用户请求的计算响应，并最终将计算所得数据及要响应的页面，封装为一个对象 ModelAndView，返回给中央调度器。</p>
<h3 id="2-HttpRequestHandlerAdapter"><a href="#2-HttpRequestHandlerAdapter" class="headerlink" title="2. HttpRequestHandlerAdapter"></a>2. HttpRequestHandlerAdapter</h3><p>所有实现了 HttpRequestHandler 接口的处理器 Bean，均是通过此适配器进行适配、执行的。 HttpRequestHandler 接口中有一个方法：</p>
<img src="/2019/08/14/SpringMVC配置式开发/conf05.jpg">


<p>该方法没有返回值，不能像 ModelAndView 一样，将数据及目标视图封装为一个对象。但可以将数据直接放入到 request、 session 等域属性中，并由 request 或 response 完成到目标页面的跳转。</p>
<img src="/2019/08/14/SpringMVC配置式开发/conf06.jpg">


<p>此时 springmvc.xml 配置文件中无需声明视图解析器的 Bean 。</p>
<img src="/2019/08/14/SpringMVC配置式开发/conf07.jpg">


<h2 id="处理器"><a href="#处理器" class="headerlink" title="处理器"></a>处理器</h2><p>处理器除了实现 Controller 接口外，还可以继承自一些其它的类来完成一些特殊的功能。</p>
<h3 id="继承自-AbstractController-类"><a href="#继承自-AbstractController-类" class="headerlink" title="继承自 AbstractController 类"></a>继承自 AbstractController 类</h3><p>若处理器继承自 AbstractController 类，那么该控制器就具有了一些新的功能。因为 AbstractController 类还继承自一个父类 WebContentGenerator。</p>
<img src="/2019/08/14/SpringMVC配置式开发/conf08.jpg">


<p>WebContentGenerator 类具有 supportedMethods 属性， 可以设置支持的 HTTP 数据提交方式。 默认支持 GET、 POST。</p>
<img src="/2019/08/14/SpringMVC配置式开发/conf09.jpg">


<p>若处理器继承自 AbstractController 类，那么处理器就可以通过属性 supportedMethods 来限制 HTTP 请求提交方式。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 注册处理器 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 指定只支持 POST 的 HTTP 请求提交方式 ，这里的 POST 必须写为大写--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"/my.do"</span> <span class="attr">class</span>=<span class="string">"com.huang.handlers.MyController"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"supportedMethods"</span> <span class="attr">value</span>=<span class="string">"POST"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>请求只能通过表单或 AJAX 请求方式进行提交，而不能通过地址栏、超链接、 Html 标签中的 src 方式进行提交。因为地址栏、超链接、 Html 标签中的 src 方式都是 GET 提交。 否则，会给出请求方法不允许的 405 错误：</p>
<img src="/2019/08/14/SpringMVC配置式开发/conf10.jpg">


<p>客户端浏览器常用的请求方式，及其提交方式有以下几种：</p>
<table>
<thead>
<tr>
<th align="center">序号</th>
<th align="left">请求方式</th>
<th align="left">提交方式</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="left">表单请求</td>
<td align="left">默认 GET,可以指定 POST</td>
</tr>
<tr>
<td align="center">2</td>
<td align="left">AJAX 请求</td>
<td align="left">默认 GET,可以指定 POST</td>
</tr>
<tr>
<td align="center">3</td>
<td align="left">地址栏请求</td>
<td align="left">GET 请求</td>
</tr>
<tr>
<td align="center">4</td>
<td align="left">超链接请求</td>
<td align="left">GET 请求</td>
</tr>
<tr>
<td align="center">5</td>
<td align="left">src 资源路径请求</td>
<td align="left">GET 请求</td>
</tr>
</tbody></table>
<p>AbstractController 类中有一个抽象方法需要实现：</p>
<img src="/2019/08/14/SpringMVC配置式开发/conf11.jpg">

<p>即定义处理器时，就需要实现其抽象方法 handleRequestInternal()。</p>
<h3 id="继承自-MultiActionController-类"><a href="#继承自-MultiActionController-类" class="headerlink" title="继承自 MultiActionController 类"></a>继承自 MultiActionController 类</h3><p>MultiActionController 类继承自 AbstractController，所以继承自 MultiActionController 类的子类也可以设置 HTTP 请求提交方式。除此之外，继承自该类的处理器中可以定义多个处理方法。 这些方法的签名为公共的方法，返回值为 ModelAndView，包含参数 HttpServletRequest 与 HttpServletResponse，抛出 Exception 异常，方法名随意。</p>
<p>（1） 修改处理器类</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MyController</span> <span class="keyword">extends</span> <span class="title">MultiActionController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	</span><br><span class="line">	public <span class="type">ModelAndView</span> doFirst(<span class="type">HttpServletRequest</span> request, <span class="type">HttpServletResponse</span> response) <span class="keyword">throws</span> <span class="type">Exception</span> &#123;</span><br><span class="line">		<span class="type">ModelAndView</span> mv = <span class="keyword">new</span> <span class="type">ModelAndView</span>();</span><br><span class="line">		mv.addObject(<span class="string">"message"</span>, <span class="string">"执行doFirst()方法"</span>);</span><br><span class="line">		mv.setViewName(<span class="string">"/WEB-INF/jsp/welcome.jsp"</span>);</span><br><span class="line">		<span class="keyword">return</span> mv;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	public <span class="type">ModelAndView</span> doSecond(<span class="type">HttpServletRequest</span> request, <span class="type">HttpServletResponse</span> response) <span class="keyword">throws</span> <span class="type">Exception</span> &#123;</span><br><span class="line">		<span class="type">ModelAndView</span> mv = <span class="keyword">new</span> <span class="type">ModelAndView</span>();</span><br><span class="line">		mv.addObject(<span class="string">"message"</span>, <span class="string">"执行doSecond()方法"</span>);</span><br><span class="line">		mv.setViewName(<span class="string">"/WEB-INF/jsp/welcome.jsp"</span>);</span><br><span class="line">		<span class="keyword">return</span> mv;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（2） 修改 springmvc 配置文件</p>
<p>处理器类的映射路径的写法：要求必须以/xxx/*的路径方式定义映射路径。其中*为通配符，在访问时使用要访问的方法名代替。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 注册HandlerMapping --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.handler.SimpleUrlHandlerMapping"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"urlMap"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"/my/*.do"</span> <span class="attr">value</span>=<span class="string">"myController"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 注册处理器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myController"</span> <span class="attr">class</span>=<span class="string">"com.huang.handlers.MyController"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>（3） 访问方式</p>
<img src="/2019/08/14/SpringMVC配置式开发/conf12.jpg">


<h4 id="InternalPathMethodNameResolver-方法名解析器"><a href="#InternalPathMethodNameResolver-方法名解析器" class="headerlink" title="InternalPathMethodNameResolver 方法名解析器"></a>InternalPathMethodNameResolver 方法名解析器</h4><p>MultiActionController 类具有一个默认的 MethodNameResolver 解析器。该方法名解析器要求方法名以 URI 中资源名称的身份出现，即方法作为一种可以被请求的资源出现。即前面的写法： /xxx/方法名。</p>
<img src="/2019/08/14/SpringMVC配置式开发/conf13.jpg">


<h4 id="PropertiesMethodNameResolver-方法名解析器"><a href="#PropertiesMethodNameResolver-方法名解析器" class="headerlink" title="PropertiesMethodNameResolver 方法名解析器"></a>PropertiesMethodNameResolver 方法名解析器</h4><p>该方法名解析器中的方法名是作为 URI 资源名称中的一部分出现的，即方法名并非单独作为一种资源名称出现。例如请求时可以写为/xxx_doFirst，则会访问 xxx 所映射的处理器的doFirst()方法。</p>
<p>（1） 修改 springmvc配置文件</p>
<img src="/2019/08/14/SpringMVC配置式开发/conf14.jpg">

<blockquote>
<p>注意：<br>这里的指定的请求，必须要加上.do，否则，无法完成匹配，将报 404 错误。</p>
</blockquote>
<p>（2） 访问方式</p>
<img src="/2019/08/14/SpringMVC配置式开发/conf15.jpg">


<h4 id="ParameterMethodNameResolver-方法名解析"><a href="#ParameterMethodNameResolver-方法名解析" class="headerlink" title="ParameterMethodNameResolver 方法名解析"></a>ParameterMethodNameResolver 方法名解析</h4><p>该方法名解析器中的方法名作为请求参数的值出现。</p>
<p>（1） 修改 springmvc配置文件</p>
<img src="/2019/08/14/SpringMVC配置式开发/conf16.jpg">

<p>（2） 访问方式</p>
<img src="/2019/08/14/SpringMVC配置式开发/conf17.jpg">


<p>不指定参数名称，则可以使用 action 作为参数。</p>
<p>（1） 修改 springmvc 配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.handler.SimpleUrlHandlerMapping"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"urlMap"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"/my.do"</span> <span class="attr">value-ref</span>=<span class="string">"myController"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 注册方法名称解析器 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 不指定paramName属性，则默认参数名称是action --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"parameterMethodNameResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.mvc.multiaction.ParameterMethodNameResolver"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 注册处理器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myController"</span> <span class="attr">class</span>=<span class="string">"com.huang.handlers.MyController"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"methodNameResolver"</span> <span class="attr">ref</span>=<span class="string">"parameterMethodNameResolver"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>（2） 访问方式</p>
<img src="/2019/08/14/SpringMVC配置式开发/conf18.jpg">


<h2 id="ModelAndView"><a href="#ModelAndView" class="headerlink" title="ModelAndView"></a>ModelAndView</h2><p>ModelAndView 即模型与视图 ，通过 addObject()方法向模型中添加数据，通过setViewName()方法向模型添加视图名称。</p>
<h3 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h3><h4 id="模型的本质就是-HashMap"><a href="#模型的本质就是-HashMap" class="headerlink" title="模型的本质就是 HashMap"></a>模型的本质就是 HashMap</h4><p>跟踪 addObject()方法，可以看出这里的模型就是 ModelMap，而 ModelMap 的本质就是个 HashMap，向 ModelAndView 中添加数据，就是向 HashMap 中添加数据。</p>
<img src="/2019/08/14/SpringMVC配置式开发/conf19.jpg">

<img src="/2019/08/14/SpringMVC配置式开发/conf20.jpg">

<img src="/2019/08/14/SpringMVC配置式开发/conf21.jpg">

<img src="/2019/08/14/SpringMVC配置式开发/conf22.jpg">


<h4 id="HashMap-是一个单向查找数组"><a href="#HashMap-是一个单向查找数组" class="headerlink" title="HashMap 是一个单向查找数组"></a>HashMap 是一个单向查找数组</h4><p>HashMap底层是哈希表(散列表)，哈希表就是一个数组，数组的每个元素是一个单向链表；即 HashMap 的本质是一个单向链表数组。HashMap 类的内部类为 Entry 类，是一个可单向链表的数据结构：因为其只能通过 next 查找下一个元素，而无法查找上一个元素。</p>
<h4 id="LinkedHashMap"><a href="#LinkedHashMap" class="headerlink" title="LinkedHashMap"></a>LinkedHashMap</h4><p>LinkedHashMap(双向链表) 的本质是一个 HashMap，但其将 Entry 内部类进行了扩展。 LinkedHashMap 中的 Entry 变为了双向的，可以通过 before 查找上一个元素，通过 after 查找下一个元素。 即从性能上说，LinkedHashMap 的操作性能要高于 HashMap。</p>
<blockquote>
<p>总结：<br>ModelAndView 中的模型对象是 ModelMap，其本质是一个 HashMap，向 ModelMap 中添加数据就是向 HashMap 中添加数据。这个 ModelMap 要比 HashMap 的性能更高。</p>
</blockquote>
<h3 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h3><p>通过 setViewName()指定视图名称。注意，这里的视图名称将会对应一个视图对象，一般是不会在这里直接写上要跳转的页面的。这个视图对象，将会被封装在ModelAndView中，传给视图解析器来解析，最终转换为相应的页面。 但需要注意的是，这里的 View 对象本质仅仅是一个 String 而已。后续的步骤中，还会继续对这个 View 对象进行进一步的封装。</p>
<img src="/2019/08/14/SpringMVC配置式开发/conf23.jpg">

<p>若处理器方法返回的 ModelAndView 中并没有数据要携带，则可直接通过 ModelAndView 的带参构造器将视图名称放入 ModelAndView 中。</p>
<img src="/2019/08/14/SpringMVC配置式开发/conf24.jpg">


<h2 id="视图解析器-ViewResolver"><a href="#视图解析器-ViewResolver" class="headerlink" title="视图解析器 ViewResolver"></a>视图解析器 ViewResolver</h2><p>视图解析器 ViewResolver 接口负责将处理结果生成 View 视图。 常用的实现类有四种：</p>
<h3 id="1-InternalResourceViewResolver-默认"><a href="#1-InternalResourceViewResolver-默认" class="headerlink" title="1. InternalResourceViewResolver(默认)"></a>1. InternalResourceViewResolver(默认)</h3><p>该视图解析器用于完成对当前 Web 应用内部资源的封装与跳转。而对于内部资源的查找规则是，将 ModelAndView 中指定的视图名称与为视图解析器配置的前辍与后辍相结合的方式， 拼接成一个 Web 应用内部资源路径。拼接规则是： 前辍 + 视图名称 + 后辍。</p>
<p>InternalResourceView 解析器会把处理器方法返回的模型属性都存放到对应的 request 中，然后将请求转发到目标 URL。</p>
<img src="/2019/08/14/SpringMVC配置式开发/conf25.jpg">


<blockquote>
<p>缺点：  </p>
<ol>
<li>只可以完成将内部资源封装后的跳转。但无法转向外部资源，如外部网页。  </li>
<li>对于内部资源的定义，也只能定义一种格式的资源：存放于同一目录的同一文件类型的资源文件。</li>
</ol>
</blockquote>
<h3 id="2-BeanNameViewResolver"><a href="#2-BeanNameViewResolver" class="headerlink" title="2. BeanNameViewResolver"></a>2. BeanNameViewResolver</h3><p>BeanNameViewResolver 视图解析器，顾名思义就是将资源封装为“Spring 容器中注册的 Bean 实例”， ModelAndView 通过设置视图名称为该 Bean 的 id 属性值来完成对该资源的访问。 所以在 springmvc.xml 中， 可以定义多个 View 视图 Bean，让处理器中 ModelAndView 通过对这些 Bean 的 id 的引用来完成向 View 中封装资源的跳转。</p>
<ul>
<li>RedirectView： 定义外部资源视图对象</li>
<li>JstlView： 定义内部资源视图对象</li>
</ul>
<p>（1） 修改 springmvc 配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 定义一个外部资源视图：京东 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jd"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.RedirectView"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"http://www.jd.com"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">       </span><br><span class="line"><span class="comment">&lt;!-- 定义一个外部资源视图：淘宝 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"taobao"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.RedirectView"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"http://www.taobao.com"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 定义一个内部资源视图 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"internalResource"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.JstlView"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/jsp/welcome.jsp"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 注册视图解析器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.BeanNameViewResolver"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 注册处理器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"/my.do"</span> <span class="attr">class</span>=<span class="string">"com.huang.handlers.MyController"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>（2） 修改处理器类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyController</span> <span class="keyword">implements</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> ModelAndView <span class="title">handleRequest</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">//		return new ModelAndView("taobao");</span></span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> ModelAndView(<span class="string">"jd"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>缺点：<br>需要定义的 View 视图对象很多时，就会使 springmvc.xml 文件变得很大，很臃肿，不便于管理。</p>
</blockquote>
<h3 id="3-XmlViewResolver"><a href="#3-XmlViewResolver" class="headerlink" title="3. XmlViewResolver"></a>3. XmlViewResolver</h3><p>XmlViewResolver 解析器是将 View 视图对象专门抽取出来，单独定义为一个 xml 文件。</p>
<p>（1） 定义 myView 配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 定义一个外部资源视图：淘宝 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"taobao"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.RedirectView"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"http://www.taobao.com"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 定义一个外部资源视图：京东 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jd"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.RedirectView"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"http://www.jd.com"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 定义一个内部资源视图 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"internalResource"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.JstlView"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/jsp/welcome.jsp"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>（2） 定义 springmvc 配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 注册视图解析器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.XmlViewResolver"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"location"</span> <span class="attr">value</span>=<span class="string">"classpath:myViews.xml"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 注册处理器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"/my.do"</span> <span class="attr">class</span>=<span class="string">"com.huang.handlers.MyController"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="4-ResourceBundleViewResolver"><a href="#4-ResourceBundleViewResolver" class="headerlink" title="4. ResourceBundleViewResolver"></a>4. ResourceBundleViewResolver</h3><p>ResourceBundleViewResolver 解析器需要定义在类路径下，即 src 下。而对于属性文件的写法，是有格式要求的：</p>
<p>资源名称.(class)=封装资源的 View 全限定性类名<br>资源名称.url=资源路径</p>
<p>（1） 定义 properties 文件</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">taobao.(class)=org<span class="selector-class">.springframework</span><span class="selector-class">.web</span><span class="selector-class">.servlet</span><span class="selector-class">.view</span><span class="selector-class">.RedirectView</span></span><br><span class="line">taobao.url=http:<span class="comment">//www.taobao.com</span></span><br><span class="line"></span><br><span class="line">jd.(class)=org<span class="selector-class">.springframework</span><span class="selector-class">.web</span><span class="selector-class">.servlet</span><span class="selector-class">.view</span><span class="selector-class">.RedirectView</span></span><br><span class="line">jd.url=http:<span class="comment">//www.jd.com</span></span><br><span class="line"></span><br><span class="line">internalResource.(class)=org<span class="selector-class">.springframework</span><span class="selector-class">.web</span><span class="selector-class">.servlet</span><span class="selector-class">.view</span><span class="selector-class">.JstlView</span></span><br><span class="line">internalResource.url=/WEB-INF/jsp/welcome.jsp</span><br></pre></td></tr></table></figure>

<p>（2） 定义 springmvc 配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 注册视图解析器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.ResourceBundleViewResolver"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basename"</span> <span class="attr">value</span>=<span class="string">"myViews"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 注册处理器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"/my.do"</span> <span class="attr">class</span>=<span class="string">"com.huang.handlers.MyController"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="视图解析器的优先级"><a href="#视图解析器的优先级" class="headerlink" title="视图解析器的优先级"></a>视图解析器的优先级</h3><p>视图解析器有一个 order 属性，专门用于设置多个视图解析器的优先级。 数字越小，优先级越高。数字相同，先注册的优先级高。 一般不为 InternalResourceViewResolver 解析器指定优先级，即让其优先级是最低的。</p>
<img src="/2019/08/14/SpringMVC配置式开发/conf26.jpg">


<p>若没有 order 属性，四个视图解析器中，ResourceBundleViewResolver 解析器的优先级最高。</p>
]]></content>
      <categories>
        <category>SpringMVC</category>
      </categories>
  </entry>
  <entry>
    <title>SpringMVC概述</title>
    <url>/2019/08/12/SpringMVC%E6%A6%82%E8%BF%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>SpringMVC 全称是 Spring Web MVC，是 Spring 框架一部分，是一个 MVC 的框架，和 Struts2 一样是一个表现层框架，是在 Spring3.0 后发布的。</p>
<a id="more"></a>


<h2 id="SpringMVC简介"><a href="#SpringMVC简介" class="headerlink" title="SpringMVC简介"></a>SpringMVC简介</h2><img src="/2019/08/12/SpringMVC概述/mvc01.jpg">


<p>由以上 Spring 的结构图可以看出， Spring 由四大部分组成： Dao 部分（DAO 与 ORM）、AOP 部分、 Web 部分（JEE 与 Web），及 IoC 容器部分（Core）。Web 部分第一个就是 Spring Web MVC，其实 SpringMVC 是 Spring 框架的一个模块</p>
<h2 id="第一个SpringMVC程序"><a href="#第一个SpringMVC程序" class="headerlink" title="第一个SpringMVC程序"></a>第一个SpringMVC程序</h2><p>需求：<br>用户提交一个请求，服务端处理器在接收到这个请求后，给出一条欢迎信息，在响应页面中显示该信息。</p>
<h3 id="开发流程"><a href="#开发流程" class="headerlink" title="开发流程"></a>开发流程</h3><h4 id="1-注册中央调度器"><a href="#1-注册中央调度器" class="headerlink" title="1. 注册中央调度器"></a>1. 注册中央调度器</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 注册中央调度器 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">   	<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">   	<span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">   	</span><br><span class="line">   	<span class="comment">&lt;!-- 指定springMVC配置文件的位置及文件名 --&gt;</span></span><br><span class="line">   	<span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">   		<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">   		<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">   	<span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">   	</span><br><span class="line">   	<span class="comment">&lt;!-- 在Tomcat启动时直接创建当前Servlet --&gt;</span></span><br><span class="line">   	<span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">   	<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">   	<span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.do<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">   <span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">   	<span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="lt-load-on-startup-gt"><a href="#lt-load-on-startup-gt" class="headerlink" title="&lt;load-on-startup/&gt;"></a>&lt;load-on-startup/&gt;</h5><p>在&lt;servlet/&gt;中添加&lt;load-on-startup/&gt;的作用是，标记是否在Web服务器（这里是Tomcat）启动时会创建这个 Servlet 实例，即是否在 Web 服务器启动时调用执行该 Servlet 的 init()方法， 而不是在真正访问时才创建。它的值必须是一个整数。</p>
<ul>
<li>当值大于等于 0 时，表示容器在启动时就加载并初始化这个 servlet，数值越小，该 Servlet 的优先级就越高， 其被创建的也就越早。  </li>
<li>当值小于 0 或者没有指定时，则表示该 Servlet 在真正被使用时才会去创建。  </li>
<li>当值相同时，容器会自己选择创建顺序。</li>
</ul>
<h5 id="lt-url-pattern-gt"><a href="#lt-url-pattern-gt" class="headerlink" title="&lt;url-pattern/&gt;"></a>&lt;url-pattern/&gt;</h5><p>对于&lt;url-pattern/&gt;，不能写为/*，最好也不要写为/，建议写为*.do 的形式。</p>
<h4 id="2-定义处理器"><a href="#2-定义处理器" class="headerlink" title="2. 定义处理器"></a>2. 定义处理器</h4><p>该处理器需要实现 Controller 接口。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyController</span> <span class="keyword">implements</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> ModelAndView <span class="title">handleRequest</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">		mv.addObject(<span class="string">"message"</span>, <span class="string">"Hello SpringMVC World!"</span>);</span><br><span class="line">		mv.setViewName(<span class="string">"welcome"</span>);</span><br><span class="line">		<span class="keyword">return</span> mv;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：<br>odelAndView 类中的 addObject()方法用于向其 Model 中添加数据。 Model 的底层为一个 Map。addObject()方法的返回值为 ModelAndView，则说明可向该 Model 中连续添加多个数据。</p>
</blockquote>
<h4 id="3-定义目标页面"><a href="#3-定义目标页面" class="headerlink" title="3. 定义目标页面"></a>3. 定义目标页面</h4><p>在 WEB-INF 目录下新建一个子目录 jsp，在其中新建一个 jsp 页面 welcome.jsp。</p>
<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">language</span>=<span class="string">"java"</span> <span class="attr">contentType</span>=<span class="string">"text/html; charset=ISO-8859-1"</span></span></span></span><br><span class="line"><span class="xml">    pageEncoding="UTF-8"%&gt;</span></span><br><span class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE html&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span>welcome page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml">	$</span><span class="template-variable">&#123;message &#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h4 id="4-创建-SpringMVC-配置文件"><a href="#4-创建-SpringMVC-配置文件" class="headerlink" title="4. 创建 SpringMVC 配置文件"></a>4. 创建 SpringMVC 配置文件</h4><p>在工程的类路径即 src 目录下创建 SpringMVC 的配置文件 springmvc.xml。该文件名可以任意命名。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">   <span class="comment">&lt;!-- 注册视图解析器 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/jsp/"</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 注册处理器 :</span></span><br><span class="line"><span class="comment">处理器的 id 属性值为一个请求 URI。</span></span><br><span class="line"><span class="comment">表示当客户端提交该请求时，会访问 class 指定的这个处理器。</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"/my.do"</span> <span class="attr">class</span>=<span class="string">"com.huang.handlers.MyController"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="5-定义-index-页面"><a href="#5-定义-index-页面" class="headerlink" title="5. 定义 index 页面"></a>5. 定义 index 页面</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">language</span>=<span class="string">"java"</span> <span class="attr">import</span>=<span class="string">"java.util.*"</span> <span class="attr">pageEncoding</span>=<span class="string">"UTF-8"</span>%&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>My JSP 'index.jsp' starting page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    This is my JSP page. <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="SpringMVC执行流程"><a href="#SpringMVC执行流程" class="headerlink" title="SpringMVC执行流程"></a>SpringMVC执行流程</h2><img src="/2019/08/12/SpringMVC概述/mvc02.jpg">


<h3 id="执行流程简单分析"><a href="#执行流程简单分析" class="headerlink" title="执行流程简单分析"></a>执行流程简单分析</h3><p>（1）浏览器提交请求到中央调度器。<br>（2）中央调度器直接将请求转给处理器映射器。<br>（3）处理器映射器会根据请求，找到处理该请求的处理器，并将其封装为处理器执行链后返回给中央调度器。<br>（4）中央调度器根据处理器执行链中的处理器，找到能够执行该处理器的处理器适配器。<br>（5）处理器适配器调用执行处理器。<br>（6）处理器将处理结果及要跳转的视图封装到一个对象 ModelAndView 中，并将其返回给处理器适配器。<br>（7）处理器适配器直接将结果返回给中央调度器。<br>（8）中央调度器调用视图解析器，将 ModelAndView 中的视图名称封装为视图对象。<br>（9）视图解析器将封装了的视图对象返回给中央调度器。<br>（10）中央调度器调用视图对象，让其自己进行渲染，即进行数据填充，形成响应对象。<br>（11）中央调度器响应浏览器。</p>
<h3 id="API-简要说明"><a href="#API-简要说明" class="headerlink" title="API 简要说明"></a>API 简要说明</h3><h4 id="DispatcherServlet"><a href="#DispatcherServlet" class="headerlink" title="DispatcherServlet"></a>DispatcherServlet</h4><p>中央调度器，也称为前端控制器，在 MVC 架构模式中充当控制器 C， DispatcherServlet是整个流程的控制中心，由它调用诸如处理器映射器、处理器适配器、视图解析器等其它组件处理用户请求。 中央调度器的存在降低了组件之间的耦合度。</p>
<h4 id="HandlerMapping"><a href="#HandlerMapping" class="headerlink" title="HandlerMapping"></a>HandlerMapping</h4><p>处理器映射器， 负责根据用户请求找到相应的将要执行的 Handler，即处理器。 即用于完成将用户请求映射为要处理该请求的处理器，并将处理器封装为处理器执行链传给中央调度器。</p>
<h4 id="HandlAdapter"><a href="#HandlAdapter" class="headerlink" title="HandlAdapter"></a>HandlAdapter</h4><p>处理器适配器， 通过 HandlerAdapter 对处理器进行执行，这是适配器模式的应用，通过扩展适配器可以对更多类型的处理器进行执行。 中央调度器会根据不同的处理器自动为处理器选择适配器，以执行处理器。</p>
<h4 id="Handler"><a href="#Handler" class="headerlink" title="Handler"></a>Handler</h4><p>处理器，也称为后端控制器，在 DispatcherServlet 的控制下 Handler 调用 Service 层对具体的用户请求进行处理。由于 Handler 涉及到具体的用户业务请求，所以一般情况下需要程序员根据业务需求自己开发 Handler。</p>
<h4 id="ViewResolver"><a href="#ViewResolver" class="headerlink" title="ViewResolver"></a>ViewResolver</h4><p>视图解析器， 负责将处理结果生成 View 视图， ViewResolver 首先将逻辑视图名解析为物理视图名，即具体的页面地址，再生成 View 视图对象。最后将处理结果通过页面形式展示给用户。<br>SpringMVC 框架提供了很多的 View 视图类型，包括： JstlView、 RedirectView 等。一般情况下需要通过页面标签或页面模版技术将模型数据通过页面展示给用户，需要由程序员根据业务需求开发具体的页面。</p>
<h3 id="DispatcherServlet-的默认配置"><a href="#DispatcherServlet-的默认配置" class="headerlink" title="DispatcherServlet 的默认配置"></a>DispatcherServlet 的默认配置</h3><table>
<thead>
<tr>
<th align="center">组件名称</th>
<th align="center">默认值</th>
</tr>
</thead>
<tbody><tr>
<td align="center">处理器映射器</td>
<td align="center">BeanNameUrlHandlerMappering<br>DefaultAnnotationHandlerMapping</td>
</tr>
<tr>
<td align="center">处理器适配器</td>
<td align="center">HttpRequestHandlerAdaper<br>SimpleControllerHandlerAdaper<br>AnnotationMethodHandlerAdaper</td>
</tr>
<tr>
<td align="center">视图解析器</td>
<td align="center">InternalResourceViewResolver</td>
</tr>
</tbody></table>
<h2 id="详解-lt-url-pattern-gt"><a href="#详解-lt-url-pattern-gt" class="headerlink" title="详解&lt;url-pattern/&gt;"></a>详解&lt;url-pattern/&gt;</h2><h3 id="配置详解"><a href="#配置详解" class="headerlink" title="配置详解"></a>配置详解</h3><h4 id="建议写为-do-形式"><a href="#建议写为-do-形式" class="headerlink" title="建议写为*.do 形式"></a>建议写为*.do 形式</h4><p>在没有特殊要求的情况下， SpringMVC 的中央调度器 DispatcherServlet 的&lt;url-pattern/&gt;常使用后辍匹配方式，如写为*.do。</p>
<h4 id="不能写为"><a href="#不能写为" class="headerlink" title="不能写为/*"></a>不能写为/*</h4><p>这里的 url-pattern 不能写为/*，因为 DispatcherServlet 会将向动态页面的跳转请求， 即向 JSP 页面的跳转请求也当作是一个普通的 Controller 请求。 中央调度器会调用处理器映射器为其查找相应的处理器。当然是找不到的，所以在这种情况下， 所有的 JSP 页面跳转均会报 404 错误。</p>
<h4 id="最好也不要写为"><a href="#最好也不要写为" class="headerlink" title="最好也不要写为/"></a>最好也不要写为/</h4><p>最好也不要写为/，因为 DispatcherServlet 会将向静态资源的获取请求，例如.css、 .js、 .jpg、 .png 等资源的获取请求，当作是一个普通的 Controller 请求。 中央调度器会调用处理器映射器为其查找相应的处理器。当然也是找不到的，所以在这种情况下，所有的静态资源获取请求也均会报 404 错误(动态资源不会提交)。</p>
<h3 id="静态资源访问"><a href="#静态资源访问" class="headerlink" title="静态资源访问"></a>静态资源访问</h3><h4 id="1-使用-Tomcat-中名为-default-的-Servlet"><a href="#1-使用-Tomcat-中名为-default-的-Servlet" class="headerlink" title="1. 使用 Tomcat 中名为 default 的 Servlet"></a>1. 使用 Tomcat 中名为 default 的 Servlet</h4><p>在 Tomcat 中，有一个专门用于处理静态资源访问的 Servlet – DefaultServlet。 其&lt;servlet-name/&gt;为 default。可以处理各种静态资源访问请求。 该 Servlet 注册在 Tomcat 服务器的 web.xml 中。在 Tomcat 安装目录/conf/web.xml。</p>
<img src="/2019/08/12/SpringMVC概述/mvc03.jpg">


<p>直接在 web.xml 中注册&lt;servlet-mapping/&gt;即可使用。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>default<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.png<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>default<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.css<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>default<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.js<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="2-使用-lt-mvc-default-servlet-handler-gt"><a href="#2-使用-lt-mvc-default-servlet-handler-gt" class="headerlink" title="2. 使用&lt;mvc:default-servlet-handler/*gt;"></a>2. 使用&lt;mvc:default-servlet-handler/*gt;</h4><figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line">&lt;mvc:<span class="keyword">default</span>-servlet-<span class="keyword">handler</span>/&gt;</span><br></pre></td></tr></table></figure>

<p>&lt;mvc:default-servlet-handler/&gt; 会将对静态资源的访问请求添加到 SimpleUrlHandlerMapping 的 urlMap 中， key 就是请求的 URI， 而 value 则为默认 Servlet 请求处理器 DefaultServletHttpRequestHandler 对象。而该处理器调用了 Tomcat 的 DefaultServlet 来处理静态资源的访问请求。</p>
<blockquote>
<p>注意：<br>使用&lt;mvc: …/&gt;标签，需要引入 mvc 约束。</p>
</blockquote>
<h4 id="3-使用-lt-mvc-resources-gt"><a href="#3-使用-lt-mvc-resources-gt" class="headerlink" title="3. 使用&lt;mvc:resources/&gt;"></a>3. 使用&lt;mvc:resources/&gt;</h4><p>在 Spring3.0.4 版本后， Spring 中定义了专门用于处理静态资源访问请求的处理器 ResourceHttpRequestHandler。并且添加了&lt;mvc:resources/&gt;标签，专门用于解决静态资源无法访问问题。 需要在 springmvc.xml 中添加如下形式的配置：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&lt;mvc:resources <span class="attribute">location</span>=<span class="string">"/images/"</span> <span class="attribute">mapping</span>=<span class="string">"/images/**"</span>/&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>location 表示静态资源所在目录。 当然，这里的目录包含/WEB-INF/目录及其子目录。  </li>
<li>mapping 表示对该资源的请求。 注意，后面是两个星号**。</li>
</ul>
<p>该配置会把对该静态资源的访问请求添加到 SimpleUrlHandlerMapping 的 urlMap 中， key 就是真正与 mapping 的 URI 匹配的 URI ， 而 value 则为静态资源处理器对象<br>ResourceHttpRequestHandler。</p>
<h2 id="绝对路径与相对路径"><a href="#绝对路径与相对路径" class="headerlink" title="绝对路径与相对路径"></a>绝对路径与相对路径</h2><p>前面对于 my.do 请求的提交是通过地址栏直接提交请求的。对于浏览器请求的提交方式，还可以有表单提交、超链接提交、 Ajax 提交等。与地址栏提交不同的时，这些提交方式均需要将请求写在页面文件中。下面以超链接提交方式来讲解有关路径问题。</p>
<h3 id="访问路径与资源名称"><a href="#访问路径与资源名称" class="headerlink" title="访问路径与资源名称"></a>访问路径与资源名称</h3><p>通常的 URL 资源访问路径由两部分构成： 访问路径与资源名称。资源名称指的是要访问资源的直接名称，如 index.jsp，或与要访问资源存在映射关系的间接名称，如 my.do。而访问路径，则是通过该路径则可以定位到指定的资源，即在 URL 资源访问路径中除了资源名称以外的其它部分。</p>
<img src="/2019/08/12/SpringMVC概述/mvc04.jpg">


<p>据“访问路径是否可以独立完成资源准确定位”的判别标准，可以将访问路径分为绝对路径与相对路径。</p>
<h3 id="绝对路径"><a href="#绝对路径" class="headerlink" title="绝对路径"></a>绝对路径</h3><p>绝对路径，是指根据给出的访问路径可以准确定位到资源的路径。对于计算机中 Web 应用的绝对路径， 则是指带访问协议的路径。 例如下面的路径就是一个带有 http 访问协议的绝对路径。</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">http:<span class="regexp">//</span>localhost:<span class="number">8080</span><span class="regexp">/primary/my</span>.<span class="keyword">do</span></span><br></pre></td></tr></table></figure>

<h3 id="相对路径"><a href="#相对路径" class="headerlink" title="相对路径"></a>相对路径</h3><p>相对路径，是指仅根据访问路径无法准确定位资源的路径。 相对路径必须要结合其参照路径才可组成可以准确定位资源的绝对路径。 参照路径的不同，所形成的可以准确定位资源的绝对路径也是不同的。在进行资源访问时，必须要将相对路径转换为绝对路径才可完成资源的准确定位。</p>
<p>在 Web 应用中，相对路径的写法有两种：一种是以斜杠开头的相对路径，一种是不以斜杠开头的相对路径。 根据相对路径是否以斜杠开头，且出现的文件所处位置的不同，其默认的参照路径是不同的。 这也是相对路径容易出错的地方。</p>
<h4 id="1-以斜杠开头的相对路径"><a href="#1-以斜杠开头的相对路径" class="headerlink" title="1. 以斜杠开头的相对路径"></a>1. 以斜杠开头的相对路径</h4><p>以斜杠开头的相对路径，根据路径所在文件所处位置的不同，分为两种：前台路径与后台路径。</p>
<h5 id="前台路径"><a href="#前台路径" class="headerlink" title="前台路径"></a>前台路径</h5><p>所谓前台路径是指，由浏览器解析执行的代码中所包含的路径。例如， html、 css、 js中的路径，及 jsp 中静态部分的路径。像 html 及 jsp 中的静态部分中的&lt;img src=””/&gt;、 &lt;a href=””&gt;&lt;/a&gt;、 &lt;form action=””&gt;&lt;/form&gt;等；像 css 中的 background:img(“”)等；像 js 中的 window.location.href=””等，都属于前台路径。<br>前台路径的参照路径是 Web 服务器的根路径，即 <a href="http://localhost:8080/" target="_blank" rel="noopener">http://localhost:8080/</a></p>
<h5 id="后台路径"><a href="#后台路径" class="headerlink" title="后台路径"></a>后台路径</h5><p>所谓后台路径是指，由服务器解析执行的代码及文件中所包含的路径。例如， java 代码中的路径、 jsp 文件动态部分（java 代码块） 中的路径、 xml 文件中的路径（xml 文件是要被java 代码加载入内存，并由 java 代码解析的）等。<br>后台路径的参照路径是 Web 应用的根路径。<a href="http://localhost:8080/primary/" target="_blank" rel="noopener">http://localhost:8080/primary/</a></p>
<h5 id="后台路径特例"><a href="#后台路径特例" class="headerlink" title="后台路径特例"></a>后台路径特例</h5><p>当代码中使用 response 的 sendRedirect()方法进行重定向时，其参照路径不是 web 应用的根路径，而是 web 服务器的根路径。所以若要使用重定向，要么写为无斜杠的相对路径(在定义处理器接口步骤修改Java代码)：</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">response.send<span class="constructor">Redirect(“<span class="params">welcome</span>.<span class="params">jsp</span>”)</span>;</span><br></pre></td></tr></table></figure>

<p>要么写在路径上添加上项目名称：</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">response.send<span class="constructor">Redirect(<span class="params">request</span>.<span class="params">getContextPath</span> + “<span class="operator">/</span><span class="params">welcome</span>.<span class="params">jsp</span>”)</span>;</span><br></pre></td></tr></table></figure>

<h5 id="2-不以斜杠开头的相对路径"><a href="#2-不以斜杠开头的相对路径" class="headerlink" title="2. 不以斜杠开头的相对路径"></a>2. 不以斜杠开头的相对路径</h5><p>不以斜杠开头的相对路径，无论是前台路径，还是后台路径， 其参照路径都是当前资源的访问路径，而不是当前资源的保存路径(去掉资源名称)。</p>
<h3 id="相关现象解析"><a href="#相关现象解析" class="headerlink" title="相关现象解析"></a>相关现象解析</h3><h4 id="为什么页面超链接的-herf-属性值加上斜杠会报错"><a href="#为什么页面超链接的-herf-属性值加上斜杠会报错" class="headerlink" title="为什么页面超链接的 herf 属性值加上斜杠会报错"></a>为什么页面超链接的 herf 属性值加上斜杠会报错</h4><h5 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h5><p>为什么在 springmvc.xml 中注册处理器时其 name 属性值是以斜杠开头，而 index.jsp 页面中的超链接的 herf 属性值加上斜杠后会报错？</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;bean id=<span class="string">"/my.do"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.huang.handlers.MyController"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>解释：<br>这是后台路径：出现在Java代码、xml文件或properties等配置文件中的，以斜杠/开头的路径为后台路径<br>后台路径的参照路径是：当前web应用的根 <a href="http://localhost:8080/requestPath" target="_blank" rel="noopener">http://localhost:8080/requestPath</a><br>绝对路径 = 参照路径 + 相对路径<br>这里对于处理器的注册，意思是，若要想访问MyController这个处理器，必须提交一个请求，这个请求，以后台路径的方式给出这个/my.do后台路径，转变为绝对路径是： <a href="http://localhost:8080/requestPath/my.do" target="_blank" rel="noopener">http://localhost:8080/requestPath/my.do</a><br>也就是说，用户若要访问MyContrller这个处理器，必须提交的请求为： <a href="http://localhost:8080/requestPath/my.do" target="_blank" rel="noopener">http://localhost:8080/requestPath/my.do</a></p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 这个请求是访问不到的 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/my.do"</span>&gt;</span>跳转到welcome页面<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>解释：<br>这个是前台路径：出现在jsp页面中的路径，就是前台路径<br>前台路径的参照路径是：当前web服务器的根，就本例而言，当前web服务器的根是： <a href="http://localhost:8080" target="_blank" rel="noopener">http://localhost:8080</a><br>绝对路径 = 参照路径 + 相对路径<br>这里提交的请求是以相对路径的方式提交的，将这个相对路径转变为绝对路径是： <a href="http://localhost:8080/my.do" target="_blank" rel="noopener">http://localhost:8080/my.do</a><br>也就是说，这里提交的请求是： http:/localhost:8080/my.do</p>
</blockquote>
<h5 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h5><p>（1） 手工为 href 属性值的相对路径上添加项目名称(不建议使用此方法)。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/requestPath/my.do"</span>&gt;</span>跳转到welcome页面<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>（2） 通过 EL 表达式${pageContext.request.contextPath}动态的获取到项目名称。</p>
<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;pageContext.request.contextPath &#125;</span><span class="xml"><span class="tag"><span class="string">/my.do"</span>&gt;</span>跳转到welcome页面<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h4 id="为什么跳转回-index-页面后地址栏会多出一个-test"><a href="#为什么跳转回-index-页面后地址栏会多出一个-test" class="headerlink" title="为什么跳转回 index 页面后地址栏会多出一个 test"></a>为什么跳转回 index 页面后地址栏会多出一个 test</h4><h5 id="原因分析-1"><a href="#原因分析-1" class="headerlink" title="原因分析"></a>原因分析</h5><p>为什么会多出一个/test 呢？因为超链接的 herf 属性值为无斜杠的相对路径，所以其参照路径为当前的访问路径 。 </p>
<p>（1） springmvc 配置文件</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&lt;bean <span class="attribute">id</span>=<span class="string">"/test/my.do"</span> <span class="attribute">class</span>=<span class="string">"com.huang.handlers.MyController"</span>/&gt;</span><br></pre></td></tr></table></figure>

<p>（2） index 页面</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"test/my.do"</span>&gt;</span>我是一个表单的提交按键<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<img src="/2019/08/12/SpringMVC概述/mvc05.jpg">


<blockquote>
<p>解释：<br>请求路径 = 访问路径 + 资源名称<br>不带斜杠的相对路径，其参照路径是：当前的访问路径<br>绝对路径 = 参照路径 + 相对路径<br>发出第一次请求时的访问路径是： <a href="http://localhost:8080/requestPath" target="_blank" rel="noopener">http://localhost:8080/requestPath</a><br>当前超链接所提交的相对路径转变为绝对路径是： <a href="http://localhost:8080/requestPath/test/my.do" target="_blank" rel="noopener">http://localhost:8080/requestPath/test/my.do</a><br>发出第一次请求时的访问路径是： <a href="http://localhost:8080/requestPath/test" target="_blank" rel="noopener">http://localhost:8080/requestPath/test</a><br>当前超链接所提交的相对路径转变为绝对路径是：<a href="http://localhost:8080/requestPath/test/test/my.do" target="_blank" rel="noopener">http://localhost:8080/requestPath/test/test/my.do</a></p>
</blockquote>
<h5 id="解决办法-1"><a href="#解决办法-1" class="headerlink" title="解决办法"></a>解决办法</h5><p>（1） 使用斜杠开头的请求路径</p>
<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;pageContext.request.contextPath &#125;</span><span class="xml"><span class="tag"><span class="string">/test/my.do"</span>&gt;</span>我是一个表单的提交按键<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>（2） 不使用斜杠开头的请求路径</p>
<p>使用 JSP 的&lt;base/&gt;标签。页面中的&lt;base/&gt;标签，会在当前页面的资源请求路径前自动加上&lt;base/&gt;标签所代表的路径，将相对路径变为带访问协议的绝对路径。</p>
<figure class="highlight vbscript-html"><table><tr><td class="code"><pre><span class="line"><span class="xml"></span><span class="vbscript">&lt;%@ page language=<span class="string">"java"</span> import=<span class="string">"java.util.*"</span> pageEncoding=<span class="string">"utf-8"</span>%&gt;</span><span class="xml"></span></span><br><span class="line"><span class="xml"></span><span class="vbscript">&lt;%</span></span><br><span class="line"><span class="vbscript"><span class="built_in">String</span> path = <span class="built_in">request</span>.getContextPath();</span></span><br><span class="line"><span class="vbscript"><span class="built_in">String</span> basePath = <span class="built_in">request</span>.getScheme()+<span class="string">"://"</span>+<span class="built_in">request</span>.getServerName()+<span class="string">":"</span>+<span class="built_in">request</span>.getServerPort()+path+<span class="string">"/"</span>;</span></span><br><span class="line"><span class="vbscript">%&gt;</span><span class="xml"></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">     <span class="tag">&lt;<span class="name">base</span> <span class="attr">href</span>=<span class="string">"</span></span></span><span class="vbscript">&lt;%=basePath%&gt;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>My JSP 'index.jsp' starting page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">  </span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml">    	<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"test/my.do"</span>&gt;</span>我是一个表单的提交按键<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>SpringMVC</category>
      </categories>
  </entry>
  <entry>
    <title>Spring与DAO</title>
    <url>/2019/08/10/Spring%E4%B8%8EDAO/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Spring 所使用的操作数据库的技术： JDBC 模板的使用和 Spring 对于事务的管理。</p>
<ul>
<li>JDBC 模板的使用，是 IoC 的应用，将 JDBC 模板对象注入给了 Dao 层的实现类。  </li>
<li>Spring 的事务管理， 是 AOP 的应用，将事务作为切面织入到了 Service 层的业务方法中。</li>
</ul>
<a id="more"></a>


<h2 id="Spring与JDBC模板"><a href="#Spring与JDBC模板" class="headerlink" title="Spring与JDBC模板"></a>Spring与JDBC模板</h2><p>为了避免直接使用 JDBC 而带来的复杂且冗长的代码， Spring 提供了一个强有力的模板类——JdbcTemplate 来简化 JDBC 操作。并且，数据源 DataSource 对象与模板 JdbcTemplate 对象均可通过 Bean 的形式定义在配置文件中，充分发挥了依赖注入的威力。</p>
<h3 id="数据源的配置"><a href="#数据源的配置" class="headerlink" title="数据源的配置"></a>数据源的配置</h3><p>使用 JDBC 模板，首先需要配置好数据源，数据源直接以 Bean 的形式配置在 Spring 配置文件中。根据数据源的不同，其配置方式不同。常用数据源的配置方式有三种：</p>
<ol>
<li>Spring 默认的数据源  </li>
<li>DBCP 数据源  </li>
<li>C3P0 数据源</li>
</ol>
<h4 id="Spring-默认的数据源"><a href="#Spring-默认的数据源" class="headerlink" title="Spring 默认的数据源"></a>Spring 默认的数据源</h4><p>Spring 默认的数据源为 DriverManagerDataSource，其有一个属性 DriverClassName，用于接收 DB 驱动。DriverManagerDataSource 类继承自 AbstractDriverBasedDataSource。其有三个属性用于接收连接数据库的 URL、用户名与密码。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 注册数据源：Spring内置连接池 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myDataSource"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/test"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"123456"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="DBCP-数据源"><a href="#DBCP-数据源" class="headerlink" title="DBCP 数据源"></a>DBCP 数据源</h4><p>DBCP(DataBase Connection Pool)，是 apache 下的项目，DBCP 数据源是 BasicDataSource，其有 driverClassName、 url、 username、 password 四个 DB 连接属性。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 注册数据源：DBCP --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myDataSource"</span> <span class="attr">class</span>=<span class="string">"org.apache.commons.dbcp.BasicDataSource"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/test"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"123456"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="C3P0-数据源"><a href="#C3P0-数据源" class="headerlink" title="C3P0 数据源"></a>C3P0 数据源</h4><p>C3P0 数据源是 ComboPooledDataSource ，其有 DriverClass、JdbcUrl、 User、 Password 四个 DB 连接属性。</p>
<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="comment">&lt;!-- 注册数据源：C3P0 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myDataSource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;jdbc.driver&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;jdbc.url&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;jdbc.user&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;jdbc.password&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h3 id="从属性文件读取数据库连接信息"><a href="#从属性文件读取数据库连接信息" class="headerlink" title="从属性文件读取数据库连接信息"></a>从属性文件读取数据库连接信息</h3><p>为了便于维护，可以将数据库连接信息写入到属性文件中，使 Spring 配置文件从中读取数据。</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">jdbc.driver</span>=com.mysql.jdbc.Driver</span><br><span class="line"><span class="attr">jdbc.url</span>=jdbc:mysql://localhost:<span class="number">3306</span>/test</span><br><span class="line"><span class="attr">jdbc.user</span>=root</span><br><span class="line"><span class="attr">jdbc.password</span>=<span class="number">123456</span></span><br></pre></td></tr></table></figure>

<p>Spring 配置文件从属性文件中读取数据时，需要在&lt;property/&gt;的 value 属性中使用${ }，将在属性文件中定义的 key 括起来，以引用指定属性的值。</p>
<img src="/2019/08/10/Spring与DAO/dao01.jpg">


<p>该属性文件若要被 Spring 配置文件读取，其必须在配置文件中进行注册。注册方式有两种：</p>
<ol>
<li>&lt;bean/&gt;方式  </li>
<li>&lt;context/&gt;方式</li>
</ol>
<h4 id="lt-bean-gt-方式"><a href="#lt-bean-gt-方式" class="headerlink" title="&lt;bean/&gt;方式"></a>&lt;bean/&gt;方式</h4><p>以 PropertyPlaceholderConfigurer 类的 bean 实例的方式进行注册。该类有一个属性 location，用于指定属性文件的位置。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 注册属性文件：方式一 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"location"</span> <span class="attr">value</span>=<span class="string">"classpath:jdbc.properties"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="lt-context-property-placeholder-gt-方式"><a href="#lt-context-property-placeholder-gt-方式" class="headerlink" title="&lt;context:property-placeholder/&gt;方式"></a>&lt;context:property-placeholder/&gt;方式</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 注册属性文件：方式二 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:jdbc.properties"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：<br>该方式要求在 Spring 配置文件头部加入 context 的约束，&lt;context:property-placeholder/&gt;标签中有一个属性 location，用于指定属性文件的位置。</p>
</blockquote>
<h3 id="配置JDBC模板"><a href="#配置JDBC模板" class="headerlink" title="配置JDBC模板"></a>配置JDBC模板</h3><p>JDBC 模板类 JdbcTemplate 从其父类 JdbcAccessor 继承了一个属性 dataSource，用于接收数据源。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 注册JdbcTemplate --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myJdbcTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.core.JdbcTemplate"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"myDataSource"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="Dao实现类继承JdbcDaoSupport"><a href="#Dao实现类继承JdbcDaoSupport" class="headerlink" title="Dao实现类继承JdbcDaoSupport"></a>Dao实现类继承JdbcDaoSupport</h3><p>JdbcDaoSupport 类中有一个属性 JdbcTemplate，用于接收 JDBC 模板。所以 Dao 实现类继承了 JdbcDaoSupport 类后，也就具有了 JDBC 模板属性。在配置文件中，只要将模板对象注入即可。</p>
<img src="/2019/08/10/Spring与DAO/dao02.jpg">


<h3 id="对DB的增、删、改操作"><a href="#对DB的增、删、改操作" class="headerlink" title="对DB的增、删、改操作"></a>对DB的增、删、改操作</h3><p>JdbcTemplate 类中提供了对 DB 进行修改、查询的方法。 Dao 实现类使用继承自 JdbcDaoSupport 的 getTemplate()方法，可以获取到 JDBC 模板对象。</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IStudentDao</span> &#123;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">insertStudent</span>(<span class="params">Student student</span>)</span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">deleteById</span>(<span class="params"><span class="keyword">int</span> id</span>)</span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">updateStudent</span>(<span class="params">Student student</span>)</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="function">List&lt;String&gt; <span class="title">selectAllStudentsNames</span>(<span class="params"></span>)</span>;</span><br><span class="line">	<span class="function">String <span class="title">selectStudentNameById</span>(<span class="params"><span class="keyword">int</span> id</span>)</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="function">List&lt;Student&gt; <span class="title">selectAllStudents</span>(<span class="params"></span>)</span>;</span><br><span class="line">	<span class="function">Student <span class="title">selectStudnetById</span>(<span class="params"><span class="keyword">int</span> id</span>)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对 DB 的增、删、改都是通过 update()方法实现的。该方法常用的重载方法有两个：</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="built_in">public</span> <span class="type">int</span> <span class="keyword">update</span> ( String <span class="keyword">sql</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="built_in">public</span> <span class="type">int</span> <span class="keyword">update</span> ( String <span class="keyword">sql</span>, <span class="keyword">Object</span>… args)</span><br></pre></td></tr></table></figure>

<p>第 1 个参数为要执行的 sql 语句，第 2 个参数为要执行的 sql 语句中所包含的动态参数。其返回值为所影响记录的条数。一般不用。</p>
<img src="/2019/08/10/Spring与DAO/dao03.jpg">


<h3 id="对DB的查询操作"><a href="#对DB的查询操作" class="headerlink" title="对DB的查询操作"></a>对DB的查询操作</h3><p>JDBC 模板的查询结果均是以对象的形式返回。根据返回对象类型的不同，可以将查询分为两类：</p>
<ul>
<li>简单对象查询：查询结果为 String、 Integer 等简单对象类型，或该类型做为元素的集合类型，如 List&lt;String&gt;等。  </li>
<li>自定义对象查询：查询结果为自定义类型，如 User 等，或该类型做为元素的集合类型，如 List&lt;User&gt;等。</li>
</ul>
<h4 id="简单对象查询"><a href="#简单对象查询" class="headerlink" title="简单对象查询"></a>简单对象查询</h4><p>常用的简单对象查询方法有：查询结果为单个对象的 queryForObject()与查询结果为 List的 queryForList()。</p>
<figure class="highlight delphi"><table><tr><td class="code"><pre><span class="line">pubic T queryForObject (<span class="keyword">String</span> sql, <span class="keyword">Class</span>&lt;T&gt; <span class="keyword">type</span>, <span class="keyword">Object</span>... args)</span><br></pre></td></tr></table></figure>

<figure class="highlight delphi"><table><tr><td class="code"><pre><span class="line">pubic List&lt;T&gt; queryForList (<span class="keyword">String</span> sql, <span class="keyword">Class</span>&lt;T&gt; <span class="keyword">type</span>, <span class="keyword">Object</span>... args)</span><br></pre></td></tr></table></figure>

<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">public <span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; selectAllStudentsNames() &#123;</span><br><span class="line">	<span class="built_in">String</span> sql = <span class="string">"select name from student"</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">this</span>.getJdbcTemplate().queryForList(sql, <span class="built_in">String</span>.<span class="keyword">class</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">public <span class="built_in">String</span> selectStudentNameById(<span class="built_in">int</span> id) &#123;</span><br><span class="line">	<span class="built_in">String</span> sql = <span class="string">"select name from student where id=?"</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">this</span>.getJdbcTemplate().queryForObject(sql, <span class="built_in">String</span>.<span class="keyword">class</span>, id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="自定义对象查询"><a href="#自定义对象查询" class="headerlink" title="自定义对象查询"></a>自定义对象查询</h4><p>常用的自定义对象查询方法有：查询结果为单个对象的 queryForObject()与查询结果为List 的 query()。</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">pubic T queryForObject (<span class="built_in">String</span> sql, RowMapper&lt;T&gt; m , <span class="built_in">Object</span>... args)</span><br></pre></td></tr></table></figure>

<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">pubic <span class="built_in">List</span>&lt;T&gt; query (<span class="built_in">String</span> sql, RowMapper&lt;T &gt; m, <span class="built_in">Object</span>... args)</span><br></pre></td></tr></table></figure>

<p>RowMapper 为记录映射接口，用于将查询结果集中每一条记录包装为指定对象。该接口中有一个方法需要实现：</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">public Object map<span class="constructor">Row(ResultSet <span class="params">rs</span>, <span class="params">int</span> <span class="params">rowNum</span>)</span></span><br></pre></td></tr></table></figure>

<p>参数 rowNum 表示总的结果集中当前行的行号，但参数 rs 并不表示总的结果集，而是表示 rowNum 所代表的当前行的记录所定义的结果集，仅仅是当前行的结果。一般来说，该方法体中就是实现将查询结果中当前行的数据包装为一个指定对象。</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">public <span class="keyword">class</span> StudentRowMapper implements RowMapper&lt;Student&gt; &#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// rs：当查询出总的结果集后，框架会自动遍历这个结果集，每一次遍历的一行数据，都会被存放到</span></span><br><span class="line">	<span class="comment">//     这个方法的rs参数中。也就是说，这里的rs代表的是一行数据，并非所有查询结果。换个角度</span></span><br><span class="line">	<span class="comment">//     来说，只要能执行到这个方法，就说明这里的rs不会是空的</span></span><br><span class="line">	@Override</span><br><span class="line">	public Student map<span class="constructor">Row(ResultSet <span class="params">rs</span>, <span class="params">int</span> <span class="params">rowNum</span>)</span> throws SQLException &#123;</span><br><span class="line">		Student student = <span class="keyword">new</span> <span class="constructor">Student()</span>;</span><br><span class="line">		student.set<span class="constructor">Id(<span class="params">rs</span>.<span class="params">getInt</span>(<span class="string">"id"</span>)</span>);</span><br><span class="line">		student.set<span class="constructor">Name(<span class="params">rs</span>.<span class="params">getString</span>(<span class="string">"name"</span>)</span>);</span><br><span class="line">		student.set<span class="constructor">Age(<span class="params">rs</span>.<span class="params">getInt</span>(<span class="string">"age"</span>)</span>);</span><br><span class="line">		return student;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Student&gt; <span class="title">selectAllStudents</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	String sql = <span class="string">"select id,name,age from student"</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">this</span>.getJdbcTemplate().query(sql, <span class="keyword">new</span> StudentRowMapper());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Student <span class="title">selectStudnetById</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">	String sql = <span class="string">"select id,name,age from student where id=?"</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">this</span>.getJdbcTemplate().queryForObject(sql, <span class="keyword">new</span> StudentRowMapper(), id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：<br>JdbcTemplate 对象是多例的，即系统会为每一个使用模板对象的线程（方法）创建一个 JdbcTemplate 实例，并且在该线程（方法）结束时，自动释放 JdbcTemplate 实例。所以在每次使用 JdbcTemplate 对象时，都需要通过 getJdbcTemplate()方法获取。</p>
</blockquote>
<h2 id="Spring的事务管理"><a href="#Spring的事务管理" class="headerlink" title="Spring的事务管理"></a>Spring的事务管理</h2><p>事务原本是数据库中的概念，在 Dao 层。但一般情况下，需要将事务提升到业务层，即 Service 层。这样做是为了能够使用事务的特性来管理具体的业务。在 Spring 中通常可以通过以下三种方式来实现对事务的管理：</p>
<ol>
<li>使用 Spring 的事务代理工厂管理事务  </li>
<li>使用 Spring 的事务注解管理事务  </li>
<li>使用 AspectJ 的 AOP 配置管理事务</li>
</ol>
<h3 id="Spring事务管理API"><a href="#Spring事务管理API" class="headerlink" title="Spring事务管理API"></a>Spring事务管理API</h3><p>Spring 的事务管理，主要用到两个事务相关的接口。</p>
<h4 id="1-事务管理器接口"><a href="#1-事务管理器接口" class="headerlink" title="1. 事务管理器接口"></a>1. 事务管理器接口</h4><p>事务管理器是 PlatformTransactionManager 接口对象。其主要用于完成事务的提交、回滚，及获取事务的状态信息。 </p>
<h5 id="常用的两个实现类"><a href="#常用的两个实现类" class="headerlink" title="常用的两个实现类"></a>常用的两个实现类</h5><ul>
<li>DataSourceTransactionManager：使用 JDBC 或 iBatis 进行持久化数据时使用。  </li>
<li>HibernateTransactionManager：使用 Hibernate 进行持久化数据时使用。</li>
</ul>
<h5 id="Spring-的回滚方式"><a href="#Spring-的回滚方式" class="headerlink" title="Spring 的回滚方式"></a>Spring 的回滚方式</h5><p>Spring 事务的默认回滚方式是： 发生运行时异常时回滚，发生受查异常时提交。对于受查异常，也可以手工设置其回滚方式。</p>
<h5 id="错误与异常"><a href="#错误与异常" class="headerlink" title="错误与异常"></a>错误与异常</h5><img src="/2019/08/10/Spring与DAO/dao05.jpg">

<p>Throwable 类是 Java 语言中所有错误或异常的超类。只有当对象是此类(或其子类之一)的实例时， 才能通过 Java 虚拟机或者 Java 的 throw 语句抛出。</p>
<p>Error 是程序在运行过程中出现的无法处理的错误，比如OutOfMemoryError、ThreadDeath、 NoSuchMethodError 等。当这些错误发生时，程序是无法处理（捕获或抛出）<br>的， JVM 一般会终止线程。</p>
<p>程序在编译和运行时出现的另一类错误称之为异常，它是 JVM 通知程序员的一种方式。通过这种方式，让程序员知道已经或可能出现错误，要求程序员对其进行处理。</p>
<p>异常分为运行时异常与受查异常：  </p>
<ol>
<li>运行时异常， 是 RuntimeException 类或其子类 ， 即只有在运行时才出现的异常。如，NullPointerException、 ArrayIndexOutOfBoundsException、 IllegalArgumentException 等均属于运行时异常。这些异常由 JVM 抛出，在编译时不要求必须处理（捕获或抛出）。但，只要代码编写足够仔细，程序足够健壮，运行时异常是可以避免的。(Hibernate 异常 HibernateException 也属于运行时异常)。  </li>
<li>受查异常，也叫编译时异常，即在代码编写时要求必须捕获或抛出的异常，若不处理，则无法通过编译。如 SQLException， ClassNotFoundException， IOException 等都属于受查异常。</li>
</ol>
<p>RuntimeException 及其子类以外的异常，均属于受查异常。当然，用户自定义的 Exception 的子类，即用户自定义的异常也属受查异常。 定义异常时，只要未明确声明定义的为 RuntimeException 的子类，那么定义的就是受查异常。</p>
<h4 id="2-事务定义接口"><a href="#2-事务定义接口" class="headerlink" title="2. 事务定义接口"></a>2. 事务定义接口</h4><p>事务定义接口 TransactionDefinition 中定义了事务描述相关的三类常量： 事务隔离级别、事务传播行为、事务默认超时时限， 及对它们的操作。</p>
<h5 id="定义了五个事务隔离级别常量"><a href="#定义了五个事务隔离级别常量" class="headerlink" title="定义了五个事务隔离级别常量"></a>定义了五个事务隔离级别常量</h5><p>这些常量均是以 ISOLATION_开头。即形如 ISOLATION_XXX。</p>
<ul>
<li>DEFAULT： 采用 DB 默认的事务隔离级别。 MySql 的默认为 REPEATABLE_READ； Oracle 默认为 READ_COMMITTED。  </li>
<li>READ_UNCOMMITTED： 读未提交。 未解决任何并发问题。  </li>
<li>READ_COMMITTED： 读已提交。解决脏读，存在不可重复读与幻读。  </li>
<li>REPEATABLE_READ： 可重复读。解决脏读、不可重复读，存在幻读。  </li>
<li>SERIALIZABLE： 串行化。不存在并发问题。</li>
</ul>
<h5 id="定义了七个事务传播行为常量"><a href="#定义了七个事务传播行为常量" class="headerlink" title="定义了七个事务传播行为常量"></a>定义了七个事务传播行为常量</h5><p>谓事务传播行为是指，处于不同事务中的方法在相互调用时，执行期间事务的维护情况。如， A 事务中的方法 doSome()调用 B 事务中的方法 doOther()，在调用执行期间事务的维护情况，就称为事务传播行为。事务传播行为是加在方法上的。</p>
<p>事务传播行为常量都是以 PROPAGATION_ 开头，形如 PROPAGATION_XXX。</p>
<ul>
<li>REQUIRED： 指定的方法必须在事务内执行。若当前存在事务，就加入到当前事务中；若当前没有事务，则创建一个新事务。这种传播行为是最常见的选择，也是 Spring 默认的事务传播行为。  </li>
<li>SUPPORTS： 指定的方法支持当前事务，但若当前没有事务，也可以以非事务方式执行。  </li>
<li>MANDATORY： 指定的方法必须在当前事务内执行，若当前没有事务，则直接抛出异常。  </li>
<li>REQUIRES_NEW： 总是新建一个事务，若当前存在事务，就将当前事务挂起，直到新事务执行完毕。  </li>
<li>NOT_SUPPORTED： 指定的方法不能在事务环境中执行，若当前存在事务，就将当前事务挂起。  </li>
<li>NEVER： 指定的方法不能在事务环境下执行，若当前存在事务，就直接抛出异常。  </li>
<li>NESTED： 指定的方法必须在事务内执行。若当前存在事务，则在嵌套事务内执行；若当前没有事务，则创建一个新事务。</li>
</ul>
<h5 id="定义了默认事务超时时"><a href="#定义了默认事务超时时" class="headerlink" title="定义了默认事务超时时"></a>定义了默认事务超时时</h5><p>常量 TIMEOUT_DEFAULT 定义了事务底层默认的超时时限，及不支持事务超时时限设置的 none 值。</p>
<blockquote>
<p>注意：<br>事务的超时时限起作用的条件比较多，且超时的时间计算点较复杂。所以，该值一般就使用默认值即可。</p>
</blockquote>
<h3 id="程序举例"><a href="#程序举例" class="headerlink" title="程序举例"></a>程序举例</h3><p>需求：<br>实现模拟购买股票。存在两个实体：银行账户 Account 与股票账户 Stock。当要购买股票时，需要从 Account 中扣除相应金额的存款，然后在 Stock 中增加相应的股票数量。而在这个过程中，可能会抛出一个用户自定义的异常。异常的抛出，将会使两个操作回滚。</p>
<p>实现步骤：  </p>
<h4 id="1-创建数据库表"><a href="#1-创建数据库表" class="headerlink" title="1. 创建数据库表"></a>1. 创建数据库表</h4><img src="/2019/08/10/Spring与DAO/dao06.jpg">

<img src="/2019/08/10/Spring与DAO/dao07.jpg">

<h4 id="2-创建实体类"><a href="#2-创建实体类" class="headerlink" title="2. 创建实体类"></a>2. 创建实体类</h4><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">Account</span> &#123;</span><br><span class="line">	<span class="keyword">private</span> Integer aid;</span><br><span class="line">	<span class="keyword">private</span> String aname;</span><br><span class="line">	<span class="keyword">private</span> <span class="built_in">double</span> balance;	<span class="comment">//余额</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">Stock</span> &#123;</span><br><span class="line">	<span class="keyword">private</span> Integer sid;</span><br><span class="line">	<span class="keyword">private</span> String sname;	<span class="comment">//股票名称</span></span><br><span class="line">	<span class="keyword">private</span> <span class="built_in">int</span> count;		<span class="comment">//股票数量</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-定义-service-的实现类"><a href="#3-定义-service-的实现类" class="headerlink" title="3. 定义 service 的实现类"></a>3. 定义 service 的实现类</h4><p>根据需求，我们可以先定义 Service 实现类，自动生成 Service 接口、Dao 接口和异常类，以减少代码写入。</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">public <span class="keyword">class</span> BuyStockServiceImpl implements IBuyStockService &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> IAccountDao adao;</span><br><span class="line">	<span class="keyword">private</span> IStockDao sdao;</span><br><span class="line">	</span><br><span class="line">	public void set<span class="constructor">Adao(IAccountDao <span class="params">adao</span>)</span> &#123;</span><br><span class="line">		this.adao = adao;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	public void set<span class="constructor">Sdao(IStockDao <span class="params">sdao</span>)</span> &#123;</span><br><span class="line">		this.sdao = sdao;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	@Override</span><br><span class="line">	public void <span class="keyword">open</span><span class="constructor">Account(String <span class="params">aname</span>, <span class="params">double</span> <span class="params">money</span>)</span> &#123;</span><br><span class="line">		adao.insert<span class="constructor">Account(<span class="params">aname</span>,<span class="params">money</span>)</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	@Override</span><br><span class="line">	public void <span class="keyword">open</span><span class="constructor">Stock(String <span class="params">sname</span>, <span class="params">int</span> <span class="params">amount</span>)</span> &#123;</span><br><span class="line">		sdao.insert<span class="constructor">Stock(<span class="params">sname</span>,<span class="params">amount</span>)</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	@Override</span><br><span class="line">	public void buy<span class="constructor">Stock(String <span class="params">aname</span>, <span class="params">double</span> <span class="params">money</span>, String <span class="params">sname</span>, <span class="params">int</span> <span class="params">amount</span>)</span> throws BuyStockException &#123;</span><br><span class="line">		boolean isBuy = <span class="literal">true</span>;</span><br><span class="line">		adao.update<span class="constructor">Account(<span class="params">aname</span>,<span class="params">money</span>,<span class="params">isBuy</span>)</span>;</span><br><span class="line">		<span class="keyword">if</span>(<span class="number">1</span><span class="operator"> == </span><span class="number">1</span>) &#123;</span><br><span class="line">			throw <span class="keyword">new</span> <span class="constructor">BuyStockException(<span class="string">"购买股票异常"</span>)</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		sdao.update<span class="constructor">Stock(<span class="params">sname</span>,<span class="params">amount</span>,<span class="params">isBuy</span>)</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-定义-Service-接口"><a href="#4-定义-Service-接口" class="headerlink" title="4. 定义 Service 接口"></a>4. 定义 Service 接口</h4><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">public interface IBuyStockService &#123;</span><br><span class="line">	void <span class="keyword">open</span><span class="constructor">Account(String <span class="params">aname</span>,<span class="params">double</span> <span class="params">money</span>)</span>;</span><br><span class="line">	void <span class="keyword">open</span><span class="constructor">Stock(String <span class="params">sname</span>, <span class="params">int</span> <span class="params">amount</span>)</span>;</span><br><span class="line">	</span><br><span class="line">	void buy<span class="constructor">Stock(String <span class="params">aname</span>,<span class="params">double</span> <span class="params">money</span>,String <span class="params">sname</span>,<span class="params">int</span> <span class="params">amount</span>)</span> throws BuyStockException;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="5-定义-dao-接口"><a href="#5-定义-dao-接口" class="headerlink" title="5. 定义 dao 接口"></a>5. 定义 dao 接口</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IAccountDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">insertAccount</span><span class="params">(String aname, <span class="keyword">double</span> money)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">updateAccount</span><span class="params">(String aname, <span class="keyword">double</span> money, <span class="keyword">boolean</span> isBuy)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IStockDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">insertStock</span><span class="params">(String sname, <span class="keyword">int</span> amount)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">updateStock</span><span class="params">(String sname, <span class="keyword">int</span> amount, <span class="keyword">boolean</span> isBuy)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="6-定义异常类"><a href="#6-定义异常类" class="headerlink" title="6. 定义异常类"></a>6. 定义异常类</h4><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">BuyStockException</span> <span class="keyword">extends</span> <span class="title">Exception</span> </span>&#123;</span><br><span class="line">	public <span class="type">BuyStockException</span>() &#123;</span><br><span class="line">		<span class="keyword">super</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	public <span class="type">BuyStockException</span>(<span class="type">String</span> message) &#123;</span><br><span class="line">		<span class="keyword">super</span>(message);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="7-定义-dao-实现类"><a href="#7-定义-dao-实现类" class="headerlink" title="7. 定义 dao 实现类"></a>7. 定义 dao 实现类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountDaoImpl</span> <span class="keyword">extends</span> <span class="title">JdbcDaoSupport</span> <span class="keyword">implements</span> <span class="title">IAccountDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertAccount</span><span class="params">(String aname, <span class="keyword">double</span> money)</span> </span>&#123;</span><br><span class="line">		String sql = <span class="string">"insert into account(aname, balance) values(?,?)"</span>;</span><br><span class="line">		<span class="keyword">this</span>.getJdbcTemplate().update(sql, aname, money);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateAccount</span><span class="params">(String aname, <span class="keyword">double</span> money, <span class="keyword">boolean</span> isBuy)</span> </span>&#123;</span><br><span class="line">		String sql = <span class="string">"update account set balance=balance+? where aname=?"</span>;</span><br><span class="line">		<span class="keyword">if</span> (isBuy) &#123;</span><br><span class="line">			sql = <span class="string">"update account set balance=balance-? where aname=?"</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">this</span>.getJdbcTemplate().update(sql, money, aname);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StockDaoImpl</span> <span class="keyword">extends</span> <span class="title">JdbcDaoSupport</span> <span class="keyword">implements</span> <span class="title">IStockDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertStock</span><span class="params">(String sname, <span class="keyword">int</span> amount)</span> </span>&#123;</span><br><span class="line">		String sql = <span class="string">"insert into stock(sname,count) values(?,?)"</span>;</span><br><span class="line">		<span class="keyword">this</span>.getJdbcTemplate().update(sql, sname,amount);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateStock</span><span class="params">(String sname, <span class="keyword">int</span> amount, <span class="keyword">boolean</span> isBuy)</span> </span>&#123;</span><br><span class="line">		String sql = <span class="string">"update stock set count=count-? where sname=?"</span>;</span><br><span class="line">		<span class="keyword">if</span> (isBuy) &#123;</span><br><span class="line">			sql = <span class="string">"update stock set count=count+? where sname=?"</span>;</span><br><span class="line">			</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">this</span>.getJdbcTemplate().update(sql, amount,sname);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="8-定义-Spring-配置文件-IoC应用"><a href="#8-定义-Spring-配置文件-IoC应用" class="headerlink" title="8. 定义 Spring 配置文件(IoC应用)"></a>8. 定义 Spring 配置文件(IoC应用)</h4><figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="comment">&lt;!-- 注册数据源：C3P0 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myDataSource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;jdbc.driver&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;jdbc.url&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;jdbc.user&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;jdbc.password&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 注册属性文件 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:jdbc.properties"</span>/&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 注册Dao --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountDao"</span> <span class="attr">class</span>=<span class="string">"com.huang.dao.AccountDaoImpl"</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"myDataSource"</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"stockDao"</span> <span class="attr">class</span>=<span class="string">"com.huang.dao.StockDaoImpl"</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"myDataSource"</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 注册Service --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"buyStockService"</span> <span class="attr">class</span>=<span class="string">"com.huang.service.BuyStockServiceImpl"</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"adao"</span> <span class="attr">ref</span>=<span class="string">"accountDao"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sdao"</span> <span class="attr">ref</span>=<span class="string">"stockDao"</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h4 id="9-定义测试类"><a href="#9-定义测试类" class="headerlink" title="9. 定义测试类"></a>9. 定义测试类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> IBuyStockService service;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Before</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">// 创建容器对象，加载Spring配置文件</span></span><br><span class="line">		String resource = <span class="string">"applicationContext.xml"</span>;</span><br><span class="line">		ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(resource);</span><br><span class="line">		service = (IBuyStockService) ac.getBean(<span class="string">"buyStockService"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		service.openAccount(<span class="string">"张三"</span>, <span class="number">10000</span>);</span><br><span class="line">		service.openStock(<span class="string">"现代学院"</span>, <span class="number">0</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span> <span class="keyword">throws</span> BuyStockException </span>&#123;</span><br><span class="line">		service.buyStock(<span class="string">"张三"</span>, <span class="number">2000</span>, <span class="string">"现代学院"</span>, <span class="number">5</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="10-运行结果"><a href="#10-运行结果" class="headerlink" title="10. 运行结果"></a>10. 运行结果</h4><img src="/2019/08/10/Spring与DAO/dao08.jpg">

<img src="/2019/08/10/Spring与DAO/dao09.jpg">

<img src="/2019/08/10/Spring与DAO/dao10.jpg">


<h3 id="使用Spring的事务代理工厂管理事务"><a href="#使用Spring的事务代理工厂管理事务" class="headerlink" title="使用Spring的事务代理工厂管理事务"></a>使用Spring的事务代理工厂管理事务</h3><p>该方式是，需要为目标类，即 Service 的实现类创建事务代理。事务代理使用的类是 TransactionProxyFactoryBean，该类需要初始化如下一些属性：</p>
<p>（1） transactionManager：事务管理器<br>（2） target：目标对象，即 Service 实现类对象<br>（3） transactionAttributes：事务属性</p>
<h4 id="1-修改-Spring-配置文件-AOP应用"><a href="#1-修改-Spring-配置文件-AOP应用" class="headerlink" title="1. 修改 Spring 配置文件(AOP应用)"></a>1. 修改 Spring 配置文件(AOP应用)</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 注册事务管理器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myTransactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"myDataSource"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 生成事务代理对象 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"serviceProxy"</span> <span class="attr">class</span>=<span class="string">"org.springframework.transaction.interceptor.TransactionProxyFactoryBean"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"transactionManager"</span> <span class="attr">ref</span>=<span class="string">"myTransactionManager"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"target"</span> <span class="attr">ref</span>=<span class="string">"buyStockService"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"transactionAttributes"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"open*"</span>&gt;</span>ISOLATION_DEFAULT,PROPAGATION_REQUIRED<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">				-异常：表示发生指定异常后回滚，这时的异常通常是受查异常</span></span><br><span class="line"><span class="comment">				+异常：表示发生指定异常后提交，这时的异常通常是运行时异常</span></span><br><span class="line"><span class="comment">			 --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"buyStock"</span>&gt;</span>ISOLATION_DEFAULT,PROPAGATION_REQUIRED, -BuyStockException<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="2-修改测试类"><a href="#2-修改测试类" class="headerlink" title="2. 修改测试类"></a>2. 修改测试类</h4><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">service</span> = (IBuyStockService) ac.getBean(<span class="string">"serviceProxy"</span>)<span class="comment">;</span></span><br></pre></td></tr></table></figure>

<h3 id="使用Spring的事物注解管理事务"><a href="#使用Spring的事物注解管理事务" class="headerlink" title="使用Spring的事物注解管理事务"></a>使用Spring的事物注解管理事务</h3><p>通过@Transactional 注解方式，也可将事务织入到相应方法中。而使用注解方式，只需在配置文件中加入一个 tx 标签，以告诉 spring 使用注解来完成事务的织入。该标签只需指定一个属性，事务管理器。</p>
<p>@Transactional 的所有可选属性如下所示：</p>
<ul>
<li>propagation： 用于设置事务传播属性。该属性类型为 Propagation 枚举，默认值为 Propagation.REQUIRED。  </li>
<li>isolation： 用于设置事务的隔离级别。该属性类型为 Isolation 枚举 ，默认值为 Isolation.DEFAULT。  </li>
<li>readOnly： 用于设置该方法对数据库的操作是否是只读的。该属性为 boolean，默认值为 false。  </li>
<li>timeout： 用于设置本操作与数据库连接的超时时限。单位为秒，类型为 int，默认值为-1，即没有时限。  </li>
<li>rollbackFor： 指定需要回滚的异常类。类型为 Class[]，默认值为空数组。当然，若只有一个异常类时，可以不使用数组。  </li>
<li>rollbackForClassName： 指定需要回滚的异常类类名。类型为 String[]，默认值为空数组。当然，若只有一个异常类时，可以不使用数组。  </li>
<li>noRollbackFor： 指定不需要回滚的异常类。类型为 Class[]，默认值为空数组。当然，若只有一个异常类时，可以不使用数组。  </li>
<li>noRollbackForClassName： 指定不需要回滚的异常类类名。类型为 String[]，默认值为空数组。当然，若只有一个异常类时，可以不使用数组。</li>
</ul>
<blockquote>
<p>注意：<br>@Transactional 若用在方法上，只能用于 public 方法上。对于其他非 public方法，如果加上了注解@Transactional，虽然 Spring 不会报错，但不会将指定事务织入到该方法中。因为 Spring 会忽略掉所有非 public 方法上的@Transaction 注解。若@Transaction 注解在类上，则表示该类上所有的方法均将在执行时织入事务。</p>
</blockquote>
<h4 id="1-修改-Spring-配置文件-AOP应用-1"><a href="#1-修改-Spring-配置文件-AOP应用-1" class="headerlink" title="1. 修改 Spring 配置文件(AOP应用)"></a>1. 修改 Spring 配置文件(AOP应用)</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 注册事务管理器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myTransactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"myDataSource"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 注册事务注解驱动 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">"myTransactionManager"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="2-修改测试类-1"><a href="#2-修改测试类-1" class="headerlink" title="2. 修改测试类"></a>2. 修改测试类</h4><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">service</span> = (IBuyStockService) ac.getBean(<span class="string">"buyStockService"</span>)<span class="comment">;</span></span><br></pre></td></tr></table></figure>

<h4 id="3-在-Service-实现类方法上添加注解"><a href="#3-在-Service-实现类方法上添加注解" class="headerlink" title="3. 在 Service 实现类方法上添加注解"></a>3. 在 Service 实现类方法上添加注解</h4><img src="/2019/08/10/Spring与DAO/dao11.jpg">


<h3 id="使用AspectJ的AOP配置管理事务"><a href="#使用AspectJ的AOP配置管理事务" class="headerlink" title="使用AspectJ的AOP配置管理事务"></a>使用AspectJ的AOP配置管理事务</h3><p>使用 XML 配置事务代理的方式的不足是，每个目标类都需要配置事务代理。当目标类较多，配置文件会变得非常臃肿。使用 XML 配置顾问方式可以自动为每个符合切入点表达式的类生成事务代理。</p>
<h4 id="修改配置文件-AOP应用"><a href="#修改配置文件-AOP应用" class="headerlink" title="修改配置文件(AOP应用)"></a>修改配置文件(AOP应用)</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 注册事务管理器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myTransactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"myDataSource"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 注册事务通知 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span> <span class="attr">transaction-manager</span>=<span class="string">"myTransactionManager"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">	    </span><br><span class="line">		<span class="comment">&lt;!-- 这里指定的是：为每一个连接点指定所要应用的事务属性 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"open*"</span> <span class="attr">isolation</span>=<span class="string">"DEFAULT"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"buyStock"</span> <span class="attr">isolation</span>=<span class="string">"DEFAULT"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> <span class="attr">rollback-for</span>=<span class="string">"BuyStockException"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- AOP配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 这里指定的是切入点 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">expression</span>=<span class="string">"execution(* *..service.*.*(..))"</span> <span class="attr">id</span>=<span class="string">"myPointcut"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"txAdvice"</span> <span class="attr">pointcut-ref</span>=<span class="string">"myPointcut"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>DAO</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring与AOP</title>
    <url>/2019/08/08/Spring%E4%B8%8EAOP/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="AOP-简介"><a href="#AOP-简介" class="headerlink" title="AOP 简介"></a>AOP 简介</h2><p>AOP（Aspect Orient Programming），面向切面编程，是面向对象编程 OOP 的一种补充。面向对象编程是从静态角度考虑程序的结构，而面向切面编程是从动态角度考虑程序运行过程。AOP 底层采用两种动态代理模式实现： JDK 的动态代理与 CGLIB 的动态代理。</p>
<a id="more"></a>


<h2 id="AOP-编程术语"><a href="#AOP-编程术语" class="headerlink" title="AOP 编程术语"></a>AOP 编程术语</h2><h3 id="1-切面"><a href="#1-切面" class="headerlink" title="1. 切面"></a>1. 切面</h3><p>切面(Aspect)泛指交叉业务逻辑。上例中的事务处理、日志处理就可以理解为切面。常用的切面有通知与顾问。实际就是对主业务逻辑的一种增强。</p>
<h3 id="2-织入"><a href="#2-织入" class="headerlink" title="2. 织入"></a>2. 织入</h3><p>织入(Weaving)是指将切面代码插入到目标对象的过程。</p>
<h3 id="3-连接点"><a href="#3-连接点" class="headerlink" title="3. 连接点"></a>3. 连接点</h3><p>连接点(JoinPoint)指可以被切面织入的方法。通常业务接口中的方法均为连接点。</p>
<h3 id="4-切入点"><a href="#4-切入点" class="headerlink" title="4. 切入点"></a>4. 切入点</h3><p>切入点(Pointcut)指切面具体织入的方法。注意，被标记为 final 的方法是不能作为连接点与切入点的。因为最终的是不能被修改的，不能被增强的。</p>
<h3 id="5-目标对象"><a href="#5-目标对象" class="headerlink" title="5. 目标对象"></a>5. 目标对象</h3><p>目标对象(Target)指将要被增强的对象，即包含主业务逻辑的类的对象 。 </p>
<h3 id="6-通知"><a href="#6-通知" class="headerlink" title="6. 通知"></a>6. 通知</h3><p>通知(Advice)是切面的一种实现，可以完成简单织入功能（织入功能就是在这里完成的）。换个角度来说， 通知定义了增强代码切入到目标代码的时间点，是目标方法执行之前执行，还是之后执行等。通知类型不同，切入时间不同(切入点定义切入的位置，通知定义切入的时间)。</p>
<h3 id="7-顾问"><a href="#7-顾问" class="headerlink" title="7. 顾问"></a>7. 顾问</h3><p>顾问(Advisor)是切面的另一种实现，能够将通知以更为复杂的方式织入到目标对象中，是将通知包装为更复杂切面的装配器。</p>
<h2 id="通知-Advice"><a href="#通知-Advice" class="headerlink" title="通知 Advice"></a>通知 Advice</h2><p>通知（Advice），切面的一种实现，可以完成简单织入功能（织入功能就是在这里完成的）。 常用通知有：前置通知、后置通知、环绕通知、异常处理通知。</p>
<h3 id="通知详解"><a href="#通知详解" class="headerlink" title="通知详解"></a>通知详解</h3><p>通知（Advice）是 Spring 提供的一种切面（Aspect）。但其功能过于简单：只能将切面织入到目标类的所有目标方法中， 无法完成将切面织入到指定目标方法中。</p>
<h4 id="前置通知"><a href="#前置通知" class="headerlink" title="前置通知"></a>前置通知</h4><p>定义前置通知，需要实现 MethodBeforeAdvice 接口。该接口中有一个方法 before()，会在目标方法执行之前执行。 前置通知的特点：</p>
<ul>
<li>在目标方法执行之前先执行。  </li>
<li>不改变目标方法的执行流程，前置通知代码不能阻止目标方法执行。  </li>
<li>不改变目标方法执行的结果。</li>
</ul>
<p>（1） 定义业务接口与目标类</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">ISomeService</span> &#123;</span><br><span class="line">	<span class="comment">//主业务方法</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">doFirst</span>(<span class="params"></span>)</span>;</span><br><span class="line">	<span class="comment">//主业务方法</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">doSecond</span>(<span class="params"></span>)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//目标类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SomeServiceImpl</span> <span class="keyword">implements</span> <span class="title">ISomeService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//目标方法</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFirst</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"执行doFirst()方法"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//目标方法</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSecond</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"执行doSecond()方法"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（2） 定义前置通知</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">//前置通知</span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> MyMethodBeforeAdvice implements MethodBeforeAdvice &#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 *当前方法在目标方法执行之前执行</span></span><br><span class="line"><span class="comment">	 *method：目标方法</span></span><br><span class="line"><span class="comment">	 *args：目标方法的参数列表</span></span><br><span class="line"><span class="comment">	 *target：目标对象</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	@Override</span><br><span class="line">	<span class="built_in">public</span> <span class="type">void</span> <span class="keyword">before</span>(<span class="keyword">Method</span> <span class="keyword">method</span>, <span class="keyword">Object</span>[] args, <span class="keyword">Object</span> target) throws Throwable &#123;</span><br><span class="line">		<span class="keyword">System</span>.<span class="keyword">out</span>.println("执行前置通知方法");</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（3） 定义 Spring 配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 注册目标对象 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"someService"</span> <span class="attr">class</span>=<span class="string">"com.huang.aop01.SomeServiceImpl"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 注册切面：通知 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myAdvice"</span> <span class="attr">class</span>=<span class="string">"com.huang.aop01.MyMethodBeforeAdvice"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 生成代理对象 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"serviceProxy"</span> <span class="attr">class</span>=<span class="string">"org.springframework.aop.framework.ProxyFactoryBean"</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- &lt;property name="targetName" value="someService"/&gt; --&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 指定目标对象 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"target"</span> <span class="attr">ref</span>=<span class="string">"someService"</span>/&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 指定切面 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"interceptorNames"</span> <span class="attr">value</span>=<span class="string">"myAdvice"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>（4） 定义测试类</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">public <span class="keyword">class</span> MyTest &#123;</span><br><span class="line">	</span><br><span class="line">	@Test</span><br><span class="line">	public void test01<span class="literal">()</span> &#123;</span><br><span class="line">		String resource = <span class="string">"com/huang/aop01/applicationContext.xml"</span>;</span><br><span class="line">		ApplicationContext ac = <span class="keyword">new</span> <span class="constructor">ClassPathXmlApplicationContext(<span class="params">resource</span>)</span>;</span><br><span class="line">		<span class="comment">//serviceProxy为代理对象，而非目标对象</span></span><br><span class="line">		ISomeService service = (ISomeService) ac.get<span class="constructor">Bean(<span class="string">"serviceProxy"</span>)</span>;  </span><br><span class="line">		service.<span class="keyword">do</span><span class="constructor">First()</span>;</span><br><span class="line">		<span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"----------------------"</span>);</span><br><span class="line">		service.<span class="keyword">do</span><span class="constructor">Second()</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（5） 运行结果</p>
<img src="/2019/08/08/Spring与AOP/aop01.jpg">


<p>使用 Debug 查看后台运行情况，可以看到代理生成使用的是 JDK 代理机制。</p>
<img src="/2019/08/08/Spring与AOP/aop02.jpg">


<h4 id="后置通知"><a href="#后置通知" class="headerlink" title="后置通知"></a>后置通知</h4><p>定义后置通知，需要实现接口AfterReturningAdvice。该接口中有一个方法afterReturning()，会在目标方法执行之后执行。后置通知的特点：</p>
<ul>
<li>在目标方法执行之后执行。  </li>
<li>不改变目标方法的执行流程，后置通知代码不能阻止目标方法执行。  </li>
<li>不改变目标方法执行的结果。</li>
</ul>
<p>（1） 修改业务接口与目标类</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">String <span class="keyword">do</span><span class="constructor">Second()</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">//目标方法</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String doSecond() &#123;</span><br><span class="line">	System.<span class="keyword">out</span>.println(<span class="string">"执行doSecond()方法"</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="string">"abcde"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（2） 定义后置通知</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> MyAfterReturningAdvice implements AfterReturningAdvice &#123;</span><br><span class="line"></span><br><span class="line">	@Override</span><br><span class="line">	<span class="built_in">public</span> <span class="type">void</span> afterReturning(<span class="keyword">Object</span> returnValue, <span class="keyword">Method</span> <span class="keyword">method</span>, <span class="keyword">Object</span>[] args, <span class="keyword">Object</span> target) </span><br><span class="line">			throws Throwable &#123;</span><br><span class="line">		<span class="keyword">System</span>.<span class="keyword">out</span>.println("执行后置通知方法 returnValue= " + returnValue);</span><br><span class="line">		<span class="keyword">if</span> (returnValue != <span class="keyword">null</span>) &#123;</span><br><span class="line">			returnValue = ((String) returnValue).toUpperCase();</span><br><span class="line">			<span class="keyword">System</span>.<span class="keyword">out</span>.println("修改过的结果 returnValue=" + returnValue);</span><br><span class="line">			</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（3） 修改 Spring 配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 注册切面：通知 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myAdvice"</span> <span class="attr">class</span>=<span class="string">"com.huang.aop02.MyAfterReturningAdvice"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>（4） 修改测试类</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void test01<span class="literal">()</span> &#123;</span><br><span class="line">	String resource = <span class="string">"com/huang/aop02/applicationContext.xml"</span>;</span><br><span class="line">	ApplicationContext ac = <span class="keyword">new</span> <span class="constructor">ClassPathXmlApplicationContext(<span class="params">resource</span>)</span>;</span><br><span class="line">	<span class="comment">//serviceProxy为代理对象，而非目标对象</span></span><br><span class="line">	ISomeService service = (ISomeService) ac.get<span class="constructor">Bean(<span class="string">"serviceProxy"</span>)</span>;  </span><br><span class="line">	service.<span class="keyword">do</span><span class="constructor">First()</span>;</span><br><span class="line">	<span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"----------------------"</span>);</span><br><span class="line">	String result = service.<span class="keyword">do</span><span class="constructor">Second()</span>;</span><br><span class="line">	<span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="环绕通知"><a href="#环绕通知" class="headerlink" title="环绕通知"></a>环绕通知</h4><p>定义环绕通知，需要实现 MethodInterceptor 接口。环绕通知，也叫方法拦截器，可以在目标方法调用之前及之后做处理，可以改变目标方法的返回值，也可以改变程序执行流程。</p>
<p>（1） 定义后置通知</p>
<figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMethodInterceptor</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="function">Object <span class="title">invoke</span><span class="params">(MethodInvocation invocation)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"执行环绕通知：目标方法执行之前"</span>);</span><br><span class="line">		Object result = invocation.<span class="keyword">proceed</span>();</span><br><span class="line">		System.out.println(<span class="string">"执行环绕通知：目标方法执行之后"</span>);</span><br><span class="line">		<span class="keyword">if</span> (result != <span class="keyword">null</span>) &#123;</span><br><span class="line">			result = ((String)result).toUpperCase();</span><br><span class="line">			</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> result;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（2） 修改 Spring 配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 注册切面：通知 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myAdvice"</span> <span class="attr">class</span>=<span class="string">"com.huang.aop03.MyMethodInterceptor"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="异常通知"><a href="#异常通知" class="headerlink" title="异常通知"></a>异常通知</h4><p>定义异常通知，需要实现 ThrowsAdvice 接口。该接口的主要作用是，在目标方法抛出异常后，根据异常的不同做出相应的处理。当该接口处理完异常后，会简单地将异常再次抛出给目标方法。</p>
<p>不过，这个接口较为特殊，从形式上看，该接口中没有必须要实现的方法。但，这个接口却确实有必须要实现的方法 afterThrowing()。这个方法重载了四种形式。由于使用时，一般只使用其中一种，该接口定义为标识接口（没有方法的接口）。</p>
<img src="/2019/08/08/Spring与AOP/aop03.jpg">

<p>这四种方法中，常用的形式如下：</p>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> afterThrowing(自定义的异常类 e)</span><br></pre></td></tr></table></figure>

<p>这里的参数 e 为，与具体业务相关的用户自定义的异常类对象。容器会根据异常类型的不同，自动选择不同的该方法执行。这些方法的执行是在目标方法执行结束后执行的。</p>
<p>（1） 定义异常类的父类</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">UserException</span> <span class="keyword">extends</span> <span class="title">Exception</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	public <span class="type">UserException</span>() &#123;</span><br><span class="line">		<span class="keyword">super</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	public <span class="type">UserException</span>(<span class="type">String</span> message) &#123;</span><br><span class="line">		<span class="keyword">super</span>(message);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（2） 定义两个异常类的子类</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">UsernameException</span> <span class="keyword">extends</span> <span class="title">UserException</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	public <span class="type">UsernameException</span>() &#123;</span><br><span class="line">		<span class="keyword">super</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	public <span class="type">UsernameException</span>(<span class="type">String</span> message) &#123;</span><br><span class="line">		<span class="keyword">super</span>(message);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">PasswordException</span> <span class="keyword">extends</span> <span class="title">UserException</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	public <span class="type">PasswordException</span>() &#123;</span><br><span class="line">		<span class="keyword">super</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	public <span class="type">PasswordException</span>(<span class="type">String</span> message) &#123;</span><br><span class="line">		<span class="keyword">super</span>(message);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（3） 定义业务接口。要抛出异常父类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//主业务借口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ISomeService</span> </span>&#123;</span><br><span class="line">	<span class="comment">//目标方法</span></span><br><span class="line">	<span class="function"><span class="keyword">boolean</span> <span class="title">login</span><span class="params">(String username,String password)</span></span></span><br><span class="line"><span class="function">			<span class="keyword">throws</span> UserException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（4） 定义目标类</p>
<figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line"><span class="comment">//目标类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SomeServiceImpl</span> <span class="keyword"><span class="keyword">implements</span> <span class="type">ISomeService</span></span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	@Override</span><br><span class="line">	<span class="keyword">public</span> boolean login(<span class="keyword">String</span> username, <span class="keyword">String</span> password) throws UserException &#123;</span><br><span class="line">		<span class="keyword">if</span> (!<span class="string">"huang"</span>.equals(username)) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">UsernameException</span>(<span class="string">"用户名输错了"</span>);</span><br><span class="line">			</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (!<span class="string">"111"</span>.equals(password)) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">PasswordException</span>(<span class="string">"密码输错了"</span>);</span><br><span class="line">			</span><br><span class="line">		&#125;</span><br><span class="line"><span class="comment">//		double a = 3 / 0;</span></span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（5） 定义异常通知</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">public <span class="keyword">class</span> MyThrowsAdvice implements ThrowsAdvice &#123;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 当目标方法抛出UsernameException异常时，执行当前方法</span></span><br><span class="line">	public void after<span class="constructor">Throwing(UserException <span class="params">ex</span>)</span> &#123;</span><br><span class="line">		<span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"发生用户名异常 ex = "</span> + ex.get<span class="constructor">Message()</span>);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 当目标方法抛出PasswordException异常时，执行当前方法</span></span><br><span class="line">	public void after<span class="constructor">Throwing(PasswordException <span class="params">ex</span>)</span> &#123;</span><br><span class="line">		<span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"发生密码异常 ex = "</span> + ex.get<span class="constructor">Message()</span>);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 当目标方法抛出其它异常时，执行当前方法</span></span><br><span class="line">	public void after<span class="constructor">Throwing(Exception <span class="params">ex</span>)</span> &#123;</span><br><span class="line">		<span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"发生异常 ex = "</span> + ex.get<span class="constructor">Message()</span>);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（6） 定义测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> <span class="keyword">throws</span> UserException </span>&#123;</span><br><span class="line">		String resource = <span class="string">"com/huang/aop05/applicationContext.xml"</span>;</span><br><span class="line">		ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(resource);</span><br><span class="line">		<span class="comment">//serviceProxy为代理对象，而非目标对象</span></span><br><span class="line">		ISomeService service = (ISomeService) ac.getBean(<span class="string">"serviceProxy"</span>);  </span><br><span class="line">		service.login(<span class="string">"huang"</span>, <span class="string">"111"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="通知的其它用法"><a href="#通知的其它用法" class="headerlink" title="通知的其它用法"></a>通知的其它用法</h3><h4 id="给目标方法织入多个切面"><a href="#给目标方法织入多个切面" class="headerlink" title="给目标方法织入多个切面"></a>给目标方法织入多个切面</h4><p>若要给目标方法织入多个切面，则需要在配置代理对象的切面属性时，设定为 array。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"interceptorNames"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">value</span>&gt;</span>myBeforeAdvice<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">value</span>&gt;</span>myAfterAdvice<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="无接口的-CGLIB-代理生成"><a href="#无接口的-CGLIB-代理生成" class="headerlink" title="无接口的 CGLIB 代理生成"></a>无接口的 CGLIB 代理生成</h4><p>若不存在接口，则 ProxyFactoryBean 会自动采用 CGLIB 方式生成动态代理(有接口使用 JDK 的 Proxy 动态代理)。</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">&lt;bean <span class="built_in">id</span>=<span class="string">"serviceProxy"</span> <span class="built_in">class</span>=<span class="string">"org.springframework.aop.framework.ProxyFactoryBean"</span>&gt;</span><br><span class="line">	&lt;<span class="keyword">property</span> <span class="built_in">name</span>=<span class="string">"target"</span> <span class="keyword">ref</span>=<span class="string">"someService"</span>/&gt;</span><br><span class="line">	&lt;<span class="keyword">property</span> <span class="built_in">name</span>=<span class="string">"interceptorNames"</span> value=<span class="string">"myAdvice"</span>/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure>

<p>查看后台运行情况，可以看到代理生成使用的是 CGLIB 代理机制。</p>
<img src="/2019/08/08/Spring与AOP/aop04.jpg">


<h4 id="有接口的-CGLIB-代理生成"><a href="#有接口的-CGLIB-代理生成" class="headerlink" title="有接口的 CGLIB 代理生成"></a>有接口的 CGLIB 代理生成</h4><p>若存在接口，但又需要使用 CGLIB 生成代理对象，此时，只需要在配置文件中增加一个 proxyTargetClass 属性设置，用于指定强制使用 CGLIB 代理机制。</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&lt;property <span class="attribute">name</span>=<span class="string">"proxyTargetClass"</span> <span class="attribute">value</span>=<span class="string">"true"</span>/&gt;</span><br></pre></td></tr></table></figure>

<p>也可指定 optimize（优化）的值为 true，强制使用 CGLIB 代理机制。</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&lt;property <span class="attribute">name</span>=<span class="string">"optimize"</span> <span class="attribute">value</span>=<span class="string">"true"</span>/&gt;</span><br></pre></td></tr></table></figure>

<p>查看后台运行情况，可以看到代理生成使用的是 CGLIB 代理机制。</p>
<img src="/2019/08/08/Spring与AOP/aop05.jpg">


<h2 id="顾问-Advisor"><a href="#顾问-Advisor" class="headerlink" title="顾问 Advisor"></a>顾问 Advisor</h2><p>顾问（Advisor）是 Spring 提供的另一种切面。其可以完成更为复杂的切面织入功能。PointcutAdvisor 是顾问的一种， 可以指定具体的切入点。 顾问将通知进行了包装，会根据不同的通知类型，在不同的时间点，将切面织入到不同的切入点。PointcutAdvisor 接口有两个较为常用的实现类：</p>
<ul>
<li>NameMatchMethodPointcutAdvisor 名称匹配方法切入点顾问  </li>
<li>RegexpMethodPointcutAdvisor 正则表达式匹配方法切入点顾问</li>
</ul>
<h3 id="名称匹配方法切入点顾问"><a href="#名称匹配方法切入点顾问" class="headerlink" title="名称匹配方法切入点顾问"></a>名称匹配方法切入点顾问</h3><p>NameMatchMethodPointcutAdvisor，即名称匹配方法切入点顾问。容器可根据配置文件中指定的方法名来设置切入点。</p>
<p>（1） 修改配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 指定切入点：这里匹配的对象是简单方法名 --&gt;</span></span><br><span class="line">    	<span class="comment">&lt;!-- 指定doFirst方法为切入点方法 --&gt;</span></span><br><span class="line">    	<span class="comment">&lt;!-- &lt;property name="mappedName" value="doFirst"/&gt; --&gt;</span></span><br><span class="line">    	<span class="comment">&lt;!-- 指定doFirst、doSecond方法为切入点方法 --&gt;</span></span><br><span class="line">    	<span class="comment">&lt;!-- &lt;property name="mappedNames" value="doFirst,doSecond"/&gt; --&gt;</span></span><br><span class="line">    	<span class="comment">&lt;!-- 指定自定义匹配*ir*方法为切入点方法 --&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mappedNames"</span> <span class="attr">value</span>=<span class="string">"*ir*"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="正则表达式方法切入点顾问"><a href="#正则表达式方法切入点顾问" class="headerlink" title="正则表达式方法切入点顾问"></a>正则表达式方法切入点顾问</h3><p>RegexpMethodPointcutAdvisor，即正则表达式方法顾问。容器可根据正则表达式来设置切入点。注意，与正则表达式进行匹配的对象是接口中的方法名，而非目标类（接口的实现类）的方法名。</p>
<p>（1） 修改配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 这里的正则表达式匹配的对象是全限定性方法名 --&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- &lt;property name="pattern" value=".*doFirst"/&gt; --&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- &lt;property name="patterns" value=".*doFirst,.*doSecond"/&gt; --&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 包含doS的或doT的方法为切入点方法 --&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- &lt;property name="pattern" value=".*doFirst|.*doSecond"/&gt; --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"pattern"</span> <span class="attr">value</span>=<span class="string">".*S.*"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>正则表达式常用的运算符有三个，如下表：</p>
<table>
<thead>
<tr>
<th align="center">运算符</th>
<th align="left">名称</th>
<th align="center">意义</th>
</tr>
</thead>
<tbody><tr>
<td align="center">.</td>
<td align="left">点号</td>
<td align="center">表示任意单个字符</td>
</tr>
<tr>
<td align="center">+</td>
<td align="left">加号</td>
<td align="center">表示前一个字符出现一次或者多次</td>
</tr>
<tr>
<td align="center">*</td>
<td align="left">星号</td>
<td align="center">表示前一个字符出现0次或者多次</td>
</tr>
</tbody></table>
<h2 id="自动代理生成器"><a href="#自动代理生成器" class="headerlink" title="自动代理生成器"></a>自动代理生成器</h2><p>ProxyFactoryBean 代理工具类存在着如下缺点：<br>（1）一个代理对象只能代理一个 Bean，即如果有两个 Bean 同时都要织入同一个切面，这时，不仅要配置这两个 Bean，即两个目标对象，同时还要配置两个代理对象。<br>（2）在客户类中获取 Bean 时，使用的是代理类的 id，而非我们定义的目标对象 Bean 的 id。我们真正想要执行的应该是目标对象。从形式上看，不符合正常的逻辑。</p>
<p>Spring 提供了自动代理生成器，用于解决 ProxyFactoryBean 的问题。常用的自动代理生成器有两个：</p>
<ul>
<li>默认 advisor 自动代理生成器  </li>
<li>Bean 名称自动代理生成器</li>
</ul>
<blockquote>
<p>注意：<br>自动代理生成器均继承自 Bean 后处理器 BeanPostProcessor。容器中所<br>有 Bean 在初始化时均会自动执行 Bean 后处理器中的方法，故其无需 id 属性。所以自动代理生成器的 Bean 也没有 id 属性，客户类直接使用目标对象 bean 的 id。</p>
</blockquote>
<p>自动代理生成器，均是继承自 BeanPostProcessor， Bean 后处理器。查看源码：</p>
<img src="/2019/08/08/Spring与AOP/aop06.jpg">

<img src="/2019/08/08/Spring与AOP/aop07.jpg">

<img src="/2019/08/08/Spring与AOP/aop08.jpg">

<img src="/2019/08/08/Spring与AOP/aop09.jpg">

<img src="/2019/08/08/Spring与AOP/aop10.jpg">

<img src="/2019/08/08/Spring与AOP/aop11.jpg">


<h3 id="默认-Advisor-自动代理生成器"><a href="#默认-Advisor-自动代理生成器" class="headerlink" title="默认 Advisor 自动代理生成器"></a>默认 Advisor 自动代理生成器</h3><p>DefaultAdvisorAutoProxyCreator 代理的生成方式是，将所有的目标对象与 Advisor 自动结合，生成代理对象。无需给生成器做任何的注入配置。注意，只能与 Advisor 配合使用。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 注册自动代理生成器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"</span>/&gt;</span></span><br></pre></td></tr></table></figure>


<blockquote>
<p>缺点：<br>（1）不能选择目标对象<br>（2）不能选择切面类型，切面只能是advisor<br>（3）不能选择advisor，所以advisor均将被作为切面织入到目标方法</p>
</blockquote>
<h3 id="Bean-名称自动代理生成器"><a href="#Bean-名称自动代理生成器" class="headerlink" title="Bean 名称自动代理生成器"></a>Bean 名称自动代理生成器</h3><p>BeanNameAutoProxyCreator 的代理生成方式是，根据 bean 的 id，来为符合相应名称的类生成相应代理对象，且切面既可以是顾问 Advisor 又可以是通知 Advice。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 注册自动代理生成器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"beanNames"</span> <span class="attr">value</span>=<span class="string">"someService"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"interceptorNames"</span> <span class="attr">value</span>=<span class="string">"myAdvisor"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>缺点：<br>1）若存在多个目标对象，就需要使用多次ProxyFactoryBean来创建多个代理对象，这会使配置文件变得臃肿，不便于管理<br>2）用户真正想调用的是目标对象，而真正可以调用的却是代理对象，这不符合正常的逻辑</p>
</blockquote>
<h2 id="AspectJ-对-DAO-的实现"><a href="#AspectJ-对-DAO-的实现" class="headerlink" title="AspectJ 对 DAO 的实现"></a>AspectJ 对 DAO 的实现</h2><p>对于 AOP 这种编程思想，很多框架都进行了实现。 Spring 就是其中之一， 可以完成面向切面编程。 然而， AspectJ 也实现了 AOP 的功能，且其实现方式更为简捷，使用更为方便，而且还支持注解式开发(在 Spring 中使用 AOP 开发时，一般使用 AspectJ 的实现方式)。</p>
<h3 id="AspectJ-简介"><a href="#AspectJ-简介" class="headerlink" title="AspectJ 简介"></a>AspectJ 简介</h3><blockquote>
<p>AspectJ 是一个面向切面的框架，它扩展了 Java 语言。 AspectJ 定义了 AOP 语法，它有一个专门的编译器用来生成遵守 Java 字节编码规范的 Class 文件。——百度百科《AspectJ》</p>
</blockquote>
<h3 id="AspectJ-的通知类型"><a href="#AspectJ-的通知类型" class="headerlink" title="AspectJ 的通知类型"></a>AspectJ 的通知类型</h3><p>AspectJ 中常用的通知有五种类型：</p>
<p>（1）前置通知<br>（2）后置通知<br>（3）环绕通知<br>（4）异常通知<br>（5）最终通知</p>
<p>其中最终通知是指，无论程序执行是否正常，该通知都会执行。类似于 try..catch 中的 finally 代码块。</p>
<h3 id="AspectJ-的切入点表达式"><a href="#AspectJ-的切入点表达式" class="headerlink" title="AspectJ 的切入点表达式"></a>AspectJ 的切入点表达式</h3><p>AspectJ 除了提供了六种通知外，还定义了专门的表达式用于指定切入点。表达式的原型是：</p>
<figure class="highlight coq"><table><tr><td class="code"><pre><span class="line">execution ( [modifiers-<span class="built_in">pattern</span>]  访问权限类型</span><br><span class="line">		  ret-type-<span class="built_in">pattern</span> 返回值类型(不可省)</span><br><span class="line">		  [declaring-type-<span class="built_in">pattern</span>] 全限定性类名</span><br><span class="line">		  name-<span class="built_in">pattern</span>(param-<span class="built_in">pattern</span>) 方法名(参数名) (不可省)</span><br><span class="line">		  [throws-<span class="built_in">pattern</span>] 抛出异常类型</span><br><span class="line">		  )</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：<br>切入点表达式要匹配的对象就是目标方法的方法名。所以， execution 表达式中明显就是方法的签名。表达式中加[ ]的部分表示可省略部分，各部分间用空格分开。在其中可以使用以下符号：</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">符    号</th>
<th align="left">意义</th>
</tr>
</thead>
<tbody><tr>
<td align="center">*</td>
<td align="left">0至多个任意字符</td>
</tr>
<tr>
<td align="center">..</td>
<td align="left">1. 用在方法参数中，表示任意多个参数。2. 用在包名后，表示当前及其子类</td>
</tr>
<tr>
<td align="center">+</td>
<td align="left">1. 用在类名后，表示当前类及其子类。2. 用在接口后，表示当前接口及其实现类</td>
</tr>
</tbody></table>
<p>举例：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="comment">//指定所有包下的 serivce 子包下所有类中的 doSome()方法为切入点</span></span><br><span class="line"><span class="function"><span class="title">execution</span><span class="params">(* *..service.*.doSome()</span></span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="comment">//指定只有一级包下的 serivce 子包下所有类中的 doSome()方法为切入点</span></span><br><span class="line"><span class="function"><span class="title">execution</span><span class="params">(* *.service.*.doSome()</span></span>)</span><br></pre></td></tr></table></figure>

<h3 id="AspectJ-基于注解的-AOP-实现"><a href="#AspectJ-基于注解的-AOP-实现" class="headerlink" title="AspectJ 基于注解的 AOP 实现"></a>AspectJ 基于注解的 AOP 实现</h3><p>AspectJ 提供了以注解方式对于 AOP 的实现。</p>
<h4 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h4><p>（1） 定义业务接口与实现类</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="comment">//主业务接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">ISomeService</span> &#123;</span><br><span class="line">	<span class="comment">//主业务方法</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">doFirst</span>(<span class="params"></span>)</span>;</span><br><span class="line">	<span class="comment">//主业务方法</span></span><br><span class="line">	<span class="function">String <span class="title">doSecond</span>(<span class="params"></span>)</span>;</span><br><span class="line">	<span class="comment">//主业务方法</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">doThird</span>(<span class="params"></span>)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//目标类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SomeServiceImpl</span> <span class="keyword">implements</span> <span class="title">ISomeService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//目标方法</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFirst</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"执行doFirst()方法"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//目标方法</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">doSecond</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"执行doSecond()方法"</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="string">"abcde"</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//目标方法</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doThird</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"执行doThird()方法"</span>);</span><br><span class="line">		System.out.println(<span class="string">"执行doThird()方法"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（2） 定义切面 POJO 类，并添加@Aspect 注解和通知注解</p>
<p>该类为一个 POJO 类，将作为切面出现。其中定义了若干普通方法，将作为不同的通知方法；在定义的 POJO 类上添加@Aspect 注解，指定当前 POJO 类将作为切面。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Aspect</span>		<span class="comment">// 表示当前类为切面</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAspectJ</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Before</span>(<span class="string">"execution(* *..ISomeService.doFirst(..))"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myBefore</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"执行前置通知方法"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Before</span>(<span class="string">"execution(* *..ISomeService.doFirst(..))"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myBefore</span><span class="params">(JoinPoint jp)</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"执行前置通知方法 jp = "</span> + jp);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（3） 定义 Spring 配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 注册切面 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myAspectJ"</span> <span class="attr">class</span>=<span class="string">"com.huang.annotation.MyAspectJ"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 注册目标对象 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"someService"</span> <span class="attr">class</span>=<span class="string">"com.huang.annotation.SomeServiceImpl"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 注册AspectJ的自动代理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>（4） 定义测试类</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">	@Test</span><br><span class="line">	public void test01<span class="literal">()</span> &#123;</span><br><span class="line">		String resource = <span class="string">"com/huang/annotation/applicationContext.xml"</span>;</span><br><span class="line">		ApplicationContext ac = <span class="keyword">new</span> <span class="constructor">ClassPathXmlApplicationContext(<span class="params">resource</span>)</span>;</span><br><span class="line">		<span class="comment">//serviceProxy为代理对象，而非目标对象</span></span><br><span class="line">		ISomeService service = (ISomeService) ac.get<span class="constructor">Bean(<span class="string">"someService"</span>)</span>;  </span><br><span class="line">		service.<span class="keyword">do</span><span class="constructor">First()</span>;</span><br><span class="line">		<span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"----------------------"</span>);</span><br><span class="line">		service.<span class="keyword">do</span><span class="constructor">Second()</span>;</span><br><span class="line">		<span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"----------------------"</span>);</span><br><span class="line">		service.<span class="keyword">do</span><span class="constructor">Third()</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Before-前置通知-增强方法有-JoinPoint-参数"><a href="#Before-前置通知-增强方法有-JoinPoint-参数" class="headerlink" title="@Before 前置通知-增强方法有 JoinPoint 参数"></a>@Before 前置通知-增强方法有 JoinPoint 参数</h4><p>在目标方法执行之前执行。被注解为前置通知的方法，可以包含一个 JoinPoint 类型参数。该类型的对象本身就是切入点表达式。通过该参数，可获取切入点表达式、方法签名、目标对象等。</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">//前置通知</span><br><span class="line">@<span class="keyword">Before</span>("execution(* *..ISomeService.doFirst(..))")</span><br><span class="line"><span class="built_in">public</span> <span class="type">void</span> myBefore() &#123;</span><br><span class="line">	<span class="keyword">System</span>.<span class="keyword">out</span>.println("执行前置通知方法");</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">Before</span>("execution(* *..ISomeService.doFirst(..))")</span><br><span class="line"><span class="built_in">public</span> <span class="type">void</span> myBefore(JoinPoint jp) &#123;</span><br><span class="line">	<span class="keyword">System</span>.<span class="keyword">out</span>.println("执行前置通知方法 jp = " + jp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<img src="/2019/08/08/Spring与AOP/aop12.jpg">


<h4 id="AfterReturning-后置通知-注解有-returning-属性"><a href="#AfterReturning-后置通知-注解有-returning-属性" class="headerlink" title="@AfterReturning 后置通知-注解有 returning 属性"></a>@AfterReturning 后置通知-注解有 returning 属性</h4><p>在目标方法执行之后执行。由于是目标方法之后执行，所以可以获取到目标方法的返回值。 该注解的 returning 属性就是用于指定接收方法返回值的变量名的。 </p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="comment">//后置通知</span></span><br><span class="line">@<span class="constructor">AfterReturning(<span class="string">"execution(* *..ISomeService.doSecond(..))"</span>)</span></span><br><span class="line">public void my<span class="constructor">AfterReturning()</span> &#123;</span><br><span class="line">	<span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"执行后置通知方法"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="constructor">AfterReturning(<span class="params">value</span>=<span class="string">"execution(* *..ISomeService.doSecond(..))"</span>,<span class="params">returning</span>=<span class="string">"result"</span>)</span></span><br><span class="line">public void my<span class="constructor">AfterReturning(Object <span class="params">result</span>)</span> &#123;</span><br><span class="line">	<span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"执行后置通知方法 result = "</span> + result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<img src="/2019/08/08/Spring与AOP/aop13.jpg">


<blockquote>
<p>注意：<br>被注解为后置通知的方法，除了可以包含 JoinPoint 参数外，还可以包含用于接收返回值的变量。该变量最好为 Object 类型，因为目标方法的返回值可能是任何类型。</p>
</blockquote>
<h4 id="Around-环绕通知-增强方法有-ProceedingJoinPoint-参数"><a href="#Around-环绕通知-增强方法有-ProceedingJoinPoint-参数" class="headerlink" title="@Around 环绕通知-增强方法有 ProceedingJoinPoint 参数"></a>@Around 环绕通知-增强方法有 ProceedingJoinPoint 参数</h4><p>在目标方法执行之前之后执行。被注解为环绕增强的方法要有返回值， Object 类型。 并且方法可以包含一个 ProceedingJoinPoint 类型的参数。接口 ProceedingJoinPoint 其有一个 proceed()方法，用于执行目标方法。若目标方法有返回值，则该方法的返回值就是目标方法的返回值。最后，环绕增强方法将其返回值返回。该增强方法实际是拦截了目标方法的执行。</p>
<figure class="highlight processing"><table><tr><td class="code"><pre><span class="line"><span class="comment">//环绕通知</span></span><br><span class="line">@Around(<span class="string">"execution(* *..ISomeService.doSecond(..))"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">Object</span> myAround(ProceedingJoinPoint pjp) <span class="keyword">throws</span> Throwable&#123;</span><br><span class="line">	System.out.<span class="built_in">println</span>(<span class="string">"执行环绕通知方法，目标方法执行之前"</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//执行目标方法</span></span><br><span class="line">	<span class="keyword">Object</span> result = pjp.proceed();</span><br><span class="line">	System.out.<span class="built_in">println</span>(<span class="string">"执行环绕通知方法，目标方法执行之后"</span>);</span><br><span class="line">	<span class="keyword">if</span> (result != <span class="keyword">null</span>) &#123;</span><br><span class="line">		result = ((<span class="keyword">String</span>)result).toUpperCase();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<img src="/2019/08/08/Spring与AOP/aop14.jpg">



<h4 id="AfterThrowing-异常通知-注解中有-throwing-属性"><a href="#AfterThrowing-异常通知-注解中有-throwing-属性" class="headerlink" title="@AfterThrowing 异常通知-注解中有 throwing 属性"></a>@AfterThrowing 异常通知-注解中有 throwing 属性</h4><p>在目标方法抛出异常后执行。 该注解的 throwing 属性用于指定所发生的异常类对象。当然，被注解为异常通知的方法可以包含一个参数 Throwable，参数名称为 throwing 指定的名称，表示发生的异常对象。</p>
<p>在目标类定义一个异常</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="comment">//目标方法</span></span><br><span class="line">@Override</span><br><span class="line">public void <span class="keyword">do</span><span class="constructor">Third()</span> &#123;</span><br><span class="line">	<span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"执行doThird()方法"</span> + <span class="number">3</span><span class="operator"> / </span><span class="number">0</span>);</span><br><span class="line">	<span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"执行doThird()方法"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="comment">//异常通知</span></span><br><span class="line">@<span class="constructor">AfterThrowing(<span class="string">"execution(* *..ISomeService.doThird(..))"</span>)</span></span><br><span class="line">public void my<span class="constructor">AfetrThrowing()</span> &#123;</span><br><span class="line">	<span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"执行异常通知方法"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用切入点，叫 doThirdPointcut()</span></span><br><span class="line">@<span class="constructor">AfterThrowing(<span class="params">value</span>=<span class="string">"doThirdPointcut()"</span>,<span class="params">throwing</span>=<span class="string">"ex"</span>)</span></span><br><span class="line">public void my<span class="constructor">AfterThrowing(Exception <span class="params">ex</span>)</span> &#123;</span><br><span class="line">	<span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"执行异常通知方法 ex = "</span> + ex.get<span class="constructor">Message()</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义了一个切入点，叫 doThirdPointcut()</span></span><br><span class="line">@<span class="constructor">Pointcut(<span class="string">"execution(* *..ISomeService.doThird(..))"</span>)</span></span><br><span class="line">public void <span class="keyword">do</span><span class="constructor">ThirdPointcut()</span> &#123;&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<img src="/2019/08/08/Spring与AOP/aop15.jpg">



<h4 id="After-最终通知"><a href="#After-最终通知" class="headerlink" title="@After 最终通知"></a>@After 最终通知</h4><p>无论目标方法是否抛出异常，该增强均会被执行。</p>
<figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="comment">//最终通知</span></span><br><span class="line"><span class="meta">@After</span>(<span class="string">"doThirdPointcut()"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">myAfter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	System.out.println(<span class="string">"执行最终通知方法"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<img src="/2019/08/08/Spring与AOP/aop16.jpg">



<h4 id="Pointcut-定义切入点"><a href="#Pointcut-定义切入点" class="headerlink" title="@Pointcut 定义切入点"></a>@Pointcut 定义切入点</h4><p>当较多的通知增强方法使用相同的 execution 切入点表达式时，编写、维护均较为麻烦。AspectJ 提供了@Pointcut 注解，用于定义 execution 切入点表达式。其用法是，将@Pointcut 注解在一个方法之上，以后所有的 executeion 的 value 属性值均可使用该方法名作为切入点。代表的就是@Pointcut 定义的切入点。这个使用@Pointcute 注解的方法一般使用 private 的标识方法，即没有实际作用的方法。</p>
<figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义了一个切入点，叫 doThirdPointcut()</span></span><br><span class="line"><span class="meta">@Pointcut</span>(<span class="string">"execution(* *..ISomeService.doThird(..))"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">doThirdPointcut</span><span class="params">()</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="AspectJ-基于-XML-的-AOP-实现"><a href="#AspectJ-基于-XML-的-AOP-实现" class="headerlink" title="AspectJ 基于 XML 的 AOP 实现"></a>AspectJ 基于 XML 的 AOP 实现</h3><p>AspectJ 除了提供了基于注解的 AOP 的实现外，还提供了以 XML 方式的实现。切面就是一个 POJO 类，而用于增强的方法就是普通的方法。通过配置文件，将切面中的功能增强织入到了目标类的目标方法中。</p>
<h4 id="实现步骤-1"><a href="#实现步骤-1" class="headerlink" title="实现步骤"></a>实现步骤</h4><p>（1） 定义业务接口与实现类</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="comment">//主业务接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">ISomeService</span> &#123;</span><br><span class="line">	<span class="comment">//主业务方法</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">doFirst</span>(<span class="params"></span>)</span>;</span><br><span class="line">	<span class="comment">//主业务方法</span></span><br><span class="line">	<span class="function">String <span class="title">doSecond</span>(<span class="params"></span>)</span>;</span><br><span class="line">	<span class="comment">//主业务方法</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">doThird</span>(<span class="params"></span>)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//目标类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SomeServiceImpl</span> <span class="keyword">implements</span> <span class="title">ISomeService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//目标方法</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFirst</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"执行doFirst()方法"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//目标方法</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">doSecond</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"执行doSecond()方法"</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="string">"abcde"</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//目标方法</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doThird</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"执行doThird()方法"</span> + <span class="number">3</span> / <span class="number">0</span>);</span><br><span class="line">		System.out.println(<span class="string">"执行doThird()方法"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（2） 定义切面 POJO 类</p>
<p>该类为一个 POJO 类，将作为切面出现。其中定义了若干普通方法，将作为不同的通知方法。</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 表示当前类为切面</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyAspectJ</span> &#123;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//前置通知</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myBefore</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">		System.<span class="keyword">out</span>.println(<span class="string">"执行前置通知方法"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line"><span class="comment">//	@Before("execution(* *..ISomeService.doFirst(..))")</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myBefore</span>(<span class="params">JoinPoint jp</span>)</span> &#123;</span><br><span class="line">		System.<span class="keyword">out</span>.println(<span class="string">"执行前置通知方法 jp = "</span> + jp);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//后置通知</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myAfterReturning</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">		System.<span class="keyword">out</span>.println(<span class="string">"执行后置通知方法"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myAfterReturning</span>(<span class="params">Object result</span>)</span> &#123;</span><br><span class="line">		System.<span class="keyword">out</span>.println(<span class="string">"执行后置通知方法 result = "</span> + result);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//环绕通知</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Object <span class="title">myAround</span>(<span class="params">ProceedingJoinPoint pjp</span>) throws Throwable</span>&#123;</span><br><span class="line">		System.<span class="keyword">out</span>.println(<span class="string">"执行环绕通知方法，目标方法执行之前"</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//执行目标方法</span></span><br><span class="line">		Object result = pjp.proceed();</span><br><span class="line">		System.<span class="keyword">out</span>.println(<span class="string">"执行环绕通知方法，目标方法执行之后"</span>);</span><br><span class="line">		<span class="keyword">if</span> (result != <span class="literal">null</span>) &#123;</span><br><span class="line">			result = ((String)result).toUpperCase();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> result;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//异常通知</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myAfetrThrowing</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">		System.<span class="keyword">out</span>.println(<span class="string">"执行异常通知方法"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//使用切入点，叫 doThirdPointcut()</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myAfterThrowing</span>(<span class="params">Exception ex</span>)</span> &#123;</span><br><span class="line">		System.<span class="keyword">out</span>.println(<span class="string">"执行异常通知方法 ex = "</span> + ex.getMessage());</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//最终通知</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myAfter</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">		System.<span class="keyword">out</span>.println(<span class="string">"执行最终通知方法"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（3） 注册目标对象与 POJO 切面类</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 注册切面 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myAspectJ"</span> <span class="attr">class</span>=<span class="string">"com.huang.xml.MyAspectJ"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 注册目标对象 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"someService"</span> <span class="attr">class</span>=<span class="string">"com.huang.xml.SomeServiceImpl"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>（4） 在容器中定义 AOP 配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- AOP配置 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">	    </span><br><span class="line">	    <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">"myAspectJ"</span>&gt;</span></span><br><span class="line">	    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">expression</span>=<span class="string">"execution(* *..ISomeService.doFirst(..))"</span> <span class="attr">id</span>=<span class="string">"doFirstPointcut"</span>/&gt;</span></span><br><span class="line">	    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">expression</span>=<span class="string">"execution(* *..ISomeService.doSecond(..))"</span> <span class="attr">id</span>=<span class="string">"doSecondPointcut"</span>/&gt;</span></span><br><span class="line">	    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">expression</span>=<span class="string">"execution(* *..ISomeService.doThird(..))"</span> <span class="attr">id</span>=<span class="string">"doThirdPointcut"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">	    <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>通过其子标签&lt;aop:pointcut/&gt;定义切入点，该标签有两个属性， id 与 expression。分别用于指定该切入点的名称及切入点的值。 expression 的值为 execution 表达式。</p>
<p>子标签&lt;aop:aspect/&gt;定义具体的织入规则：根据不同的通知类型，确定不同的织入时间；将 method 指定的增强方法，按照指定织入时间，织入到切入点指定的目标方法中。</p>
<p>&lt;aop:aspect/&gt;的 ref 属性用于指定使用哪个切面。&lt;aop:aspect/&gt;的子标签是各种不同的通知类型。不同的通知所包含的属性是不同的，但也有共同的属性。</p>
<ul>
<li>method：指定该通知使用的切面中的增强方法。  </li>
<li>pointcut-ref：指定该通知要应用的切入点。</li>
</ul>
<p>AspectJ 的 6 种通知的 XML 标签如下：</p>
<ul>
<li>&lt;aop:before/&gt;：前置通知  </li>
<li>lt;aop:after-returning/&gt;： 后置通知  </li>
<li>&lt;aop:around/&gt;：环绕通知  </li>
<li>&lt;aop:after-throwing/&gt;：异常通知  </li>
<li>&lt;aop:after/&gt;：最终通知  </li>
<li>&lt;aop:declare-parents/&gt;：引入通知</li>
</ul>
<p>（5） 定义测试类</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void test01<span class="literal">()</span> &#123;</span><br><span class="line">	String resource = <span class="string">"com/huang/xml/applicationContext.xml"</span>;</span><br><span class="line">	ApplicationContext ac = <span class="keyword">new</span> <span class="constructor">ClassPathXmlApplicationContext(<span class="params">resource</span>)</span>;</span><br><span class="line">	<span class="comment">//serviceProxy为代理对象，而非目标对象</span></span><br><span class="line">	ISomeService service = (ISomeService) ac.get<span class="constructor">Bean(<span class="string">"someService"</span>)</span>;  </span><br><span class="line">	service.<span class="keyword">do</span><span class="constructor">First()</span>;</span><br><span class="line">	<span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"----------------------"</span>);</span><br><span class="line">	service.<span class="keyword">do</span><span class="constructor">Second()</span>;</span><br><span class="line">	<span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"----------------------"</span>);</span><br><span class="line">	service.<span class="keyword">do</span><span class="constructor">Third()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="lt-aop-before-gt-前置通知"><a href="#lt-aop-before-gt-前置通知" class="headerlink" title="&lt;aop:before/&gt;前置通知"></a>&lt;aop:before/&gt;前置通知</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 前置通知 --&gt;</span></span><br><span class="line">	        <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">"myBefore"</span> <span class="attr">pointcut-ref</span>=<span class="string">"doFirstPointcut"</span>/&gt;</span></span><br><span class="line">	        <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">"myBefore(org.aspectj.lang.JoinPoint)"</span> <span class="attr">pointcut-ref</span>=<span class="string">"doFirstPointcut"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<img src="/2019/08/08/Spring与AOP/aop17.jpg">


<h4 id="lt-aop-after-returning-gt-后置通知"><a href="#lt-aop-after-returning-gt-后置通知" class="headerlink" title="&lt;aop:after-returning/&gt;后置通知"></a>&lt;aop:after-returning/&gt;后置通知</h4><p>其 XML 的配置中，有一个属性 returning，指定用于接收目标方法的返回值所使用的变量名。其可作为增强方法的参数出现。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">      <span class="comment">&lt;!-- 后置通知 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">aop:after-returning</span> <span class="attr">method</span>=<span class="string">"myAfterReturning"</span> <span class="attr">pointcut-ref</span>=<span class="string">"doSecondPointcut"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:after-returning</span> <span class="attr">method</span>=<span class="string">"myAfterReturning(java.lang.Object)"</span> <span class="attr">pointcut-ref</span>=<span class="string">"doSecondPointcut"</span> <span class="attr">returning</span>=<span class="string">"result"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<img src="/2019/08/08/Spring与AOP/aop18.jpg">


<h4 id="lt-aop-around-gt-环绕通知"><a href="#lt-aop-around-gt-环绕通知" class="headerlink" title="&lt;aop:around/&gt;环绕通知"></a>&lt;aop:around/&gt;环绕通知</h4><p>环绕通知的增强方法一般返回类型为 Object，是目标方法的返回值。并且可以包含一个参数 ProceedingJoinPoint，其方法 proceed()可执行目标方法。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 环绕通知 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:around</span> <span class="attr">method</span>=<span class="string">"myAround"</span> <span class="attr">pointcut-ref</span>=<span class="string">"doSecondPointcut"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<img src="/2019/08/08/Spring与AOP/aop19.jpg">


<h4 id="lt-aop-after-throwing-gt-异常通知"><a href="#lt-aop-after-throwing-gt-异常通知" class="headerlink" title="&lt;aop:after-throwing/&gt;异常通知"></a>&lt;aop:after-throwing/&gt;异常通知</h4><p>其 XML 的配置中，有一个属性 throwing，指定用于接收目标方法所抛出异常的变量名。其可作为增强方法的参数出现，该参数为 Throwable 类型。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 异常通知 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:after-throwing</span> <span class="attr">method</span>=<span class="string">"myAfterThrowing(java.lang.Exception)"</span> <span class="attr">pointcut-ref</span>=<span class="string">"doThirdPointcut"</span> <span class="attr">throwing</span>=<span class="string">"ex"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<img src="/2019/08/08/Spring与AOP/aop20.jpg">


<h4 id="lt-aop-after-gt-最终通知"><a href="#lt-aop-after-gt-最终通知" class="headerlink" title="&lt;aop:after/&gt;最终通知"></a>&lt;aop:after/&gt;最终通知</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 最终通知 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">"myAfter"</span> <span class="attr">pointcut-ref</span>=<span class="string">"doThirdPointcut"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<img src="/2019/08/08/Spring与AOP/aop21.jpg">





















]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>AOP</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring与IoC</title>
    <url>/2019/08/06/Spring%E4%B8%8EIoC/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Spring是一个容器，用于降低代码间的耦合度，根据不同的代码(主业务逻辑、系统级服务)采用IoC和AOP两种进行的业务逻辑。</p>
<a id="more"></a>

<p>主业务逻辑与系统级业务逻辑的特点：主业务代码间逻辑联系紧密，有具体的专业业务应用场景，复用性相对较低；系统级业务相对功能独立，没有具体的专业业务应用场景，主要是为主业务提供系统级服务，如日志、安全、事务等，复用性强。</p>
<p>降低耦合度的方式分为了两类： IoC 与 AOP。 IoC 使得主业务在相互调用过程中，不用再自己维护关系了，即不用再自己创建要使用的对象了。而是由 Spring 容器统一管理自动“注入”。而 AOP 使得系统级服务得到了最大复用，且不用再由程序员手工将系统级务“混杂”到主业务逻辑中了，而是由 Spring 容器统一完成“织入”。</p>
<h2 id="Spring-体系结构"><a href="#Spring-体系结构" class="headerlink" title="Spring 体系结构"></a>Spring 体系结构</h2><img src="/2019/08/06/Spring与IoC/spring01.png">


<p>Spring 由 20 多个模块组成，它们可以分为数据访问/集成（Data Access/Integration）、Web、面向切面编程（AOP, Aspects）、 应用服务器设备管理（Instrumentation）、消息发送（Messaging）、 核心容器（Core Container）和测试（Test）。</p>
<h2 id="Spring-的特点"><a href="#Spring-的特点" class="headerlink" title="Spring 的特点"></a>Spring 的特点</h2><h3 id="1-非侵入式"><a href="#1-非侵入式" class="headerlink" title="1. 非侵入式"></a>1. 非侵入式</h3><p>所谓非侵入式是指， Spring 框架的 API 不会在业务逻辑上出现， 即业务逻辑是 POJO(Plain Old Java Object)。由于业务逻辑中没有 Spring 的 API，所以业务逻辑可以从 Spring 框架快速的移植到其他框架，即与环境无关。</p>
<h3 id="2-容器"><a href="#2-容器" class="headerlink" title="2. 容器"></a>2. 容器</h3><p>Spring 作为一个容器，可以管理对象的生命周期、对象与对象之间的依赖关系。可以通过配置文件，来定义对象，以及设置与其他对象的依赖关系。(简单来说是一个xml配置文件)</p>
<h3 id="3-IoC"><a href="#3-IoC" class="headerlink" title="3. IoC"></a>3. IoC</h3><p>控制反转（IoC，Inversion of Control）， 即创建被调用者的实例不是由调用者完成，而是由 Spring 容器完成，并注入调用者。当应用了 IoC，一个对象依赖的其它对象会通过被动的方式传递进来，而不是这个对象自己创建或者查找依赖对象。即，不是对象从容器中查找依赖，而是容器在对象初始化时不等对象请求就主动将依赖传递给它。</p>
<h3 id="4-AOP"><a href="#4-AOP" class="headerlink" title="4. AOP"></a>4. AOP</h3><p>面向切面编程（AOP， Aspect Orient Programming），是一种编程思想，是面向对象编程 OOP 的补充。 很多框架都实现了对 AOP 编程思想的实现。 Spring 也提供了面向切面编程的丰富支持，允许通过分离应用的业务逻辑与系统级服务（例如日志和事务管理）进行开发。应用对象只实现它们应该做的——完成业务逻辑——仅此而已。它们并不负责其它的系统级关注点，例如日志或事务支持。</p>
<h2 id="Spring-与-IoC"><a href="#Spring-与-IoC" class="headerlink" title="Spring 与 IoC"></a>Spring 与 IoC</h2><p>控制反转（IoC， Inversion of Control），是一个概念，是一种思想。指将传统上由程序代码直接操控的对象调用权交给容器，通过容器来实现对象的装配和管理。控制反转就是对对象控制权的转移，从程序代码本身反转到了外部容器。当前比较流行的 IoC 实现方式有两种：依赖注入和依赖查找。</p>
<ul>
<li>依赖查找： Dependency Lookup， DL，容器提供回调接口和上下文环境给组件，程序代码则需要提供具体的查找方式。比较典型的是依赖于 JNDI 系统的查找。</li>
<li>依赖注入： Dependency Injection， DI，程序代码不做定位查询，这些工作由容器自行完成。</li>
</ul>
<p>依赖注入是目前最优秀的解耦方式。依赖注入让 Spring 的 Bean 之间以配置文件的方式组织在一起，而不是以硬编码的方式耦合在一起的。</p>
<h2 id="Spring-程序开发"><a href="#Spring-程序开发" class="headerlink" title="Spring 程序开发"></a>Spring 程序开发</h2><ol>
<li>定义接口与实体类</li>
</ol>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">public<span class="built_in"> interface </span>ISomeService &#123;</span><br><span class="line">	void doSome();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SomeServiceImpl</span> <span class="keyword">implements</span> <span class="title">ISomeService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">SomeServiceImpl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"执行无参构造器"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSome</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"执行doSome()方法"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>创建 Spring 配置文件</li>
</ol>
<p>Spring 配置文件的文件名可以随意，但 Spring 建议的名称为 applicationContext.xml。</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&lt;bean <span class="attribute">id</span>=<span class="string">"myService"</span> <span class="attribute">class</span>=<span class="string">"com.huang.service.SomeServiceImpl"</span>/&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>&lt;bean /&gt;： 用于定义一个实例对象。 一个实例对应一个 bean 元素。  </li>
<li>id：该属性是 Bean 实例的唯一标识，程序通过 id 属性访问 Bean， Bean 与 Bean 间的依赖关系也是通过 id 属性关联的。  </li>
<li>class：指定该 Bean 所属的类，</li>
</ul>
<ol start="3">
<li>定义测试类</li>
</ol>
<p>（1） ApplicationContext 接口容器<br>ApplicationContext 用于加载 Spring 的配置文件，在程序中充当“容器”的角色。其实现类有两个：ClassPathXmlApplicationContext 和 FileSystemXmlApplicationContext</p>
<figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">// 创建容器对象，加载Spring配置文件</span></span><br><span class="line">	<span class="comment">// 从类路径下查找配置文件</span></span><br><span class="line">	ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">	<span class="comment">//从容器中获取对象</span></span><br><span class="line">	ISomeService service = (ISomeService) ac.getBean(<span class="string">"myService"</span>);</span><br><span class="line">	service.doSome();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">test03</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">// 创建容器对象，加载Spring配置文件</span></span><br><span class="line">	<span class="comment">// 从项目的根下查找配置文件</span></span><br><span class="line">	ApplicationContext ac = <span class="keyword">new</span> FileSystemXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">	<span class="comment">//从容器中获取对象</span></span><br><span class="line">	ISomeService service = (ISomeService) ac.getBean(<span class="string">"myService"</span>);</span><br><span class="line">	service.doSome();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">test04</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//创建容器对象，加载Spring配置文件</span></span><br><span class="line">	<span class="comment">//从当前文件系统的D盘根目录下查找配置文件</span></span><br><span class="line">	ApplicationContext ac = <span class="keyword">new</span> FileSystemXmlApplicationContext(<span class="string">"d:/applicationContext.xml"</span>);</span><br><span class="line">	<span class="comment">//从容器中获取对象</span></span><br><span class="line">	ISomeService service = (ISomeService) ac.getBean(<span class="string">"myService"</span>);</span><br><span class="line">	service.doSome();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>ClassPathXmlApplicationContext 和 FileSystemXmlApplicationContext 的区别</p>
<img src="/2019/08/06/Spring与IoC/spring02.jpg">

<img src="/2019/08/06/Spring与IoC/spring03.jpg">


<p>（2） BeanFactory 接口容器</p>
<p>BeanFactory 接口是 ApplicationContext 接口的父类。</p>
<figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">test05</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	BeanFactory bf = <span class="keyword">new</span> XmlBeanFactory(<span class="keyword">new</span> ClassPathResource(<span class="string">"applicationContext.xml"</span>));</span><br><span class="line">	ISomeService service = (ISomeService) bf.getBean(<span class="string">"myService"</span>);</span><br><span class="line">	service.doSome();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Resouce 是一个接口，其具有两个实现类：  </p>
<ul>
<li>ClassPathResource：指定类路径下的资源文件  </li>
<li>FileSystemResource：指定项目根路径或本地磁盘路径下的资源文件。</li>
</ul>
<blockquote>
<p>注意：<br>ApplicationContext与BeanFactory容器的区别：  这两上容器对于其中Bean的创建时机不同：  </p>
<ol>
<li>ApplicationContext容器在进行初始化时，会将其中的所有Bean(对象)进行创建<br>缺点：占用系统资源较多（内存、CPU等）<br>优点：响应速度快  </li>
<li>BeanFactory容器中的对象，在容器初始化时并不会被创建，而是在真正获取该对象时才被创建<br>缺点：相对来说，响应速度慢<br>优点：占用系统资源较少</li>
</ol>
</blockquote>
<h2 id="Bean-的装配"><a href="#Bean-的装配" class="headerlink" title="Bean 的装配"></a>Bean 的装配</h2><p>Bean 的装配，即 Bean 对象的创建。容器根据代码要求创建 Bean 对象后再传递给代码的过程，称为 Bean 的装配。</p>
<h3 id="默认装配方式"><a href="#默认装配方式" class="headerlink" title="默认装配方式"></a>默认装配方式</h3><p>代码通过 getBean()方式从容器获取指定的 Bean 实例，容器默认调用 Bean 类的无参构造器，创建空值的实例对象。</p>
<img src="/2019/08/06/Spring与IoC/spring04.jpg">


<h3 id="动态工厂-Bean"><a href="#动态工厂-Bean" class="headerlink" title="动态工厂 Bean"></a>动态工厂 Bean</h3><p>有些时候，项目中需要通过工厂类来创建 Bean 实例，使用工厂模式创建 Bean 实例，会使工厂类与要创建的 Bean 类耦合到一起。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceFactory</span> &#123;</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> ISomeService <span class="title">getSomeService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> SomeServiceImpl();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 注册动态工厂 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"factory"</span> <span class="attr">class</span>=<span class="string">"com.huang.ba02.ServiceFactory"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 注册Service:动态工厂Bean --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myService"</span> <span class="attr">factory-bean</span>=<span class="string">"factory"</span> <span class="attr">factory-method</span>=<span class="string">"getSomeService"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void test01<span class="literal">()</span> &#123;</span><br><span class="line">	<span class="comment">// 创建容器对象，加载Spring配置文件</span></span><br><span class="line">	String resource = <span class="string">"com/huang/ba02/applicationContext.xml"</span>;</span><br><span class="line">	ApplicationContext ac = <span class="keyword">new</span> <span class="constructor">ClassPathXmlApplicationContext(<span class="params">resource</span>)</span>;</span><br><span class="line">	ISomeService service = (ISomeService) ac.get<span class="constructor">Bean(<span class="string">"myService"</span>)</span>;</span><br><span class="line">	service.<span class="keyword">do</span><span class="constructor">Some()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="静态工厂-Bean"><a href="#静态工厂-Bean" class="headerlink" title="静态工厂 Bean"></a>静态工厂 Bean</h3><p>静态工厂无需工厂实例，所以不再需要定义静态工厂&lt;bean/&gt;。</p>
<p>而对于工厂所要创建的 Bean，其不是由自己的类创建的，所以无需指定自己的类。但其是由工厂类创建的，所以需要指定所用工厂类。故 class 属性指定的是工厂类而非自己的类。</p>





<h3 id="容器中-Bean-的作用域"><a href="#容器中-Bean-的作用域" class="headerlink" title="容器中 Bean 的作用域"></a>容器中 Bean 的作用域</h3><p>当通过 Spring 容器创建一个 Bean 实例时，不仅可以完成 Bean 的实例化，还可以通过 scope 属性，为 Bean 指定特定的作用域。 Spring 支持 5 种作用域。</p>
<ol>
<li>singleton： 单态模式。即在整个 Spring 容器中，使用 singleton 定义的 Bean 将是单例的，只有一个实例。 默认为单态的。  </li>
<li>prototype： 原型模式。即每次使用 getBean 方法获取的同一个&lt;bean /&amp;gtl的实例都是一个新的实例。  </li>
<li>request：对于每次 HTTP 请求，都将会产生一个不同的 Bean 实例。  </li>
<li>session：对于每个不同的 HTTP session，都将产生一个不同的 Bean 实例。  </li>
<li>global session：每个全局的 HTTP session 对应一个 Bean 实例。典型情况下，仅在使用 portlet 集群时有效，多个 Web 应用共享一个 session。一般应用中， global-session 与 session是等同的。</li>
</ol>


<blockquote>
<p>注意：  </p>
<ol>
<li>对于 scope 的值 request、 session 与 global session， 只有在 Web 应用中使用 Spring 时，该作用域才有效。  </li>
<li>对于 scope 为 singleton 的单例模式， 该 Bean 是在容器被创建时即被装配好了。  </li>
<li>对于 scope 为 prototype 的原型模式， Bean 实例是在代码中使用该 Bean 实例时才进行装配的。</li>
</ol>
</blockquote>
<h3 id="Bean-后处理器"><a href="#Bean-后处理器" class="headerlink" title="Bean 后处理器"></a>Bean 后处理器</h3><p>Bean 后处理器是一种特殊的 Bean，容器中所有的 Bean 在初始化时，均会自动执行该类的两个方法。</p>
<figure class="highlight processing"><table><tr><td class="code"><pre><span class="line"><span class="comment">//该方法会在目标 Bean 初始化完毕之前由容器自动调用。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">Object</span> postProcessBeforeInitialization(<span class="keyword">Object</span> bean, <span class="keyword">String</span> beanId) </span><br><span class="line">	<span class="keyword">throws</span> BeansException</span><br></pre></td></tr></table></figure>

<figure class="highlight processing"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//该方法会在目标 Bean 初始化完毕之后由容器自动调用。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">Object</span> postProcessAfterInitialization(<span class="keyword">Object</span> bean, <span class="keyword">String</span> beanId) </span><br><span class="line">	<span class="keyword">throws</span> BeansException</span><br></pre></td></tr></table></figure>

<p>Bean 初始化完毕有一个标志：一个方法将被执行。即当该方法被执行时，表示该 Bean被初始化完毕。</p>
<p>它们的参数是：第一个参数是系统即将初始化的 Bean 实例，第二个参数是该 Bean 实例的 id 属性值。若 Bean 没有 id 就是 name 属性值。</p>
<p>（1） 定义接口</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">ISomeService</span> &#123;</span><br><span class="line">	<span class="comment">//主业务方法</span></span><br><span class="line">	<span class="function">String <span class="title">doSome</span>(<span class="params"></span>)</span>;</span><br><span class="line">	<span class="function">String <span class="title">doOther</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（2） 定义目标类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SomeServiceImpl</span> <span class="keyword">implements</span> <span class="title">ISomeService</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> a;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//目标方法</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">doSome</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"执行doSome()方法"</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="string">"abcde"</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//目标方法</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">doOther</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"执行doOther()方法"</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="string">"fghij"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（3） 使用动态代理进行增强</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">public <span class="keyword">class</span> MyBeanPostProcessor implements BeanPostProcessor &#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// bean：表示当前正在进行初始化的Bean对象</span></span><br><span class="line">	<span class="comment">// beanName：表示当前正在进行初始化的Bean对象的id</span></span><br><span class="line">	@Override</span><br><span class="line">	public Object post<span class="constructor">ProcessBeforeInitialization(Object <span class="params">bean</span>, String <span class="params">beanName</span>)</span> </span><br><span class="line">			throws BeansException &#123;</span><br><span class="line">		<span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"执行------before------()方法"</span>);</span><br><span class="line">		return bean;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	@Override</span><br><span class="line">	public Object post<span class="constructor">ProcessAfterInitialization(<span class="params">final</span> Object <span class="params">bean</span>, String <span class="params">beanName</span>)</span> </span><br><span class="line">			throws BeansException &#123;</span><br><span class="line">		<span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"执行------after------()方法"</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span> (<span class="string">"myService"</span>.equals(beanName)) &#123;</span><br><span class="line">		</span><br><span class="line">			Object obj = <span class="module-access"><span class="module"><span class="identifier">Proxy</span>.</span></span><span class="keyword">new</span><span class="constructor">ProxyInstance(<span class="params">bean</span>.<span class="params">getClass</span>()</span></span><br><span class="line">					.get<span class="constructor">ClassLoader()</span>,bean.get<span class="constructor">Class()</span>.get<span class="constructor">Interfaces()</span>,</span><br><span class="line">					<span class="keyword">new</span> <span class="constructor">InvocationHandler()</span> &#123;</span><br><span class="line">						</span><br><span class="line">						@Override</span><br><span class="line">						public Object invoke(Object proxy, Method <span class="keyword">method</span>, Object<span class="literal">[]</span> args) throws Throwable &#123;</span><br><span class="line">							Object invoke = <span class="keyword">method</span>.invoke(bean, args);</span><br><span class="line">							<span class="keyword">if</span> (<span class="string">"doSome"</span>.equals(<span class="keyword">method</span>.get<span class="constructor">Name()</span>)) &#123;</span><br><span class="line">								return ((String) invoke).<span class="keyword">to</span><span class="constructor">UpperCase()</span>;</span><br><span class="line">								</span><br><span class="line">							&#125;</span><br><span class="line">							return invoke;</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;);</span><br><span class="line">			return obj;</span><br><span class="line">		</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		return bean;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（4） 创建 Spring 配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 注册Service --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myService"</span> <span class="attr">class</span>=<span class="string">"com.huang.ba05.SomeServiceImpl"</span>/&gt;</span></span><br><span class="line"> </span><br><span class="line"> <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.huang.ba05.MyBeanPostProcessor"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>（5） 定义测试类</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void test01<span class="literal">()</span> &#123;</span><br><span class="line">	<span class="comment">// 创建容器对象，加载Spring配置文件</span></span><br><span class="line">	String resource = <span class="string">"com/huang/ba05/applicationContext.xml"</span>;</span><br><span class="line">	ApplicationContext ac = <span class="keyword">new</span> <span class="constructor">ClassPathXmlApplicationContext(<span class="params">resource</span>)</span>;</span><br><span class="line">	ISomeService service = (ISomeService) ac.get<span class="constructor">Bean(<span class="string">"myService"</span>)</span>;</span><br><span class="line">	<span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(service.<span class="keyword">do</span><span class="constructor">Some()</span>);</span><br><span class="line">	<span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(service.<span class="keyword">do</span><span class="constructor">Other()</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（6） 运行结果</p>
<img src="/2019/08/06/Spring与IoC/spring08.jpg">


<h3 id="定制-Bean-的生命始末"><a href="#定制-Bean-的生命始末" class="headerlink" title="定制 Bean 的生命始末"></a>定制 Bean 的生命始末</h3><p>可以为 Bean 定制初始化后的生命行为，也可以为 Bean 定制销毁前的生命行为。</p>
<img src="/2019/08/06/Spring与IoC/spring09.jpg">

<img src="/2019/08/06/Spring与IoC/spring10.jpg">

<img src="/2019/08/06/Spring与IoC/spring11.jpg">


<blockquote>
<p>注意，若要看到 Bean 的 destroy-method 的执行结果，需要满足两个条件：<br>（1） Bean 为 singleton，即单例<br>（2）要确保容器关闭。接口 ApplicationContext 没有 close()方法，但其实现类有。所以，可以将 ApplicationContext 强转为其实现类对象，或直接创建的就是实现类对象。</p>
</blockquote>
<h3 id="Bean-的生命周期"><a href="#Bean-的生命周期" class="headerlink" title="Bean 的生命周期"></a>Bean 的生命周期</h3><p>Step1：调用无参构造器，创建实例对象。<br>Step2：调用参数的 setter，为属性注入值。<br>Step3：若 Bean 实现了 BeanNameAware 接口，则会执行接口方法 setBeanName(String beanId)，使 Bean 类可以获取其在容器中的 id 名称。<br>Step4：若 Bean 实现了 BeanFactoryAware 接口，则执行接口方法 setBeanFactory(BeanFactory factory)，使 Bean 类可以获取到 BeanFactory 对象。<br>Step5：若定义并注册了 Bean 后处理器 BeanPostProcessor，则执行接口方法 postProcessBeforeInitialization()。<br>Step6：若 Bean 实现了 InitializingBean 接口，则执行接口方法 afterPropertiesSet ()。 该方法在 Bean 的所有属性的 set 方法执行完毕后执行，是 Bean 初始化结束的标志，即 Bean 实例化结束。<br>Step7：若设置了 init-method 方法，则执行。<br>Step8：若定义并注册了 Bean 后处理器 BeanPostProcessor ， 则执行接口方法 postProcessAfterInitialization()。<br>Step9：执行业务方法。<br>Step10：若 Bean 实现了 DisposableBean 接口，则执行接口方法 destroy()。<br>Step11：若设置了 destroy-method 方法，则执行。</p>
<h3 id="lt-bean-gt-标签的-id-属性与-name"><a href="#lt-bean-gt-标签的-id-属性与-name" class="headerlink" title="&lt;bean/&gt;标签的 id 属性与 name"></a>&lt;bean/&gt;标签的 id 属性与 name</h3><p>一般情况下，命名&lt;bean/&gt;使用 id 属性，而不使用 name 属性。在没有 id 属性的情况下，name 属性与 id 属性作用是相同的。但，当&lt;bean/&gt;中含有一些特殊字符时，就需要使用 name属性了。</p>
<p>命名规范：</p>
<ul>
<li>id：必须以字母开头，可以包含字母、数字、下划线、连字符、句号、冒号。</li>
<li>name：属性值则可以包含各种字符。</li>
</ul>
<h2 id="基于-XML-的-DI"><a href="#基于-XML-的-DI" class="headerlink" title="基于 XML 的 DI"></a>基于 XML 的 DI</h2><h3 id="注入分类"><a href="#注入分类" class="headerlink" title="注入分类"></a>注入分类</h3><p>Bean 实例在调用无参构造器创建了空值对象后，就要对 Bean 对象的属性进行初始化。初始化是由容器自动完成的， 称为注入。根据注入方式的不同， 常用的有两类： 设值注入、构造注入（接口注入几乎不用）。</p>
<h4 id="设值注入"><a href="#设值注入" class="headerlink" title="设值注入"></a>设值注入</h4><p>设值注入是指，通过 setter 方法传入被调用者的实例(底层通过调用setter方法将值注入)。这种注入方式简单、直观，因而在 Spring 的依赖注入中大量使用。</p>
<p>（1） 定义实体类</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">School</span> &#123;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Student</span> &#123;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">	<span class="keyword">private</span> School school;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span>(<span class="params">String name</span>)</span> &#123;</span><br><span class="line">		System.<span class="keyword">out</span>.println(<span class="string">"执行setName()"</span>);</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（2） 创建 Spring 配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 注册School --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"mySchool"</span> <span class="attr">class</span>=<span class="string">"com.huang.di01.School"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"清华大学"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 注册Student --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myStudent"</span> <span class="attr">class</span>=<span class="string">"com.huang.di01.Student"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"张三"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"22"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"school"</span> <span class="attr">ref</span>=<span class="string">"mySchool"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>（3） 定义测试类</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void test01<span class="literal">()</span> &#123;</span><br><span class="line">	String resource = <span class="string">"com/huang/di01/applicationContext.xml"</span>;</span><br><span class="line">	ApplicationContext ac = <span class="keyword">new</span> <span class="constructor">ClassPathXmlApplicationContext(<span class="params">resource</span>)</span>;</span><br><span class="line">	Student student = (Student) ac.get<span class="constructor">Bean(<span class="string">"myStudent"</span>)</span>;</span><br><span class="line">	<span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(student);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（4） 运行结果</p>
<img src="/2019/08/06/Spring与IoC/spring12.jpg">

<p>当指定 bean 的某属性值为另一 bean 的实例时，通过 ref 指定它们间的引用关系。 ref 的值必须为某 bean 的 id 值(域属性(引用类型)的注入需要使用 ref 属性，字符串和基本数据类型使用 value)。对于其它 Bean 对象的引用，除了&lt;bean/&gt;标签的 ref 属性外，还可以使用&lt;ref/&gt;标签。</p>
<h4 id="构造注入"><a href="#构造注入" class="headerlink" title="构造注入"></a>构造注入</h4><p>构造注入是指，在构造调用者实例的同时，完成被调用者的实例化。即，使用构造器设置依赖关系(底层调用的是构造器)。</p>
<p>（1） 修改实现类</p>
<img src="/2019/08/06/Spring与IoC/spring13.jpg">


<p>（2） 修改 Spring 配置文件</p>
<img src="/2019/08/06/Spring与IoC/spring14.jpg">


<p>&lt;constructor-arg /&gt;标签中用于指定参数的属性有：  </p>
<ul>
<li>name：指定参数名称。  </li>
<li>index：指明该参数对应着构造器的第几个参数，从 0 开始。不过，该属性不要也行，但要注意，若参数类型相同，或之间有包含关系，则需要保证赋值顺序要与构造器中的参数顺序一致。</li>
</ul>
<h3 id="命名空间注入"><a href="#命名空间注入" class="headerlink" title="命名空间注入"></a>命名空间注入</h3><p>对于设值注入与构造注入，在配置文件中，除了使用&lt;property/&gt;或&lt;constructor-arg/&gt;标签外，还可使用命名空间注入的方式，让注入的值以&lt;bean/&gt;标签属性的方式出现。根据注入实现方式的不同，分为： </p>
<p>p 命名空间注入：采用设值注入方式，故需要有相应的 setter<br>c 命名空间注入：采用构造注入方式，故需要有相应的构造器</p>
<h4 id="p-命名空间设值注入"><a href="#p-命名空间设值注入" class="headerlink" title="p 命名空间设值注入"></a>p 命名空间设值注入</h4><img src="/2019/08/06/Spring与IoC/spring15.jpg">


<h4 id="c-命名空间构造注入"><a href="#c-命名空间构造注入" class="headerlink" title="c 命名空间构造注入"></a>c 命名空间构造注入</h4><img src="/2019/08/06/Spring与IoC/spring16.jpg">


<h3 id="集合属性注入"><a href="#集合属性注入" class="headerlink" title="集合属性注入"></a>集合属性注入</h3><p>（1） 定义实体类</p>
<figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Some</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> School[] schools;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">String</span>[] myStrs;</span><br><span class="line">	<span class="keyword">private</span> List&lt;<span class="keyword">String</span>&gt; myList;</span><br><span class="line">	<span class="keyword">private</span> Set&lt;<span class="keyword">String</span>&gt; mySet;</span><br><span class="line">	<span class="keyword">private</span> Map&lt;<span class="keyword">String</span>, Object&gt; myMap;</span><br><span class="line">	<span class="keyword">private</span> Properties myPros;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（2） 修改 Spring 配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 注册School --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"mySchool"</span> <span class="attr">class</span>=<span class="string">"com.huang.di05.School"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"清华大学"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"mySchool2"</span> <span class="attr">class</span>=<span class="string">"com.huang.di05.School"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"北京大学"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 注册Student --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"mySome"</span> <span class="attr">class</span>=<span class="string">"com.huang.di05.Some"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"schools"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"mySchool"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"mySchool2"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 为数组注入值 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"myStrs"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>中国<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>广东<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 为 List 注入值 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"myList"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>广州<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>天河<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 为 Set 注入值 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mySet"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>现代学院<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>信息工程系<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 为 Map 注入值 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"myMap"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"mobile"</span> <span class="attr">value</span>=<span class="string">"1234567"</span>/&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"QQ"</span> <span class="attr">value</span>=<span class="string">"7654321"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 为 Properties 注入值 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"myPros"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"education"</span>&gt;</span>大学<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"gender"</span>&gt;</span>男<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Spring 配置文件的简单赋值</p>
<img src="/2019/08/06/Spring与IoC/spring17.jpg">


<h3 id="对于域属性的自动注入"><a href="#对于域属性的自动注入" class="headerlink" title="对于域属性的自动注入"></a>对于域属性的自动注入</h3><p>对于域属性的注入，也可不在配置文件中显示的注入。可以通过为&lt;bean/&gt;标签设置 autowire 属性值，为域属性进行隐式自动注入。根据自动注入判断标准的不同，可以分为两种：</p>
<ul>
<li>byName：根据名称自动注入  </li>
<li>byType：根据类型自动注入</li>
</ul>
<p>（1） byName 方式自动注入</p>
<p>当配置文件中被调用者 Bean 的 id 值与代码中调用者 Bean 类的属性名相同时，可使用 byName 方式，让容器自动将被调用者 Bean 注入给调用者 Bean。容器是通过调用者的 Bean 类的属性名与配置文件的被调用者 bean 的 id 进行比较而实现自动注入的。</p>
<img src="/2019/08/06/Spring与IoC/spring18.jpg">


<p>（2） byType 方式自动注入</p>
<p>使用 byType 方式自动注入，要求：配置文件中被调用者 bean 的 class 属性指定的类，要与代码中调用者 Bean 类的某域属性类型同源。即要么相同，要么有 is-a 关系（子类，或是实现类）。</p>
<img src="/2019/08/06/Spring与IoC/spring19.jpg">


<h3 id="使用-SPEL-注入"><a href="#使用-SPEL-注入" class="headerlink" title="使用 SPEL 注入"></a>使用 SPEL 注入</h3><p>SPEL(Spring Expression Language)，即 Spring EL 表达式语言。即，在 Spring 配置文件中为 Bean 的属性注入值时，可直接使用 SPEL 表达式计算的结果。 SPEL 表达式以#开头，后跟一对大括号。</p>
<p>用法： &lt;bean id=“abc” value=“#{…}”/&gt;。</p>
<img src="/2019/08/06/Spring与IoC/spring20.jpg">


<p>其它用法：<br>（1） &lt;property name=“school” value=“#{mySchool}”/&gt;：引用另一个 bean。指定 school 的值为另一个 Bean 实例 mySchool。<br>（2） &lt;property name=“schoolName” value=“#{mySchool.name.toUpperCase()}”/&gt;：使用指定属性，并使用其方法。指定 schoolName 的值为 mySchool 的 name 属性值，并将其字母均转换为大写字母（toUpperCase()方法）。</p>
<h3 id="使用内部-Bean-注入"><a href="#使用内部-Bean-注入" class="headerlink" title="使用内部 Bean 注入"></a>使用内部 Bean 注入</h3><p>若不希望代码直接访问某个 bean，即，在代码中通过 getBean 方法获取该 Bean 实例，则可将该 Bean 的定义放入调用者 bean 定义的内部。</p>
<img src="/2019/08/06/Spring与IoC/spring21.jpg">


<h3 id="使用同类抽象-Bean-注入"><a href="#使用同类抽象-Bean-注入" class="headerlink" title="使用同类抽象 Bean 注入"></a>使用同类抽象 Bean 注入</h3><p>当若干Bean实例同属于一个类，且这些实例的属性值又有相同值时，可以使用抽象Bean，以简化配置文件。</p>
<p>抽象 Bean 是用于让其它 bean 继承的。这个 bean 在 Bean 类中是不能通过 getBean 方法获取的。设置 abstract 属性为 true 来指明该 bean 为抽象 bean， 默认值为 false。 不过，该 bean 不为抽象 bean 时，也可被继承。 只不过，在应用中，用于被继承的 bean 一般为抽象 bean。</p>
<img src="/2019/08/06/Spring与IoC/spring22.jpg">


<h3 id="使用异类抽象-Bean-注入"><a href="#使用异类抽象-Bean-注入" class="headerlink" title="使用异类抽象 Bean 注入"></a>使用异类抽象 Bean 注入</h3><p>当若干不同的类对象具有相同的属性，且其值也相同时，可使用异类抽象 Bean。</p>
<img src="/2019/08/06/Spring与IoC/spring23.jpg">


<h3 id="为应用指定多个-Spring-配置文件"><a href="#为应用指定多个-Spring-配置文件" class="headerlink" title="为应用指定多个 Spring 配置文件"></a>为应用指定多个 Spring 配置文件</h3><p>在实际应用里，随着应用规模的增加，系统中 Bean 数量也大量增加，导致配置文件变得非常庞大、臃肿。为了避免这种情况的产生，提高配置文件的可读性与可维护性，可以将 Spring 配置文件分解成多个配置文件。</p>
<p>（1）平等关系的配置文件<br>将配置文件分解为地位平等的多个配置文件，并将所有配置文件的路径定义为一个 String 数组，将其作为容器初始化参数出现。 其将与可变参的容器构造器匹配。</p>
<p>（ 2）包含关系的配置文件<br>各配置文件中有一个总文件，总配置文件将各其它子文件通过&lt;import/&gt;引入。在 Java 代码中只需要使用总配置文件对容器进行初始化即可。</p>
<p>Spring 配置文件中也可使用通配符*。但，此时要求总配置文件不要和子配置文件命名格式相同，否则将出现循环递归包含。</p>
<h2 id="基于注解的-DI-底层使用AOP"><a href="#基于注解的-DI-底层使用AOP" class="headerlink" title="基于注解的 DI (底层使用AOP)"></a>基于注解的 DI (底层使用AOP)</h2><p>对于 DI 使用注解，将不再需要在 Spring 配置文件中声明 Bean 实例。</p>
<h3 id="定义-Bean-Component"><a href="#定义-Bean-Component" class="headerlink" title="定义 Bean@Component"></a>定义 Bean@Component</h3><p>需要在类上使用注解@Component，该注解的 value 属性用于指定该 bean 的 id 值。</p>
<p>（1） 实体类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// @Scope("prototype")   // 默认也是singleton</span></span><br><span class="line"><span class="meta">@Component</span>(<span class="string">"myStudent"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Value</span>(<span class="string">"张三"</span>)</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	<span class="meta">@Value</span>(<span class="string">"23"</span>)</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// @Resource(name="mySchool")   // byName方式的注解式注入</span></span><br><span class="line">	<span class="meta">@Resource</span>   <span class="comment">// byType方式的注解式注入</span></span><br><span class="line">	<span class="keyword">private</span> School school;   <span class="comment">// 对象属性，域属性</span></span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"执行setName()"</span>);</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"执行setAge()"</span>);</span><br><span class="line">		<span class="keyword">this</span>.age = age;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSchool</span><span class="params">(School school)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.school = school;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">"Student [name="</span> + name + <span class="string">", age="</span> + age + <span class="string">", school="</span> + school</span><br><span class="line">				+ <span class="string">"]"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@PostConstruct</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initAfter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"当前Bean初始化刚完毕"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@PreDestroy</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"当前Bean即将被销毁"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component(<span class="meta-string">"mySchool"</span>)</span>    <span class="comment">// 组件，表示当前类被Spring容器所管理</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">School</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Value(<span class="meta-string">"清华大学"</span>)</span></span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> void setName(String name) &#123;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> String toString() &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">"School [name="</span> + name + <span class="string">"]"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（2） Spring 配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">   <span class="comment">&lt;!-- 扫描指定包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.huang.di01"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 扫描com.huang这个包及其子包 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;context:component-scan base-package="com.huang"/&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 扫描com.huang这个包的子包 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;context:component-scan base-package="com.huang.*"/&gt; --&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：<br>要在文件头部加上约束</p>
</blockquote>
<p>与@Component注解功能相同，但意义不同的注解还有三个：<br>（1）@Repository：注解在Dao实现类上<br>（2）@Service：注解在Service实现类上<br>（3）@Controller：注解在SpringMVC的处理器上  </p>
<p>之所以创建这三个功能与@Component 等效的注解，是为了以后对其进行功能上的扩展，使它们不再等效。</p>
<h3 id="Bean-的作用域-Scope"><a href="#Bean-的作用域-Scope" class="headerlink" title="Bean 的作用域@Scope"></a>Bean 的作用域@Scope</h3><p>要在类上使用注解@Scope，其 value 属性用于指定作用域。默认为 singleton。</p>
<img src="/2019/08/06/Spring与IoC/spring26.jpg">


<h3 id="基本类型属性注入-Value"><a href="#基本类型属性注入-Value" class="headerlink" title="基本类型属性注入@Value"></a>基本类型属性注入@Value</h3><p>需要在属性上使用注解@Value，该注解的 value 属性用于指定要注入的值。</p>
<img src="/2019/08/06/Spring与IoC/spring27.jpg">


<h3 id="按类型注入域属性-Autowired"><a href="#按类型注入域属性-Autowired" class="headerlink" title="按类型注入域属性@Autowired"></a>按类型注入域属性@Autowired</h3><p>需要在域属性上使用注解@Autowired，该注解默认使用按类型自动装配 Bean 的方式。</p>
<img src="/2019/08/06/Spring与IoC/spring28.jpg">


<h3 id="按名称注入域属性-Autowired-与-Qualifier"><a href="#按名称注入域属性-Autowired-与-Qualifier" class="headerlink" title="按名称注入域属性@Autowired 与@Qualifier"></a>按名称注入域属性@Autowired 与@Qualifier</h3><p>需要在域属性上联合使用注解@Autowired 与@Qualifier。 @Qualifier 的 value 属性用于指定要匹配的 Bean 的 id 值。</p>
<img src="/2019/08/06/Spring与IoC/spring29.jpg">


<blockquote>
<p>注意：<br>使用@Value、@Autowired、@Autowired 与@Qualifier注解完成属性注入时，类中无需 setter。当然，若属性有 setter，则也可将其加到 setter 上。</p>
</blockquote>
<p>@Autowired 还有一个属性 required，默认值为 true，表示当匹配失败后，会终止程序运行。若将其值设置为 false，则匹配失败，将被忽略，未匹配的属性值为 null。</p>
<h3 id="域属性注解-Resource"><a href="#域属性注解-Resource" class="headerlink" title="域属性注解@Resource"></a>域属性注解@Resource</h3><p>@Resource 注解既可以按名称匹配 Bean，也可以按类型匹配 Bean。 使用该注解，要求 JDK 必须是 6 及以上版本。</p>
<img src="/2019/08/06/Spring与IoC/spring30.jpg">


<h3 id="Bean-的生命始末-PostConstruct-与-PreDestroy"><a href="#Bean-的生命始末-PostConstruct-与-PreDestroy" class="headerlink" title="Bean 的生命始末@PostConstruct 与@PreDestroy"></a>Bean 的生命始末@PostConstruct 与@PreDestroy</h3><p>在方法上使用@PostConstruct，与原来的 init-method 等效。在方法上使用@PreDestroy，与 destroy-method 等效。</p>
<img src="/2019/08/06/Spring与IoC/spring31.jpg">


<h3 id="使用-JavaConfig-进行配置"><a href="#使用-JavaConfig-进行配置" class="headerlink" title="使用 JavaConfig 进行配置"></a>使用 JavaConfig 进行配置</h3><p>JavaConfig，是在 Spring 3.0 开始从一个独立的项目并入到 Spring 中的。 JavaConfig 可以看成一个用于完成 Bean 装配的 Spring 配置文件，即 Spring 容器， 只不过该容器不是 XML 文件，而是由程序员使用 Java 自己编写的 Java 类(表示当前类充当 Spring 容器，即所有的 Bean 将由这个类来创建)。</p>
<p>（1） byType 方式的域属性自动注入</p>
<img src="/2019/08/06/Spring与IoC/spring32.jpg">


<p>（2） byName 方式的域属性自动注入</p>
<img src="/2019/08/06/Spring与IoC/spring33.jpg">


<h3 id="使用-Spring-的-JUnit4-测试-Spring"><a href="#使用-Spring-的-JUnit4-测试-Spring" class="headerlink" title="使用 Spring 的 JUnit4 测试 Spring"></a>使用 Spring 的 JUnit4 测试 Spring</h3><p>使用 Spring 的 JUnit4 对 Spring 代码进行测试，将不再需要在程序的代码中直接写出创建 Spring 容器，以及从 Spring 容器中通过 getBean()获取对象。</p>
<p>（1） 定义 Spring 配置文件</p>
<img src="/2019/08/06/Spring与IoC/spring34.jpg">

<p>（2）定义测试类</p>
<img src="/2019/08/06/Spring与IoC/spring35.jpg">


<h3 id="注解与-XML-共同使用"><a href="#注解与-XML-共同使用" class="headerlink" title="注解与 XML 共同使用"></a>注解与 XML 共同使用</h3><p>注解的好处是，配置方便，直观。但其弊端也显而易见：以硬编码的方式写入到了 Java 代码中，其修改是需要重新编译代码的。</p>
<p>XML 配置方式的最大好处是，对其所做修改，无需编译代码，只需重启服务器即可将新的配置加载。</p>
<p>若注解与 XML 同用， XML 的优先级要高于注解。这样做的好处是，需要对某个 Bean 做修改，只需修改配置文件即可。当然，此时， Bean 类要有 setter 或构造器。</p>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>IoC</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis注解式开发</title>
    <url>/2019/08/04/MyBatis%E6%B3%A8%E8%A7%A3%E5%BC%8F%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="注解的基础知识"><a href="#注解的基础知识" class="headerlink" title="注解的基础知识"></a>注解的基础知识</h2><p>MyBatis 的注解，主要是用于替换映射文件。而映射文件中无非存放着增、删、改、查的 SQL 映射标签。所以， MyBatis 注解，就是要替换映射文件中的 SQL 标签。</p>
<p>MyBatis 官方文档中指出，若要真正想发挥 MyBatis 功能，还是要用映射文件。即 MyBatis 官方并不建议通过注解方式来使用 MyBatis。</p>
<a id="more"></a>


<h3 id="注解的基础语法"><a href="#注解的基础语法" class="headerlink" title="注解的基础语法"></a>注解的基础语法</h3><ol>
<li>注解后是没有分号的。  </li>
<li>注解首字母是大写的，因为注解与类、接口是同一级别的。一个注解，后台对应着。一个@interface 类。</li>
<li>在同一语法单元上，同一注解只能使用一次。</li>
<li>在注解与语法单元之间可以隔若干空行、注释等非代码内容。</li>
</ol>
<h3 id="注解的注解"><a href="#注解的注解" class="headerlink" title="注解的注解"></a>注解的注解</h3><img src="/2019/08/04/MyBatis注解式开发/ann01.jpg">


<p>打开@Deprecated 源码，看到其定义上还有三个注解： @Documented、 @Retention、 @Target。这三个注解的意义是：</p>
<ul>
<li>@Target： 用于指定该注解可以标注的语法类型。 CONSTRUCTOR（构造器）、LOCAL_VARIABLE（局部变量）、 METHOD（方法）、 FIELD（属性）、 PACKAGE（包）、 PARAMETER（参数）、 TYPE（类型）。</li>
</ul>
<blockquote>
<p>注意：<br>对于 TYPE 常量，其意义有两个：一是指该注解可以用在类、接口、枚举等类上；二是指该注解可以作为其它注解的属性值，例如@Result、 @InterceptorRef。</p>
</blockquote>
<ul>
<li>@Documented： 用于指定该注解定义时的注释信息能否显示在 javaAPI 说明文档上。 没有添加的话，使用 javadoc 生成 API 文档时就不会该注解的信息添加到文档。  </li>
<li>@RetentionPolicy： 这是一个 enum 类型， 共有三个值：SOURCE,CLASS 和 RUNTIME。  </li>
<li>SOURCE： 代表这个 Annotation 类型的信息只会保留在程序源码里，源码如果经过了编<br>译之后， Annotation 的数据就会消失， 并不会保留在编译好的.class 文件中。</li>
<li>ClASS： 代表这个 Annotation 类型的信息除了保留在程序源码里外， 同时也会保留在编<br>译好的.class 文件里。但在执行时，并不会把这一些信息加载到虚拟机(JVM)中去。这是<br>Retention 的默认值。</li>
<li>RUNTIME： 表示在源码、编译好的.class 文件中保留信息， 同时在执行时还会把这些信息加载到 JVM 中。</li>
</ul>
<blockquote>
<p>举例：<br>@Override 中的 Retention 值为 SOURCE， 编译成功了就不要这一些检查的信息。相反@Deprecated 中 Retention 的值为 RUNTIME， 表示除了在编译时会警告我们使用了哪个被 Deprecated 的方法， 在执行的时候也可以查出该方法是否被 Deprecated。</p>
</blockquote>
<h3 id="注解的属性"><a href="#注解的属性" class="headerlink" title="注解的属性"></a>注解的属性</h3><ol>
<li><p>数组问题<br>该属性在源码定义时被声明为数组，但在具体使用时却只要赋予一个值，此时无需将该值再定义为一个数组后赋给该属性。直接将该值赋给该属性即可。例如，对于声明为字符串数组 String[]的 value 属性，可以将字符串 String 直接赋给该 value。</p>
</li>
<li><p>默认值问题<br>若某属性在注解定义时声明了其默认值，则在注解使用时，可以不为其指定属性值。注解会自动使用其默认值。</p>
</li>
<li><p>value 属性问题<br>若注解在使用时只需使用其 value 属性，其它属性要么有默认值，要么该注解只声明了一个 value 属性，此时，在注解使用时 value 属性名称可省略，而直接在注解的括号中写出该 value 属性的值。</p>
</li>
</ol>
<p>在注解里面，对于数组，如果数组只有一个元素，{}可以省略不写；注解里面只用到一个属性，value可以省略不写</p>
<ol start="4">
<li>无属性问题<br>有些注解在定义时，是没有属性的，如@Deprecated、 @Overide 都是没有属性声明的，那么在使用时只需给出注解名称即可。</li>
</ol>
<h2 id="MyBatis注解"><a href="#MyBatis注解" class="headerlink" title="MyBatis注解"></a>MyBatis注解</h2><h3 id="Insert"><a href="#Insert" class="headerlink" title="@Insert"></a>@Insert</h3><p>其 value 属性用于指定要执行的 insert 语句。</p>
<h3 id="SelectKey"><a href="#SelectKey" class="headerlink" title="@SelectKey"></a>@SelectKey</h3><p>用于替换 XML 中的&lt;selectKey/&gt;标签，用于返回新插入数据的 id 值</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">@<span class="constructor">SelectKey(<span class="params">statement</span>=<span class="string">"select @@identity"</span>, <span class="params">resultType</span>=<span class="params">int</span>.<span class="params">class</span>, <span class="params">keyProperty</span>=<span class="string">"id"</span>, <span class="params">before</span>=<span class="params">false</span>)</span></span><br></pre></td></tr></table></figure>

<ul>
<li>statement：获取新插入记录主键值的 SQL 语句  </li>
<li>keyProperty：获取的该主键值返回后初始化对象的哪个属性  </li>
<li>resultType：返回值类型  </li>
<li>before：指定主键的生成相对于 insert 语句的执行先后顺序，该属性不能省略</li>
</ul>
<h3 id="Delete"><a href="#Delete" class="headerlink" title="@Delete"></a>@Delete</h3><p>其 value 属性用于指定要执行的 delete 语句。</p>
<h3 id="Update"><a href="#Update" class="headerlink" title="@Update"></a>@Update</h3><p>其 value 属性用于指定要执行的 update 语句。</p>
<h3 id="Select"><a href="#Select" class="headerlink" title="@Select"></a>@Select</h3><p>其 value 属性用于指定要执行的 select 语句。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol>
<li>由于 MyBatis 注解替换的是映射文件，所以可以删除映射文件。</li>
<li>由于没有了映射文件，所以主配置文件中不能使用&lt;mapper/&gt;注册 mapper 的位置了。需要使用&lt;package/&gt;标签。</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 指定映射mapper --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.huang.dao"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>框架</category>
      </categories>
      <tags>
        <tag>MyBatis</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis查询缓存</title>
    <url>/2019/08/03/MyBatis%E6%9F%A5%E8%AF%A2%E7%BC%93%E5%AD%98/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>查询缓存的使用，主要是为了提高查询访问速度。将用户对同一数据的重复查询过程简化，不再每次均从数据库查询获取结果数据，从而提高访问速度。</p>
<a id="more"></a>

<p>MyBatis 的查询缓存机制，根据缓存区的作用域（生命周期） 可划分为两种： 一级查询缓存与二级查询缓存。</p>
<h2 id="一级查询缓存"><a href="#一级查询缓存" class="headerlink" title="一级查询缓存"></a>一级查询缓存</h2><p>MyBatis 一级查询缓存是基于 org.apache.ibatis.cache.impl.PerpetualCache 类的 HashMap本地缓存，其作用域是 SqlSession。在同一个 SqlSession 中两次执行相同的 sql 查询语句，第一次执行完毕后，会将查询结果写入到缓存中，第二次会从缓存中直接获取数据，而不再到数据库中进行查询，从而提高查询效率。</p>
<p>当一个 SqlSession 结束后，该 SqlSession 中的一级查询缓存也就不存在了。 myBatis 默认一级查询缓存是开启状态，且不能关闭。</p>
<h3 id="一级查询缓存的存在性证明"><a href="#一级查询缓存的存在性证明" class="headerlink" title="一级查询缓存的存在性证明"></a>一级查询缓存的存在性证明</h3><p>（1） 测试类</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 证明一级缓存是存在的</span></span><br><span class="line">@Test</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">void</span> test01() &#123;</span><br><span class="line">	Student student = dao.selectStudentById(<span class="number">4</span>);</span><br><span class="line">	System.<span class="keyword">out</span>.println(student);</span><br><span class="line">	</span><br><span class="line">	Student student2 = dao.selectStudentById(<span class="number">4</span>);</span><br><span class="line">	System.<span class="keyword">out</span>.println(student2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（2） 查看控制台</p>
<img src="/2019/08/03/MyBatis查询缓存/cache01.jpg">


<blockquote>
<p>总结：  </p>
<ol>
<li>缓存的底层实现是一个Map，Map的value是查询结果  </li>
<li>Map的key，即查询依据，使用的ORM构架不同，查询依据是不同的。  </li>
<li>MyBatis的查询依据是：Sql的id + SQL语句  </li>
<li>Hibernate的查询依据是：查询结果对象的id</li>
</ol>
</blockquote>
<h3 id="从缓存读取数据的依据是-Sql-的-id"><a href="#从缓存读取数据的依据是-Sql-的-id" class="headerlink" title="从缓存读取数据的依据是 Sql 的 id"></a>从缓存读取数据的依据是 Sql 的 id</h3><p>一级缓存缓存的是相同 Sql 映射 id 的查询结果，而非相同 Sql 语句的查询结果。 因为 myBatis 内部对于查询缓存，无论是一级查询缓存还是二级查询缓存， 其底层均使用一个 HashMap 实现： key 为 Sql 的 id 相关内容， value 为从数据库中查询出的结果。</p>
<p>（1） 映射文件</p>
<p>这两个 SQL 映射除了映射 id (selectStudentById、selectStudentById2)不同，其它均相同，即查询结果肯定是相同的。</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">&lt;select <span class="built_in">id</span>=<span class="string">"selectStudentById"</span> resultType=<span class="string">"Student"</span>&gt;</span><br><span class="line">	select <span class="built_in">id</span>,<span class="built_in">name</span>,age,score </span><br><span class="line">	<span class="keyword">from</span> student </span><br><span class="line">	<span class="keyword">where</span> <span class="built_in">id</span>=<span class="comment">#&#123;xxx&#125;</span></span><br><span class="line">&lt;/select&gt;</span><br><span class="line"></span><br><span class="line">&lt;select <span class="built_in">id</span>=<span class="string">"selectStudentById2"</span> resultType=<span class="string">"Student"</span>&gt;</span><br><span class="line">	select <span class="built_in">id</span>,<span class="built_in">name</span>,age,score </span><br><span class="line">	<span class="keyword">from</span> student </span><br><span class="line">	<span class="keyword">where</span> <span class="built_in">id</span>=<span class="comment">#&#123;xxx&#125;</span></span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure>

<p>（2） Dao 接口</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">public<span class="built_in"> interface </span>IStudentDao &#123;</span><br><span class="line">	</span><br><span class="line">	Student selectStudentById(int id);</span><br><span class="line">	Student selectStudentById2(int id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（3） 测试类</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">void</span> test02() &#123;</span><br><span class="line">	Student student = dao.selectStudentById(<span class="number">1</span>);</span><br><span class="line">	System.<span class="keyword">out</span>.println(student);</span><br><span class="line">	</span><br><span class="line">	Student student2 = dao.selectStudentById2(<span class="number">1</span>);</span><br><span class="line">	System.<span class="keyword">out</span>.println(student2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（4） 查看控制台</p>
<img src="/2019/08/03/MyBatis查询缓存/cache02.jpg">


<h3 id="增删改对一级查询缓存的影响"><a href="#增删改对一级查询缓存的影响" class="headerlink" title="增删改对一级查询缓存的影响"></a>增删改对一级查询缓存的影响</h3><p>增、删、改操作，无论是否进行提交 sqlSession.commit()，均会清空一级查询缓存，使查询再次从 DB 中 select。</p>
<p>（1） 修改测试类</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">	<span class="comment">// 证明增删改操作的执行，均会清空一级缓存</span></span><br><span class="line">	@Test</span><br><span class="line">	public void test03<span class="literal">()</span> &#123;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//第一次查询</span></span><br><span class="line">		Student student = dao.select<span class="constructor">StudentById(2)</span>;</span><br><span class="line">		<span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(student);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 增删改操作都会清空一级缓存，无论是否提交</span></span><br><span class="line">		dao.insert<span class="constructor">Student(<span class="params">new</span> Student(<span class="string">"赵六"</span>, 26, 96.5)</span>);</span><br><span class="line"><span class="comment">//		sqlSession.commit();</span></span><br><span class="line">		<span class="comment">//第二次查询</span></span><br><span class="line">		Student student2 = dao.select<span class="constructor">StudentById(2)</span>;</span><br><span class="line">		<span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(student2);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>（2） 查看控制台</p>
<img src="/2019/08/03/MyBatis查询缓存/cache03.jpg">


<h2 id="内置二级查询缓存"><a href="#内置二级查询缓存" class="headerlink" title="内置二级查询缓存"></a>内置二级查询缓存</h2><p>myBatis 查询缓存的作用域是根据映射文件 mapper 的 namespace 划分的，相同 namespace 的 mapper 查询数据存放在同一个缓存区域。 不同 namespace 下的数据互不干扰。无论是一级缓存还是二级缓存，都是按照 namespace 进行分别存放的。但一、二级缓存的不同之处在于， SqlSession 一旦关闭，则 SqlSession 中的数据将不存在，即一级缓存就不覆存在。而二级缓存的生命周期会与整个应用同步，与 SqlSession 是否关闭无关。</p>
<p>使用二级缓存的目的，不是共享数据，因为 MyBatis 从缓存中读取数据的依据是 SQL 的 id，而非查询出的对象。所以， 二级缓存中的数据不是为了在多个查询之间共享（所有查询中只要查询结果中存在该对象的，就直接从缓存中读取，这是对数据的共享， Hibernate 中的缓存就是为了共享，但 MyBaits 的不是），而是为了延长该查询结果的保存时间，提高系统性能。</p>
<p>myBatis 内置的二级缓存为 org.apache.ibatis.cache.impl.PerpetualCache。</p>
<h3 id="二级缓存用法"><a href="#二级缓存用法" class="headerlink" title="二级缓存用法"></a>二级缓存用法</h3><p>（1）实体序列化</p>
<p>要求查询结果所涉及到的实体类要实现 java.io.Serializable 接口。若该实体类存在父类，或其具有域属性，则父类与域属性类也要实现序列化接口。</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">Student</span> <span class="symbol">implements</span> <span class="symbol">Serializable</span>&#123;</span><br><span class="line">	<span class="keyword">private</span> Integer id;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	<span class="keyword">private</span> <span class="built_in">int</span> age;</span><br><span class="line">	<span class="keyword">private</span> <span class="built_in">double</span> score;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（2）mapper 映射中添加&lt;cache/&gt;标签</p>
<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml">   <span class="comment">&lt;!-- 二级缓存的配置 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">cache</span> <span class="attr">eviction</span>=<span class="string">"FIFO"</span> <span class="attr">flushInterval</span>=<span class="string">"10800000"</span></span></span></span><br><span class="line"><span class="xml">    readOnly="true" size="512"/&gt;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insertStudent"</span> <span class="attr">flushCache</span>=<span class="string">"false"</span>&gt;</span></span></span><br><span class="line"><span class="xml">	insert into student(name,age,score) values(#</span><span class="template-variable">&#123;name&#125;</span><span class="xml">, #</span><span class="template-variable">&#123;age&#125;</span><span class="xml">, #</span><span class="template-variable">&#123;score&#125;</span><span class="xml">)</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- useCache="false"对当前Sql的二级缓存的局部关闭 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectStudentById"</span> <span class="attr">useCache</span>=<span class="string">"false"</span> <span class="attr">resultType</span>=<span class="string">"Student"</span>&gt;</span></span></span><br><span class="line"><span class="xml">	select id,name,age,score from student where id=#</span><span class="template-variable">&#123;xxx&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectStudentById2"</span> <span class="attr">resultType</span>=<span class="string">"Student"</span>&gt;</span></span></span><br><span class="line"><span class="xml">	select id,name,age,score from student where id=#</span><span class="template-variable">&#123;xxx&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>（3）二级缓存的配置</p>
<p>为&lt;cache/&gt;标签添加一些相关属性设置，可以对二级缓存的运行性能进行控制。若不指定设置，则均保持默认值。</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&lt;cache <span class="attribute">eviction</span>=<span class="string">"FIFO"</span> <span class="attribute">flushInterval</span>=<span class="string">"10800000"</span></span><br><span class="line">    <span class="attribute">readOnly</span>=<span class="string">"true"</span> <span class="attribute">size</span>=<span class="string">"512"</span>/&gt;</span><br></pre></td></tr></table></figure>

<p>二级缓存的配置说明：</p>
<ul>
<li>eviction：逐出策略。当二级缓存中的对象达到最大值时，就需要通过逐出策略将缓存中的对象移出缓存。默认为 LRU。常用的策略有：<ul>
<li>FIFO： First In First Out， 先进先出</li>
<li>LRU： Least Recently Used，未被使用时间最长的</li>
</ul>
</li>
<li>flushInterval：刷新缓存的时间间隔，单位毫秒。这里的刷新缓存即清空缓存。一般不指定，即当执行增删改时刷新缓存。</li>
<li>readOnly：设置缓存中数据是否只读。 只读的缓存会给所有调用者返回缓存对象的相同实例，因此这些对象不能被修改，这提供了很重要的性能优势。但读写的缓存会返回缓<br>存对象的拷贝。这会慢一些，但是安全，因此默认是 false。</li>
<li>size：二级缓存中可以存放的最多对象个数。默认为 1024 个。</li>
</ul>
<h3 id="二级缓存的关闭"><a href="#二级缓存的关闭" class="headerlink" title="二级缓存的关闭"></a>二级缓存的关闭</h3><p>二级缓存默认为开启状态。 若要将其关闭，则需要进行相关设置。根据关闭的范围大小，可以分为全局关闭与局部关闭。</p>
<p>（1） 全局关闭</p>
<p>所谓全局关闭是指，整个应用的二级缓存全部关闭，所有查询均不使用二级缓存。全局开关设置在主配置文件的全局设置&lt;settings/&gt;中，该属性为 cacheEnabled，设置为 false，则关闭；设置为 true，则开启， 默认值为 true。 即二级缓存默认是开启的。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 关闭二级缓存 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"cacheEnabled"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>（2） 局部关闭</p>
<p>所谓局部关闭是指，整个应用的二级缓存是开启的，但只是针对于某&lt;select/&gt;查询，不使用二级缓存。此时可以单独只关闭该&lt;select/&gt;标签的二级缓存。</p>
<p>在该要关闭二级缓存的&lt;select/&gt;标签中，将其属性 useCache 设置为 false，即可关闭该查询的二级缓存。 该属性默认为 true，即每个&lt;select/&gt;查询的二级缓存默认是开启的。</p>
<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="comment">&lt;!-- useCache="false"对当前Sql的二级缓存的局部关闭 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectStudentById"</span> <span class="attr">useCache</span>=<span class="string">"false"</span> <span class="attr">resultType</span>=<span class="string">"Student"</span>&gt;</span></span></span><br><span class="line"><span class="xml">	select id,name,age,score from student where id=#</span><span class="template-variable">&#123;xxx&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h3 id="二级缓存的使用原则"><a href="#二级缓存的使用原则" class="headerlink" title="二级缓存的使用原则"></a>二级缓存的使用原则</h3><h4 id="1-只能在一个命名空间下使用二级缓存"><a href="#1-只能在一个命名空间下使用二级缓存" class="headerlink" title="1. 只能在一个命名空间下使用二级缓存"></a>1. 只能在一个命名空间下使用二级缓存</h4><p>由于二级缓存中的数据是基于 namespace 的，即不同 namespace 中的数据互不干扰。在多个 namespace 中若均存在对同一个表的操作，那么这多个 namespace 中的数据可能就会出现不一致现象。</p>
<h4 id="2-在单表上使用二级缓存"><a href="#2-在单表上使用二级缓存" class="headerlink" title="2. 在单表上使用二级缓存"></a>2. 在单表上使用二级缓存</h4><p>如果一个表与其它表有关联关系，那么就非常有可能存在多个 namespace 对同一数据的操作。而不同 namespace 中的数据互不干扰，所以有可能出现这多个 namespace 中的数据不一致现象。</p>
<h4 id="3-查询多于修改时使用二级缓存"><a href="#3-查询多于修改时使用二级缓存" class="headerlink" title="3. 查询多于修改时使用二级缓存"></a>3. 查询多于修改时使用二级缓存</h4><p>在查询操作远远多于增删改操作的情况下可以使用二级缓存。因为任何增删改操作都将刷新二级缓存，对二级缓存的频繁刷新将降低系统性能。</p>
<h2 id="ehcache二级查询缓存"><a href="#ehcache二级查询缓存" class="headerlink" title="ehcache二级查询缓存"></a>ehcache二级查询缓存</h2><p>mybatis 的特长是 SQL 操作，缓存数据管理不是其特长，为了提高缓存的性能， myBatis 允许使用第三方缓存产品。 ehCache 就是其中的一种。</p>
<p>项目： cache-secondLevel-ehcache。</p>
<blockquote>
<p>注意：<br>使用 ehcache 二级缓存，实体类无需实现序列化接口。</p>
</blockquote>
<h3 id="ehcache二级查询缓存配置说明"><a href="#ehcache二级查询缓存配置说明" class="headerlink" title="ehcache二级查询缓存配置说明"></a>ehcache二级查询缓存配置说明</h3><h4 id="lt-diskStore-gt-标签"><a href="#lt-diskStore-gt-标签" class="headerlink" title="&lt;diskStore/&gt;标签"></a>&lt;diskStore/&gt;标签</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 指定一个文件目录，当内存空间不够，需要将二级缓存中数据写到硬盘上时，会写到这个指定目录中。其值一般为 java.io.tmpdir， 表示当前系统的默认文件临时目录。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">diskStore</span> <span class="attr">path</span>=<span class="string">"java.io.tmpdir"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="lt-defaultCache-gt-标签"><a href="#lt-defaultCache-gt-标签" class="headerlink" title="&lt;defaultCache/&gt;标签"></a>&lt;defaultCache/&gt;标签</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">defaultCache</span></span></span><br><span class="line"><span class="tag">        <span class="attr">maxElementsInMemory</span>=<span class="string">"10000"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">eternal</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">timeToIdleSeconds</span>=<span class="string">"120"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">timeToLiveSeconds</span>=<span class="string">"120"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">maxElementsOnDisk</span>=<span class="string">"10000000"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">diskExpiryThreadIntervalSeconds</span>=<span class="string">"120"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">memoryStoreEvictionPolicy</span>=<span class="string">"LRU"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">persistence</span> <span class="attr">strategy</span>=<span class="string">"localTempSwap"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">defaultCache</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>设定缓存的默认属性数据：</p>
<ul>
<li><p>maxElementsInMemory： 指定该内存缓存区可以存放缓存对象的最多个数。  </p>
</li>
<li><p>eternal： 设定缓存对象是否不会过期。若设为 true，表示对象永远不会过期，此时会忽略 timeToIdleSeconds 与 timeToLiveSeconds 属性。默认值为 false。  </p>
</li>
<li><p>timeToIdleSeconds： 设定允许对象处于空闲状态的最长时间，以秒为单位。当对象自从最近一次被访问后，若处于空闲状态的时间超过了 timeToIdleSeconds 设定的值，这个对象就会过期。当对象过期， EHCache 就会将它从缓存中清除。 设置值为 0，则对象可以无限期地处于空闲状态。  </p>
</li>
<li><p>timeToLiveSeconds： 设定对象允许存在于缓存中的最长时间，以秒为单位。当对象自从被存放到缓存后，若处于缓存中的时间超过了 timeToLiveSeconds 设定的值，这个对象就会过期。当对象过期， EHCache 就会将它从缓存中清除。 设置值为 0，则对象可以无限期地存在于缓存中。 注意，只有 timeToLiveSeconds≥ timeToIdleSeconds，才有意义。  </p>
</li>
<li><p>overflowToDisk： 设定为 true，表示当缓存对象达到了 maxElementsInMemory 界限，会将溢出的对象写到<diskstore>元素指定的硬盘目录缓存中。    </diskstore></p>
</li>
<li><p>maxElementsOnDisk： 指定硬盘缓存区可以存放缓存对象的最多个数。  </p>
</li>
<li><p>diskPersistent： 指定当程序结束时，硬盘缓存区中的缓存对象是否做持久化。  </p>
</li>
<li><p>diskExpiryThreadIntervalSeconds： 指定硬盘中缓存对象的失效时间间隔。  </p>
</li>
<li><p>memoryStoreEvictionPolicy： 如果内存缓存区超过限制， 选择移向硬盘缓存区中的对象时使用的策略。 支持三种策略：  </p>
<ol>
<li>FIFO： First In First Out， 先进先出</li>
<li>LFU： Less Frequently Used， 最少使用</li>
<li>LRU： Least Recently Used， 最近最少使用</li>
</ol>
</li>
</ul>
<h3 id="启用-ehcache-缓存机制"><a href="#启用-ehcache-缓存机制" class="headerlink" title="启用 ehcache 缓存机制"></a>启用 ehcache 缓存机制</h3><p>在映射文件的 mapper 中的&lt;cache/&gt;中通过 type 指定缓存机制为 Ehcache 缓存。默认为 myBatis 内置的二级缓存 org.apache.ibatis.cache.impl.PerpetualCache。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">cache</span> <span class="attr">type</span>=<span class="string">"org.mybatis.caches.ehcache.EhcacheCache"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"timeToIdleSeconds"</span> <span class="attr">value</span>=<span class="string">"60"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">cache</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：<br>&lt;cache&gt;属性值的优先级高于 ehcache.xml 中的属性值。</p>
</blockquote>
]]></content>
      <categories>
        <category>框架</category>
      </categories>
      <tags>
        <tag>MyBatis</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis关联关系查询</title>
    <url>/2019/08/03/MyBatis%E5%85%B3%E8%81%94%E5%85%B3%E7%B3%BB%E6%9F%A5%E8%AF%A2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="关联查询"><a href="#关联查询" class="headerlink" title="关联查询"></a>关联查询</h2><p>当查询内容涉及到具有关联关系的多个表时， 就需要使用关联查询。根据表与表间的关联关系的不同，关联查询分为四种：</p>
<p>（1）一对一关联查询<br>（2）一对多关联查询<br>（3）多对一关联查询<br>（4）多对多关联查询</p>
<p>由于日常工作中最常见的关联关系是一对多、多对一与多对多，所以这里就不专门只讲解一对一关联查询了，其解决方案与多对一解决方案是相同的。</p>
<a id="more"></a>

<h3 id="一对多关联查询"><a href="#一对多关联查询" class="headerlink" title="一对多关联查询"></a>一对多关联查询</h3><p>项目： one2many</p>
<p>这里的一对多关联查询是指，在查询一方对象的时候，同时将其所关联的多方对象也都查询出来。</p>
<p>下面以国家 Country 与部长 Minister 间的一对多关系进行演示。</p>
<p>（1） 定义实体</p>
<p>在定义实体时， 若定义的是双向关联，即双方的属性中均有对方对象作为域属性出现，那么它们在定义各自的 toString()方法时需要注意，只让某一方可以输出另一方即可，不要让双方的 toString()方法均可输出对方。这样会形成递归调用，程序出错。</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">Country</span> &#123;</span><br><span class="line">	<span class="keyword">private</span> Integer cid;</span><br><span class="line">	<span class="keyword">private</span> String cname;</span><br><span class="line">	<span class="comment">//关联属性</span></span><br><span class="line">	<span class="keyword">private</span> Set&lt;Minister&gt; ministers;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">Minister</span> &#123;</span><br><span class="line">	<span class="keyword">private</span> Integer mid;</span><br><span class="line">	<span class="keyword">private</span> String mname;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（2） 定义数据库表</p>
<img src="/2019/08/03/MyBatis关联关系查询/ass01.jpg">

<img src="/2019/08/03/MyBatis关联关系查询/ass02.jpg">


<p>（3） 定义 Dao 层接口</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">public<span class="built_in"> interface </span>ICountryDao &#123;</span><br><span class="line">	Country selectCountryById(int cid);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（4） 定义工具类</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyBatisUtils</span> &#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> SqlSessionFactory sqlSessionFactory;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title">getSqlSession</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			InputStream <span class="keyword">is</span> = Resources.getResourceAsStream(<span class="string">"mybatis.xml"</span>);</span><br><span class="line">			<span class="keyword">if</span> (sqlSessionFactory == <span class="literal">null</span>) &#123;</span><br><span class="line">				sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(<span class="keyword">is</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> sqlSessionFactory.openSession();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（5） 定义映射文件</p>
<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span></span><br><span class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE mapper</span></span></span><br><span class="line"><span class="xml">PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line"><span class="xml">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.huang.dao.ICountryDao"</span>&gt;</span></span></span><br><span class="line"><span class="xml">	</span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"Country"</span> <span class="attr">id</span>=<span class="string">"countryMapper"</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"cid"</span> <span class="attr">property</span>=<span class="string">"cid"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"cname"</span> <span class="attr">property</span>=<span class="string">"cname"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">		</span></span><br><span class="line"><span class="xml">		<span class="comment">&lt;!-- 关联属性的映射关系 --&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"ministers"</span> <span class="attr">ofType</span>=<span class="string">"Minister"</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"mid"</span> <span class="attr">property</span>=<span class="string">"mid"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"mname"</span> <span class="attr">property</span>=<span class="string">"mname"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span></span><br><span class="line"><span class="xml">	</span></span><br><span class="line"><span class="xml">	<span class="comment">&lt;!-- 多表连接查询 --&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectCountryById"</span> <span class="attr">resultMap</span>=<span class="string">"countryMapper"</span>&gt;</span></span></span><br><span class="line"><span class="xml">		select cid,cname,mid,mname</span></span><br><span class="line"><span class="xml">		from country,minister</span></span><br><span class="line"><span class="xml">		where countryId=cid and cid=#</span><span class="template-variable">&#123;xxx&#125;</span><span class="xml"> </span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br><span class="line"><span class="xml">	</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>（6） 定义主配置文件</p>
<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span></span><br><span class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE configuration</span></span></span><br><span class="line"><span class="xml">PUBLIC "-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span class="line"><span class="xml">"http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span></span><br><span class="line"><span class="xml">	<span class="comment">&lt;!-- 注册DB连接四要素属性文件 --&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">"jdbc.properties"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">	</span></span><br><span class="line"><span class="xml">	<span class="comment">&lt;!-- 定义类型别名 --&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="comment">&lt;!-- 将指定包中所有类的简单类名当作其别名 --&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.huang.beans"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">	<span class="comment">&lt;!-- 配置运行环境 --&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"testEM"</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"testEM"</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span></span><br><span class="line"><span class="xml">				<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;jdbc.driver&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">				<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;jdbc.url&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">				<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;jdbc.user&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">				<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;jdbc.password&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">	<span class="comment">&lt;!-- 注册映射文件 --&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"com/huang/dao/mapper.xml"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>（7） 定义测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> ICountryDao dao;</span><br><span class="line">	<span class="keyword">private</span> SqlSession sqlSession;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Before</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		sqlSession = MyBatisUtils.getSqlSession();</span><br><span class="line">		dao = sqlSession.getMapper(ICountryDao.class);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@After</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(sqlSession != <span class="keyword">null</span>) &#123;</span><br><span class="line">			sqlSession.close();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		Country country = dao.selectCountryById(<span class="number">2</span>);</span><br><span class="line">		System.out.println(country);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（8） 运行结果</p>
<img src="/2019/08/03/MyBatis关联关系查询/ass03.jpg">


<p>在映射文件中使用&lt;collection/&gt;标签体现出两个实体对象间的关联关系。 其两个属性的意义为：</p>
<ul>
<li>property： 指定关联属性， 即 Country 类中的集合属性</li>
<li>ofType：集合属性的泛型类型</li>
</ul>
<h4 id="多表单独查询方式"><a href="#多表单独查询方式" class="headerlink" title="多表单独查询方式"></a>多表单独查询方式</h4><p>多表连接查询方式是将多张表进行连接，连为一张表后进行查询。其查询的本质是一张表。</p>
<img src="/2019/08/03/MyBatis关联关系查询/ass05.jpg">


<p>关联属性&lt;collection/&gt;的数据来自于另一个查询&lt;selectMinisterByCountry/&gt;。而该查询&lt;selectMinisterByCountry/&gt;的动态参数 countryId=#{ooo}的值来自于查询&lt;selectCountryById/&gt;的查询结果字段 cid。</p>
<h3 id="多对一关联查询"><a href="#多对一关联查询" class="headerlink" title="多对一关联查询"></a>多对一关联查询</h3><p>项目： many2one(基于one2many)</p>
<p>这里的多对一关联查询是指，在查询多方对象的时候，同时将其所关联的一方对象也查询出来。</p>
<p>由于在查询多方对象时也是一个一个查询，所以多对一关联查询，其实就是一对一关联查询。即一对一关联查询的实现方式与多对一的实现方式是相同的。</p>
<p>下面以部长 Minister 与国家 Country 间的多对一关系进行演示。</p>
<h4 id="1-多表连接查询方式"><a href="#1-多表连接查询方式" class="headerlink" title="1. 多表连接查询方式"></a>1. 多表连接查询方式</h4><p>（1） 修改实体</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">Country</span> &#123;</span><br><span class="line">	<span class="keyword">private</span> Integer cid;</span><br><span class="line">	<span class="keyword">private</span> String cname;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">Minister</span> &#123;</span><br><span class="line">	<span class="keyword">private</span> Integer mid;</span><br><span class="line">	<span class="keyword">private</span> String mname;</span><br><span class="line"><span class="comment">//	关联属性</span></span><br><span class="line">	<span class="keyword">private</span> Country country;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（2） 修改数据库</p>
<img src="/2019/08/03/MyBatis关联关系查询/ass06.jpg">


<p>（3） 修改 Dao 层接口</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">public<span class="built_in"> interface </span>IMinisterDao &#123;</span><br><span class="line">	Minister selectMinisterById(int mid);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（4） 修改映射文件</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">&lt;resultMap type=<span class="string">"Minister"</span> <span class="built_in">id</span>=<span class="string">"ministerMapper"</span>&gt;</span><br><span class="line">	&lt;<span class="built_in">id</span> column=<span class="string">"mid"</span> <span class="keyword">property</span>=<span class="string">"mid"</span>/&gt;</span><br><span class="line">	&lt;<span class="literal">result</span> column=<span class="string">"mname"</span> <span class="keyword">property</span>=<span class="string">"mname"</span>/&gt;</span><br><span class="line">	&lt;association <span class="keyword">property</span>=<span class="string">"country"</span> javaType=<span class="string">"Country"</span>&gt;</span><br><span class="line">		&lt;<span class="built_in">id</span> column=<span class="string">"cid"</span> <span class="keyword">property</span>=<span class="string">"cid"</span>/&gt;</span><br><span class="line">		&lt;<span class="literal">result</span> column=<span class="string">"cname"</span> <span class="keyword">property</span>=<span class="string">"cname"</span>/&gt;</span><br><span class="line">	&lt;/association&gt;</span><br><span class="line">&lt;/resultMap&gt;</span><br><span class="line"></span><br><span class="line">&lt;select <span class="built_in">id</span>=<span class="string">"selectMinisterById"</span> resultMap=<span class="string">"ministerMapper"</span>&gt;</span><br><span class="line">	select mid,mname,cid,cname</span><br><span class="line">	<span class="keyword">from</span> minister, country</span><br><span class="line">	<span class="keyword">where</span> countryId=cid <span class="keyword">and</span> mid=<span class="comment">#&#123;xxx&#125;</span></span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure>

<p>（5） 修改测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> IMinisterDao dao;</span><br><span class="line">	<span class="keyword">private</span> SqlSession sqlSession;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Before</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		sqlSession = MyBatisUtils.getSqlSession();</span><br><span class="line">		dao = sqlSession.getMapper(IMinisterDao.class);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@After</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(sqlSession != <span class="keyword">null</span>) &#123;</span><br><span class="line">			sqlSession.close();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		Minister minister = dao.selectMinisterById(<span class="number">2</span>);</span><br><span class="line">		System.out.println(minister);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（6） 运行结果</p>
<img src="/2019/08/03/MyBatis关联关系查询/ass07.jpg">


<h4 id="2-多表单独查询方式"><a href="#2-多表单独查询方式" class="headerlink" title="2. 多表单独查询方式"></a>2. 多表单独查询方式</h4><p>（1） 修改映射文件</p>
<img src="/2019/08/03/MyBatis关联关系查询/ass08.jpg">

<p>（2） 运行结果</p>
<img src="/2019/08/03/MyBatis关联关系查询/ass09.jpg">


<h3 id="自关联查询"><a href="#自关联查询" class="headerlink" title="自关联查询"></a>自关联查询</h3><p>所谓自关联是指，自己即充当一方，又充当多方，是 1:n 或 n:1 的变型。例如，对于新闻栏目 NewsColumn，可以充当一方，即父栏目，也可以充当多方，即子栏目。而反映到 DB 表中，只有一张表，这张表中具有一个外键，用于表示该栏目的父栏目。一级栏目没有父栏目，所以可以将其外键值设为 0，而子栏目则具有外键值。</p>
<p>为了便于理解，将自关联分为两种情况来讲解。一种是当作 1:n 讲解，即当前类作为一方，其包含多方的集合域属性。一种是当作 n:1 讲解，即当前类作为多方，其包含一方的域属性。下面以新闻栏目为例:</p>
<h4 id="1-以一对多方式处理"><a href="#1-以一对多方式处理" class="headerlink" title="1. 以一对多方式处理"></a>1. 以一对多方式处理</h4><p>以一对多方式处理，即一方可以看到多方。 该处理方式的应用场景比较多，例如在页面上点击父栏目，显示出其子栏目。再如，将鼠标定位在窗口中的某菜单项上会显示其所有子菜单项等。</p>
<p>A. 查询指定栏目的所有子孙栏目</p>
<p>根据指定的 id，仅查询出其所有子栏目。当然，包括其所有辈份的孙子栏目。 即，给出的查询 id 实际为父栏目 id。</p>
<p>（1） 自关联的 DB 表</p>
<img src="/2019/08/03/MyBatis关联关系查询/ass10.jpg">

<p>（2） 定义实体类</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 新闻栏目：当前的新闻栏目被看作是一方，即父栏目</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">NewsLabel</span> &#123;</span><br><span class="line">	<span class="keyword">private</span> Integer id;</span><br><span class="line">	<span class="keyword">private</span> String name;  <span class="comment">// 栏目名称</span></span><br><span class="line">	<span class="keyword">private</span> Set&lt;NewsLabel&gt; children;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（3） 定义 Dao 接口</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">public<span class="built_in"> interface </span>INewsLabelDao &#123;</span><br><span class="line">	List&lt;NewsLabel&gt; selectChildrenByParent(int pid);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（4） 定义 mapper 映射</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">&lt;mapper namespace=<span class="string">"com.huang.dao.INewsLabelDao"</span>&gt;</span><br><span class="line">	&lt;!<span class="comment">-- </span></span><br><span class="line">	&lt;select <span class="built_in">id</span>=<span class="string">""</span> resultMap=<span class="string">"newslabelMapper"</span>&gt;</span><br><span class="line">		select <span class="built_in">id</span>,<span class="built_in">name</span> <span class="keyword">from</span> newslabel <span class="keyword">where</span> pid=<span class="comment">#&#123;ooo&#125;</span></span><br><span class="line">	&lt;/select&gt;</span><br><span class="line">	 <span class="comment">--&gt;</span></span><br><span class="line">	&lt;resultMap type=<span class="string">"NewsLabel"</span> <span class="built_in">id</span>=<span class="string">"newslabelMapper"</span>&gt;</span><br><span class="line">		&lt;<span class="built_in">id</span> column=<span class="string">"id"</span> <span class="keyword">property</span>=<span class="string">"id"</span>/&gt;</span><br><span class="line">		&lt;<span class="literal">result</span> column=<span class="string">"name"</span> <span class="keyword">property</span>=<span class="string">"name"</span>/&gt;</span><br><span class="line">		&lt;collection <span class="keyword">property</span>=<span class="string">"children"</span> </span><br><span class="line">					ofType=<span class="string">"NewsLabel"</span></span><br><span class="line">					select=<span class="string">"selectChildrenByParent"</span></span><br><span class="line">					column=<span class="string">"id"</span>/&gt;</span><br><span class="line">	&lt;/resultMap&gt;</span><br><span class="line">	</span><br><span class="line">	&lt;select <span class="built_in">id</span>=<span class="string">"selectChildrenByParent"</span> resultMap=<span class="string">"newslabelMapper"</span>&gt;</span><br><span class="line">		select <span class="built_in">id</span>,<span class="built_in">name</span> </span><br><span class="line">		<span class="keyword">from</span> newslabel </span><br><span class="line">		<span class="keyword">where</span> pid=<span class="comment">#&#123;xxx&#125;</span></span><br><span class="line">	&lt;/select&gt;</span><br><span class="line">	</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure>

<p>（5） 定义测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> INewsLabelDao dao;</span><br><span class="line">	<span class="keyword">private</span> SqlSession sqlSession;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Before</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		sqlSession = MyBatisUtils.getSqlSession();</span><br><span class="line">		dao = sqlSession.getMapper(INewsLabelDao.class);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@After</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(sqlSession != <span class="keyword">null</span>) &#123;</span><br><span class="line">			sqlSession.close();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		List&lt;NewsLabel&gt; children = dao.selectChildrenByParent(<span class="number">3</span>);</span><br><span class="line">		<span class="keyword">for</span> (NewsLabel newsLabel : children) &#123;</span><br><span class="line">			System.out.println(newsLabel);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（6） 运行结果</p>
<img src="/2019/08/03/MyBatis关联关系查询/ass11.jpg">


<p>B. 查询指定栏目及其所有子孙栏目</p>
<p>这里的查询结果，即要包含指定 id 的当前栏目，还包含其所有辈份的孙子栏目。 即给出的 id 实际为当前要查询的栏目的 id。</p>
<p>（1） 修改 Dao 接口</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">public<span class="built_in"> interface </span>INewsLabelDao &#123;</span><br><span class="line">	NewsLabel selectNewsLabelById(int id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（2） 修改 mapper 映射</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">&lt;select <span class="built_in">id</span>=<span class="string">"selectNewslabelByParent"</span> resultMap=<span class="string">"newslabelMapper"</span>&gt;</span><br><span class="line">		select <span class="built_in">id</span>,<span class="built_in">name</span> </span><br><span class="line">		<span class="keyword">from</span> newslabel </span><br><span class="line">		<span class="keyword">where</span> pid=<span class="comment">#&#123;ooo&#125;</span></span><br><span class="line">	&lt;/select&gt;</span><br><span class="line">	</span><br><span class="line">	&lt;resultMap type=<span class="string">"NewsLabel"</span> <span class="built_in">id</span>=<span class="string">"newslabelMapper"</span>&gt;</span><br><span class="line">		&lt;<span class="built_in">id</span> column=<span class="string">"id"</span> <span class="keyword">property</span>=<span class="string">"id"</span>/&gt;</span><br><span class="line">		&lt;<span class="literal">result</span> column=<span class="string">"name"</span> <span class="keyword">property</span>=<span class="string">"name"</span>/&gt;</span><br><span class="line">		&lt;collection <span class="keyword">property</span>=<span class="string">"children"</span> </span><br><span class="line">					ofType=<span class="string">"NewsLabel"</span></span><br><span class="line">					select=<span class="string">"selectNewslabelByParent"</span></span><br><span class="line">					column=<span class="string">"id"</span>/&gt;</span><br><span class="line">	&lt;/resultMap&gt;</span><br><span class="line">	</span><br><span class="line">	&lt;select <span class="built_in">id</span>=<span class="string">"selectNewsLabelById"</span> resultMap=<span class="string">"newslabelMapper"</span>&gt;</span><br><span class="line">		select <span class="built_in">id</span>,<span class="built_in">name</span> </span><br><span class="line">		<span class="keyword">from</span> newslabel </span><br><span class="line">		<span class="keyword">where</span> <span class="built_in">id</span>=<span class="comment">#&#123;xxx&#125;</span></span><br><span class="line">	&lt;/select&gt;</span><br><span class="line">	</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure>

<p>（3） 修改测试类</p>
<figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line"><span class="keyword">public</span> void test01() &#123;</span><br><span class="line">	NewsLabel <span class="keyword">new</span><span class="type">sLabel</span> = dao.selectNewsLabelById(<span class="number">3</span>);</span><br><span class="line">	System.out.println(<span class="keyword">new</span><span class="type">sLabel</span>);</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（4）运行结果</p>
<img src="/2019/08/03/MyBatis关联关系查询/ass12.jpg">

<blockquote>
<p>注意 A 和 B 查询的区别</p>
</blockquote>
<h4 id="2-以多对一方式处理"><a href="#2-以多对一方式处理" class="headerlink" title="2. 以多对一方式处理"></a>2. 以多对一方式处理</h4><p>以多对一方式处理，即多方可以看到一方。 该处理方式的应用场景，例如在网页上显示当前页面的站内位置。</p>
<p>（1） 定义实体类</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 新闻栏目：当前的新闻栏目被看作是一方，即父栏目</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">NewsLabel</span> &#123;</span><br><span class="line">	<span class="keyword">private</span> Integer id;</span><br><span class="line">	<span class="keyword">private</span> String name;  <span class="comment">// 栏目名称</span></span><br><span class="line">	<span class="keyword">private</span> NewsLabel parent; <span class="comment">//父栏目</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（2） 定义 Dao 接口</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">public<span class="built_in"> interface </span>INewsLabelDao &#123;</span><br><span class="line">	NewsLabel selectNewsLabelById(int id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（3） 定义 mapper 映射</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">&lt;resultMap type=<span class="string">"NewsLabel"</span> <span class="built_in">id</span>=<span class="string">"newslabelMapper"</span>&gt;</span><br><span class="line">	&lt;<span class="built_in">id</span> column=<span class="string">"id"</span> <span class="keyword">property</span>=<span class="string">"id"</span>/&gt;</span><br><span class="line">	&lt;<span class="literal">result</span> column=<span class="string">"name"</span> <span class="keyword">property</span>=<span class="string">"name"</span>/&gt;</span><br><span class="line">	&lt;collection <span class="keyword">property</span>=<span class="string">"parent"</span> </span><br><span class="line">				javaType=<span class="string">"NewsLabel"</span></span><br><span class="line">				select=<span class="string">"selectNewsLabelById"</span></span><br><span class="line">				column=<span class="string">"pid"</span>/&gt;</span><br><span class="line">&lt;/resultMap&gt;</span><br><span class="line"></span><br><span class="line">&lt;select <span class="built_in">id</span>=<span class="string">"selectNewsLabelById"</span> resultMap=<span class="string">"newslabelMapper"</span>&gt;</span><br><span class="line">	select <span class="built_in">id</span>,<span class="built_in">name</span>,pid </span><br><span class="line">	<span class="keyword">from</span> newslabel </span><br><span class="line">	<span class="keyword">where</span> <span class="built_in">id</span>=<span class="comment">#&#123;xxx&#125;</span></span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure>

<p>（4） 定义测试类</p>
<figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line"><span class="keyword">public</span> void test01() &#123;</span><br><span class="line">	NewsLabel <span class="keyword">new</span><span class="type">sLabel</span> = dao.selectNewsLabelById(<span class="number">9</span>);</span><br><span class="line">	System.out.println(<span class="keyword">new</span><span class="type">sLabel</span>);</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（5） 运行结果</p>
<img src="/2019/08/03/MyBatis关联关系查询/ass13.jpg">


<h3 id="多对多关联查询"><a href="#多对多关联查询" class="headerlink" title="多对多关联查询"></a>多对多关联查询</h3><p>什么是多对多关联关系？一个学生可以选多门课程，而一门课程可以由多个学生选。这就是典型的多对多关系关系。所以，所谓多对多关系，其实是由两个互反的一对多关系组成。一般情况下，多对多关系都会通过一个中间表来建立， 例如选课表。</p>
<p>项目： many2many</p>
<p>（1） 定义实体</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">Student</span> &#123;</span><br><span class="line">	<span class="keyword">private</span> Integer sid;</span><br><span class="line">	<span class="keyword">private</span> String sname;  </span><br><span class="line">	<span class="keyword">private</span> Set&lt;Course&gt; courses;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">Course</span> &#123;</span><br><span class="line">	<span class="keyword">private</span> Integer cid;</span><br><span class="line">	<span class="keyword">private</span> String cname;</span><br><span class="line">	<span class="keyword">private</span> Set&lt;Student&gt; students;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（2） 定义数据库表</p>
<img src="/2019/08/03/MyBatis关联关系查询/ass14.jpg">

<img src="/2019/08/03/MyBatis关联关系查询/ass15.jpg">

<img src="/2019/08/03/MyBatis关联关系查询/ass16.jpg">

<p>（3） 定义 Dao 层接口</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">public<span class="built_in"> interface </span>IStudentDao &#123;</span><br><span class="line">	Student selectStudentById(int sid);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（4） 定义工具类</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyBatisUtils</span> &#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> SqlSessionFactory sqlSessionFactory;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title">getSqlSession</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			InputStream <span class="keyword">is</span> = Resources.getResourceAsStream(<span class="string">"mybatis.xml"</span>);</span><br><span class="line">			<span class="keyword">if</span> (sqlSessionFactory == <span class="literal">null</span>) &#123;</span><br><span class="line">				sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(<span class="keyword">is</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> sqlSessionFactory.openSession();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（5） 定义 mapper 映射</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">&lt;resultMap type=<span class="string">"Student"</span> <span class="built_in">id</span>=<span class="string">"studentMapper"</span>&gt;</span><br><span class="line">	&lt;<span class="built_in">id</span> column=<span class="string">"sid"</span> <span class="keyword">property</span>=<span class="string">"sid"</span>/&gt;</span><br><span class="line">	&lt;<span class="literal">result</span> column=<span class="string">"sname"</span> <span class="keyword">property</span>=<span class="string">"sname"</span>/&gt;</span><br><span class="line">	&lt;collection <span class="keyword">property</span>=<span class="string">"courses"</span> </span><br><span class="line">				ofType=<span class="string">"Course"</span>&gt;</span><br><span class="line">	    &lt;<span class="built_in">id</span> column=<span class="string">"cid"</span> <span class="keyword">property</span>=<span class="string">"cid"</span>/&gt;</span><br><span class="line">	    &lt;<span class="literal">result</span> column=<span class="string">"cname"</span> <span class="keyword">property</span>=<span class="string">"cname"</span>/&gt;</span><br><span class="line">	&lt;/collection&gt;</span><br><span class="line">				</span><br><span class="line">&lt;/resultMap&gt;</span><br><span class="line"></span><br><span class="line">&lt;select <span class="built_in">id</span>=<span class="string">"selectStudentById"</span> resultMap=<span class="string">"studentMapper"</span>&gt;</span><br><span class="line">	select sid,sname,cid,cname</span><br><span class="line">	<span class="keyword">from</span> student,<span class="keyword">middle</span>,course</span><br><span class="line">	<span class="keyword">where</span> sid=studentId </span><br><span class="line">	<span class="keyword">and</span> cid=courseId </span><br><span class="line">	<span class="keyword">and</span> sid=<span class="comment">#&#123;xxx&#125;</span></span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure>

<p>（5） 定义测试类</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">void</span> test01() &#123;</span><br><span class="line">	Student student = dao.selectStudentById(<span class="number">1</span>);</span><br><span class="line">	System.<span class="keyword">out</span>.println(student);</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（6） 运行结果</p>
<img src="/2019/08/03/MyBatis关联关系查询/ass17.jpg">


<h2 id="延迟加载"><a href="#延迟加载" class="headerlink" title="延迟加载"></a>延迟加载</h2><p>MyBatis 中的延迟加载，也称为懒加载，是指在进行关联查询时， 按照设置延迟规则推迟对关联对象的 select 查询。 延迟加载可以有效的减少数据库压力。</p>
<blockquote>
<p>注意：<br>MyBatis 的延迟加载只是对关联对象的查询有迟延设置，对于主加载对象都是直接执行查询语句的。</p>
</blockquote>
<h3 id="关联对象加载时机"><a href="#关联对象加载时机" class="headerlink" title="关联对象加载时机"></a>关联对象加载时机</h3><p>MyBatis 根据对关联对象查询的 select 语句的执行时机，分为三种类型：直接加载、侵入式延迟加载与深度延迟加载。</p>
<ul>
<li>直接加载： 执行完对主加载对象的 select 语句，马上执行对关联对象的 select 查询。  </li>
<li>侵入式延迟： 执行对主加载对象的查时，不会执行对关联对象的查询。但当要访问主加载对象的详情时，就会马上执行关联对象的 select 查询。 即对关联对象的查询执行，侵入到了主加载对象的详情访问中。也可以这样理解：将关联对象的详情侵入到了主加载对象的详情中，即将关联对象的详情作为主加载对象的详情的一部分出现了。  </li>
<li>深度延迟： 执行对主加载对象的查询时，不会执行对关联对象的查询。访问主加载对象<br>的详情时也不会执行关联对象的 select 查询。只有当真正访问关联对象的详情时，才会<br>执行对关联对象的 select 查询。</li>
</ul>
<blockquote>
<p>注意:<br>延迟加载的应用要求，关联对象的查询与主加载对象的查询必须是分别进行的 select 语句，不能是使用多表连接所进行的 select 查询。 因为，多表连接查询，其实质是对一张表的查询，对由多个表连接后形成的一张表的查询。会一次性将多张表的所有信息查询出来。</p>
</blockquote>
<p>MyBatis 中对于延迟加载设置，可以应用到一对一、一对多、多对一、多对多的所有关联关系查询中。下面以一对多关联关系查询为例：</p>
<h3 id="直接加载"><a href="#直接加载" class="headerlink" title="直接加载"></a>直接加载</h3><p>在主配置文件的&lt;properties/&gt;与&lt;typeAliases/&gt;标签之间，添 &lt;settings/&gt;标签，用于完成全局参数设置。（可参考 MyBatis 官方文档）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 设置整个应用所使用的常量 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 延迟加载的总开关 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"lazyLoadingEnabled"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>标签的书写位置，是由约束文件进行规定好的，不能随便写</p>
<img src="/2019/08/03/MyBatis关联关系查询/ass18.jpg">


<h3 id="深度延迟加载"><a href="#深度延迟加载" class="headerlink" title="深度延迟加载"></a>深度延迟加载</h3><p>修改主配置文件的&lt;settings/&gt;，将延迟加载开关 lazyLoadingEnabled 开启（置为 true），将侵入式延迟加载开关 aggressiveLazyLoading 关闭（置为 false）。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 设置整个应用所使用的常量 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 延迟加载的总开关 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"lazyLoadingEnabled"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 侵入式延迟加载开关 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"aggressiveLazyLoading"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="侵入式延迟加载"><a href="#侵入式延迟加载" class="headerlink" title="侵入式延迟加载"></a>侵入式延迟加载</h3><p>修改主配置文件的&lt;settings/&gt;，将延迟加载开关 lazyLoadingEnabled 开启（置为 true），将侵入式延迟加载开关 aggressiveLazyLoading 也开启（置为 true，默认为 true）。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 设置整个应用所使用的常量 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 延迟加载的总开关 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"lazyLoadingEnabled"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 侵入式延迟加载开关 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"aggressiveLazyLoading"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：<br>侵入式延迟加载需要在延迟加载开关 lazyLoadingEnabled<br>开启时才会起作用。若 lazyLoadingEnabled 为 false，则 aggressiveLazyLoading 无论取何值，均不起作用。</p>
</blockquote>
<p>延迟加载策略总结</p>
<table>
<thead>
<tr>
<th align="center">加载策略</th>
<th align="center">lazyLoadingEnabled取值</th>
<th align="center">aggressiveLazyLoading取值</th>
</tr>
</thead>
<tbody><tr>
<td align="center">直接加载</td>
<td align="center">false</td>
<td align="center">false</td>
</tr>
<tr>
<td align="center">深度延迟加载</td>
<td align="center">true</td>
<td align="center">false</td>
</tr>
<tr>
<td align="center">侵入式延迟加载</td>
<td align="center">true</td>
<td align="center">true</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>框架</category>
      </categories>
      <tags>
        <tag>MyBatis</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis单表的CURD操作</title>
    <url>/2019/08/02/MyBatis%E5%8D%95%E8%A1%A8%E7%9A%84CURD%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>CURD 操作，即指对数据库中实体对象的增 Create、改 Update、查 Read、删 Delete 操作。</p>
<a id="more"></a>

<h2 id="自定义-Dao-接口实现类"><a href="#自定义-Dao-接口实现类" class="headerlink" title="自定义 Dao 接口实现类"></a>自定义 Dao 接口实现类</h2><h3 id="搭建测试环境"><a href="#搭建测试环境" class="headerlink" title="搭建测试环境"></a>搭建测试环境</h3><p>项目： curd</p>
<p>（1）定义实体类</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">Student</span> &#123;</span><br><span class="line">	<span class="keyword">private</span> Integer id;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	<span class="keyword">private</span> <span class="built_in">int</span> age;</span><br><span class="line">	<span class="keyword">private</span> <span class="built_in">double</span> score;</span><br></pre></td></tr></table></figure>

<p>（2）定义 Dao 接口</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IStudentDao</span> &#123;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">insertStudent</span>(<span class="params">Student student</span>)</span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">insertStudentCacheId</span>(<span class="params">Student student</span>)</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">deleteStudentById</span>(<span class="params"><span class="keyword">int</span> id</span>)</span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">updateStudent</span>(<span class="params">Student student</span>)</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="function">List&lt;Student&gt; <span class="title">selectAllStudents</span>(<span class="params"></span>)</span>;</span><br><span class="line">	<span class="function">Map&lt;String, Student&gt; <span class="title">selectStudentMap</span>(<span class="params"></span>)</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="function">Student <span class="title">selectStudentById</span>(<span class="params"><span class="keyword">int</span> id</span>)</span>;</span><br><span class="line">	<span class="function">Student <span class="title">selectStudentById</span>(<span class="params">Map&lt;String, Object&gt; map</span>)</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="function">List&lt;Student&gt; <span class="title">selectStudentsByName</span>(<span class="params">String name</span>)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（3）定义 Dao 实现类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentDaoImpl</span> <span class="keyword">implements</span> <span class="title">IStudentDao</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> SqlSession sqlSession;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertStudent</span><span class="params">(Student student)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="comment">//使用工具类获取SqlSession对象</span></span><br><span class="line">			sqlSession = MyBatisUtil.getSqlSession();</span><br><span class="line">			<span class="comment">//操作</span></span><br><span class="line">			sqlSession.insert(<span class="string">"insertStudent"</span>,student);</span><br><span class="line">			<span class="comment">//SqlSession提交</span></span><br><span class="line">			sqlSession.commit();</span><br><span class="line">		&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">			<span class="comment">//SqlSession关闭，添加了close()不用作事务回滚</span></span><br><span class="line">			<span class="keyword">if</span> (sqlSession != <span class="keyword">null</span>) </span><br><span class="line">				sqlSession.close();</span><br><span class="line">			</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>（4）创建工具类</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyBatisUtil</span> &#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> SqlSessionFactory sqlSessionFactory;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title">getSqlSession</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			InputStream <span class="keyword">is</span> = Resources.getResourceAsStream(<span class="string">"mybatis.xml"</span>);</span><br><span class="line">			<span class="keyword">if</span> (sqlSessionFactory == <span class="literal">null</span>) &#123;</span><br><span class="line">				sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(<span class="keyword">is</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> sqlSessionFactory.openSession();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（5）定义测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> StudentDaoImpl dao;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Before</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		dao= <span class="keyword">new</span> StudentDaoImpl();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（6）数据库设计如下</p>
<img src="/2019/08/02/MyBatis单表的CURD操作/curd01.jpg">


<h3 id="单纯插入数据"><a href="#单纯插入数据" class="headerlink" title="单纯插入数据"></a>单纯插入数据</h3><p>（1）修改映射文件</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">insert</span> id="insertStudent"</span><br><span class="line">parameterType="com.huang.beans.Student"&gt;</span><br><span class="line">	<span class="keyword">insert</span> <span class="keyword">into</span> </span><br><span class="line">	student(<span class="type">name</span>,age,score) </span><br><span class="line">	<span class="keyword">values</span>(#&#123;<span class="type">name</span>&#125;,#&#123;age&#125;, #&#123;score&#125;)</span><br><span class="line">&lt;/<span class="keyword">insert</span>&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>id：该 SQL 语句的唯一标识， Java 代码中要使用该标识  </li>
<li>#{ }：对指定参数类型属性值的引用。其底层是通过反射机制，调用 Student 类相关属性的 get 方法来获取值的。因为底层使用的是反射，所以这里使用的是类的属性名，而非表的字段名。</li>
</ul>
<p>（2）修改 Dao 实现类</p>
<p>使用 SqlSession 对象的 insert()方法。该方法默认返回 DB 中受影响条数。其方法原型为：insert(String id, Object obj)。</p>
<figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">insertStudent</span><span class="params">(Student student)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="comment">//使用工具类获取SqlSession对象</span></span><br><span class="line">			sqlSession = MyBatisUtil.getSqlSession();</span><br><span class="line">			<span class="comment">//操作</span></span><br><span class="line">			sqlSession.insert(<span class="string">"insertStudent"</span>,student);</span><br><span class="line">			<span class="comment">//SqlSession提交</span></span><br><span class="line">			sqlSession.commit();</span><br><span class="line">		&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">			<span class="comment">//SqlSession关闭，添加了close()不用作事务回滚</span></span><br><span class="line">			<span class="keyword">if</span> (sqlSession != <span class="keyword">null</span>) &#123;</span><br><span class="line">				sqlSession.close();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：<br>执行完对 DB 的修改操作，必须要做 SqlSession 的提交。否则，修改将无法同步到 DB 中。因为使用无参的 openSession()方法已经将事务的自动提交功能给关闭了。</p>
</blockquote>
<p>（3）修改测试类</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">	public void test01<span class="literal">()</span> &#123;</span><br><span class="line">		for (<span class="built_in">int</span> i = <span class="number">1</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">			Student student = <span class="keyword">new</span> <span class="constructor">Student(<span class="string">"n_"</span> + <span class="params">i</span>, 15 + <span class="params">i</span>,85.5 + <span class="params">i</span>)</span>;</span><br><span class="line">			dao.insert<span class="constructor">Student(<span class="params">student</span>)</span>;</span><br><span class="line">			</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>（4）运行结果</p>
<img src="/2019/08/02/MyBatis单表的CURD操作/curd02.jpg">


<h3 id="插入后用新-id-初始化被插入对象"><a href="#插入后用新-id-初始化被插入对象" class="headerlink" title="插入后用新 id 初始化被插入对象"></a>插入后用新 id 初始化被插入对象</h3><p>（1）修改映射文件<br>映射文件的<insert>标签中，有一个子标签<selectkey>用于获取新插入记录的主键值。</selectkey></insert></p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">insert</span> id="insertStudentCacheId"</span><br><span class="line">parameterType="com.huang.beans.Student"&gt;</span><br><span class="line">	<span class="keyword">insert</span> <span class="keyword">into</span> </span><br><span class="line">	student(<span class="type">name</span>,age,score) </span><br><span class="line">	<span class="keyword">values</span>(#&#123;<span class="type">name</span>&#125;,#&#123;age&#125;, #&#123;score&#125;)</span><br><span class="line">	&lt;selectKey resultType="int" keyProperty="id" <span class="keyword">order</span>="AFTER"&gt;</span><br><span class="line">	    <span class="keyword">select</span> @@<span class="keyword">identity</span></span><br><span class="line">	&lt;/selectKey&gt;</span><br><span class="line">&lt;/<span class="keyword">insert</span>&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>resultType：指出获取的主键的类型。  </li>
<li>keyProperty：指出主键在 Java 类中对应的属性名。此处会将获取的主键值直接封装到被插入的 Student 对象中，即 dao 中 insert()方法的第二个参数对象中。  </li>
<li>order：指出 id 的生成相对于 insert 语句的执行是在前还是在后。 MySql 数据库表中的 id，均是先执行 insert 语句，而后生成 id， 所以需要设置为 AFTER； Oracle 数据库表中的 id，则是在 insert 执行之前先生成，所以需要设置为 BEFORE。 当前的 MyBatis 版本，不指定 order 属性，则会根据所用 DBMS，自动选择其值。</li>
</ul>
<p>（2）修改 Dao 实现类</p>
<figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">insertStudentCacheId</span><span class="params">(Student student)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="comment">//使用工具类获取SqlSession对象</span></span><br><span class="line">			sqlSession = MyBatisUtil.getSqlSession();</span><br><span class="line">			<span class="comment">//操作</span></span><br><span class="line">			sqlSession.insert(<span class="string">"insertStudentCacheId"</span>,student);</span><br><span class="line">			<span class="comment">//SqlSession提交</span></span><br><span class="line">			sqlSession.commit();</span><br><span class="line">		&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">			<span class="comment">//SqlSession关闭，添加了close()不用作事务回滚</span></span><br><span class="line">			<span class="keyword">if</span> (sqlSession != <span class="keyword">null</span>) &#123;</span><br><span class="line">				sqlSession.close();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>（3）修改测试类</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">	public void test02<span class="literal">()</span>&#123;</span><br><span class="line">		Student student = <span class="keyword">new</span> <span class="constructor">Student(<span class="string">"张三"</span>, 28, 93.5)</span>;</span><br><span class="line">		</span><br><span class="line">		<span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"插入前student = "</span> + student);</span><br><span class="line">		dao.insert<span class="constructor">StudentCatchId(<span class="params">student</span>)</span>;</span><br><span class="line">		<span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"插入后student = "</span> + student);</span><br><span class="line">		&#125;</span><br></pre></td></tr></table></figure>

<p>（4）运行结果</p>
<img src="/2019/08/02/MyBatis单表的CURD操作/curd03.jpg">



<h3 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h3><p>（1）修改映射文件</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">&lt;delete <span class="built_in">id</span>=<span class="string">"deleteStudentById"</span>&gt;</span><br><span class="line">    delete <span class="keyword">from</span> student <span class="keyword">where</span> <span class="built_in">id</span>=<span class="comment">#&#123;xxx&#125;</span></span><br><span class="line">&lt;/delete&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：<br>这里的动态参数 id 所赋值为#{xxx}。这个#{xxx}表示这就是个占位符，代表 delete()方法的第二个参数。 #{ }中可以放任意值，无需要与 delete()方法的第二个参数值相同。</p>
</blockquote>
<p>（2）修改 Dao 实现类</p>
<figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">deleteStudentById</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="comment">//使用工具类获取SqlSession对象</span></span><br><span class="line">			sqlSession = MyBatisUtil.getSqlSession();</span><br><span class="line">			<span class="comment">//操作</span></span><br><span class="line">			sqlSession.delete(<span class="string">"deleteStudentById"</span>,id);</span><br><span class="line">			<span class="comment">//SqlSession提交</span></span><br><span class="line">			sqlSession.commit();</span><br><span class="line">		&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">			<span class="comment">//SqlSession关闭，添加了close()不用作事务回滚</span></span><br><span class="line">			<span class="keyword">if</span> (sqlSession != <span class="keyword">null</span>) &#123;</span><br><span class="line">				sqlSession.close();</span><br><span class="line">				</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>（3）修改测试类</p>
<figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">test03</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		dao.deleteStudentById(<span class="number">5</span>);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<h3 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h3><p>（1）修改映射文件</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">&lt;update <span class="built_in">id</span>=<span class="string">"updateStudent"</span>&gt;</span><br><span class="line">    update student</span><br><span class="line">    <span class="keyword">set</span> <span class="built_in">name</span>=<span class="comment">#&#123;name&#125;, age=#&#123;age&#125;, score=#&#123;score&#125;</span></span><br><span class="line">    <span class="keyword">where</span> <span class="built_in">id</span>=<span class="comment">#&#123;id&#125;</span></span><br><span class="line">&lt;/update&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：<br>这里的#{ }中，必须要填写 update()方法所传第二个参数 student 对象的属性名称，不能随意填写。</p>
</blockquote>
<p>（2）修改 Dao 实现类</p>
<figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">updateStudent</span><span class="params">(Student student)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="comment">//使用工具类获取SqlSession对象</span></span><br><span class="line">			sqlSession = MyBatisUtil.getSqlSession();</span><br><span class="line">			<span class="comment">//操作</span></span><br><span class="line">			sqlSession.delete(<span class="string">"updateStudent"</span>,student);</span><br><span class="line">			<span class="comment">//SqlSession提交</span></span><br><span class="line">			sqlSession.commit();</span><br><span class="line">		&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">			<span class="comment">//SqlSession关闭，添加了close()不用作事务回滚</span></span><br><span class="line">			<span class="keyword">if</span> (sqlSession != <span class="keyword">null</span>) &#123;</span><br><span class="line">				sqlSession.close();</span><br><span class="line">				</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>（3）修改测试类</p>
<figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">test04</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	Student student = <span class="keyword">new</span> Student(<span class="string">"张小三"</span>, <span class="number">18</span>, <span class="number">99.5</span>);</span><br><span class="line">	student.setId(<span class="number">1</span>);</span><br><span class="line">	</span><br><span class="line">	dao.updateStudent(student);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="查询所有对象-返回-List"><a href="#查询所有对象-返回-List" class="headerlink" title="查询所有对象-返回 List"></a>查询所有对象-返回 List</h3><p>（1）修改映射文件</p>
<figure class="highlight sqf"><table><tr><td class="code"><pre><span class="line">&lt;<span class="built_in">select</span> id=<span class="string">"selectAllStudents"</span> resultType=<span class="string">"Student"</span>&gt;</span><br><span class="line">	<span class="built_in">select</span> id,<span class="built_in">name</span>,age,<span class="built_in">score</span> <span class="keyword">from</span> student</span><br><span class="line">&lt;/<span class="built_in">select</span>&gt;</span><br></pre></td></tr></table></figure>

<p>注意：<br>resultType 属性并非指查询结果集最后的类型，而是每查出 DB 中的一条记录，将该记录封装成为的对象的类型。</p>
<p>（2）注册类的别名</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">	<span class="comment">&lt;!-- 将指定包中所有类的简单类名当作其别名 ,type：全限定性类名,alias：别名--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.huang.beans"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>（3）修改 Dao 实现类</p>
<p>完成 Dao 实现类的 selectAllStudent()方法。 使用 SqlSession 的 selectList()方法完成查询操作。 该方法会将查询出的每条记录封装为指定类型对象后，再将最后的结果集封装为 List 返回。 方法原型为： List selectList (String statement)。</p>
<p>statement：映射文件中配置的 SQL 语句的 id。</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">	public <span class="built_in">List</span>&lt;Student&gt; selectAllStudents() &#123;</span><br><span class="line">		<span class="built_in">List</span>&lt;Student&gt; students = <span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			sqlSession = MyBatisUtils.getSqlSession();</span><br><span class="line">			students = sqlSession.selectList(<span class="string">"selectAllStudents"</span>);</span><br><span class="line">			<span class="comment">//sqlSession.commit();</span></span><br><span class="line">		&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">			<span class="keyword">if</span>(sqlSession != <span class="keyword">null</span>) &#123;</span><br><span class="line">				sqlSession.close();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> students;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>说明：<br>在写查询时，由于不是对 DB 中数据进行修改，所以无需进行 SqlSession 的提交。但最终 SqlSession 对象还是需要关闭的。</p>
<p>（4）修改测试类</p>
<figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="comment">//查询所有：返回List</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">test05</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	List&lt;Student&gt; students = dao.selectAllStudents();</span><br><span class="line">	<span class="keyword">for</span> (Student student : students) &#123;</span><br><span class="line">		System.out.println(student);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（5）运行结果</p>
<img src="/2019/08/02/MyBatis单表的CURD操作/curd04.jpg">


<h3 id="查询所有对象-返回-Map"><a href="#查询所有对象-返回-Map" class="headerlink" title="查询所有对象-返回 Map"></a>查询所有对象-返回 Map</h3><p>（1）修改 Dao 实现类</p>
<p>完成 Dao 实现类的 selectStudentMap()方法。 使用 SqlSession 的 selectMap()方法完成查询操作。 该查询方法会将查询出的每条记录先封装为指定对象，然后再将该对象作为 value，将该对象的指定属性所对应的字段名作为 key 封装为一个 Map 对象。 方法原型为： Map&lt;Object,Object&gt; selectMap (String statement, String mapKey)。</p>
<ul>
<li>statement：映射文件中配置的 SQL 语句的 id。</li>
<li>mapKey：查询出的 Map 所要使用的 key。这个 key 为数据表的字段名。查询出的结果是一个 Map，每行记录将会对应一个 Map.entry 对象，该对象的 key 为指定字段的值， value为记录数据所封装的对象。</li>
</ul>
<figure class="highlight processing"><table><tr><td class="code"><pre><span class="line">@Override</span><br><span class="line">	<span class="keyword">public</span> Map&lt;<span class="keyword">String</span>, <span class="keyword">Object</span>&gt; selectAllStudentsMap() &#123;</span><br><span class="line">		Map&lt;<span class="keyword">String</span>, <span class="keyword">Object</span>&gt; <span class="built_in">map</span> = <span class="keyword">new</span> <span class="keyword">HashMap</span>&lt;&gt;();</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			sqlSession = MyBatisUtils.getSqlSession();</span><br><span class="line">			<span class="built_in">map</span> = sqlSession.selectMap(<span class="string">"selectAllStudents"</span>, <span class="string">"name"</span>);</span><br><span class="line">		&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">			<span class="keyword">if</span>(sqlSession != <span class="keyword">null</span>) &#123;</span><br><span class="line">				sqlSession.close();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">map</span>;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>（2）修改测试类</p>
<figure class="highlight processing"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> test06() &#123;</span><br><span class="line">	Map&lt;<span class="keyword">String</span>, <span class="keyword">Object</span>&gt; <span class="built_in">map</span> = dao.selectAllStudentsMap();</span><br><span class="line">	System.out.<span class="built_in">println</span>(<span class="built_in">map</span>.<span class="built_in">get</span>(<span class="string">"张三"</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（3）运行结果</p>


<blockquote>
<p>说明：<br>若指定的作为 key 的属性值在 DB 中并不唯一，则后面的记录值会覆盖掉前面的值。即指定 key 的 value 值，一定是 DB 中该同名属性的最后一条记录值。</p>
</blockquote>
<h3 id="查询单个对象"><a href="#查询单个对象" class="headerlink" title="查询单个对象"></a>查询单个对象</h3><p>（1）修改映射文件</p>
<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="comment">&lt;!-- 符号jjj表示占位符 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectStudentById"</span> <span class="attr">resultType</span>=<span class="string">"Student"</span>&gt;</span></span></span><br><span class="line"><span class="xml">	select id,name,age,score from student where id=#</span><span class="template-variable">&#123;jjj&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>（2）修改 Dao 实现类</p>
<p>使用 SqlSession 的 selectOne()方法。其会将查询的结果记录封装为一个指定类型的对象。方法原型为： Object selectOne (String statement, Object parameter)</p>
<ul>
<li>statement：映射文件中配置的 SQL 语句的 id  </li>
<li>parameter：查询条件中动态参数的值</li>
</ul>
<figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="function">Student <span class="title">selectStudentById</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">	Student student = <span class="keyword">null</span>;</span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">		sqlSession = MyBatisUtils.getSqlSession();</span><br><span class="line">		student = sqlSession.selectOne(<span class="string">"selectStudentById"</span>, id);</span><br><span class="line">	&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">		<span class="keyword">if</span>(sqlSession != <span class="keyword">null</span>) &#123;</span><br><span class="line">			sqlSession.close();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> student;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（3）修改测试类</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">void</span> test07() &#123;</span><br><span class="line">	Student student = dao.selectStudentById(<span class="number">22</span>);</span><br><span class="line">	System.<span class="keyword">out</span>.println(student);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h3><p>（1）修改映射文件</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">select</span> id="selectStudentsByName" resultType="Student"&gt;</span><br><span class="line">	<span class="keyword">select</span> id,<span class="type">name</span>,age,score <span class="keyword">from</span> student <span class="keyword">where</span> <span class="type">name</span> <span class="keyword">like</span> <span class="string">'%'</span> #&#123;xxx&#125; <span class="string">'%'</span></span><br><span class="line">&lt;/<span class="keyword">select</span>&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：<br>在进行模糊查询时， 需要进行字符串的拼接。 SQL 中的字符串的拼接使用的是函数 concat(arg1,arg2,…)。注意不能使用 Java 中的字符串连接符+。</p>
</blockquote>
<p>（2）修改 Dao 实现类</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">public <span class="built_in">List</span>&lt;Student&gt; selectStudentsByName(<span class="built_in">String</span> name) &#123;</span><br><span class="line">	<span class="built_in">List</span>&lt;Student&gt; students = <span class="keyword">null</span>;</span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">		sqlSession = MyBatisUtils.getSqlSession();</span><br><span class="line">		students = sqlSession.selectList(<span class="string">"selectStudentsByName"</span>, name);</span><br><span class="line">	&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">		<span class="keyword">if</span>(sqlSession != <span class="keyword">null</span>) &#123;</span><br><span class="line">			sqlSession.close();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> students;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（3）修改测试类</p>
<figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">test08</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	List&lt;Student&gt; students = dao.selectStudentsByName(<span class="string">"张"</span>);</span><br><span class="line">	<span class="keyword">for</span> (Student student : students) &#123;</span><br><span class="line">		System.out.println(student);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（4）运行结果</p>
<img src="/2019/08/02/MyBatis单表的CURD操作/curd06.jpg">


<h4 id="与-的区别"><a href="#与-的区别" class="headerlink" title="$与#的区别"></a>$与#的区别</h4><ol>
<li><p>理论区别<br>$与#的区别是很大的。 #为占位符，而$为字符串拼接符。<br>字符串拼接是将参数值以硬编码的方式直接拼接到了 SQL 语句中。字符串拼接就会引发两个问题： SQL 注入问题与没有使用预编译所导致的执行效率低下问题。</p>
</li>
<li><p>执行区别</p>
 <img src="/2019/08/02/MyBatis单表的CURD操作/curd07.jpg">

 <img src="/2019/08/02/MyBatis单表的CURD操作/curd08.jpg">
</li>
<li><p>应用场景</p>
</li>
</ol>
<p>一般情况下，动态参数的值是由用户输入的，则不能使用拼接符$，因为有可能会出现 SQL 注入；若动态参数的值是由系统计算生成的，则可以使用拼接符$。 但这样虽然不存在 SQL 注入的风险，但仍存在执行效率问题。</p>
<h3 id="根据-Map-进行查询"><a href="#根据-Map-进行查询" class="headerlink" title="根据 Map 进行查询"></a>根据 Map 进行查询</h3><p>mapper 中 SQL 语句的动态参数也可以是 Map 的 key。</p>
<p>（1）修改映射文件</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">select</span> id=<span class="string">"selectStudentByMap"</span> resultType=<span class="string">"Student"</span>&gt;</span><br><span class="line">    <span class="keyword">select</span> * <span class="keyword">from</span> student <span class="keyword">where</span> id=<span class="meta">#&#123;studentId&#125;</span></span><br><span class="line">&lt;/<span class="keyword">select</span>&gt;</span><br></pre></td></tr></table></figure>

<p>（2）修改 Dao 实现类</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">public Student selectStudentByMap(<span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">Object</span>&gt; map) &#123;</span><br><span class="line">	Student student = <span class="keyword">null</span>;</span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">		</span><br><span class="line">		sqlSession = MyBatisUtils.getSqlSession();</span><br><span class="line">		student = sqlSession.selectOne(<span class="string">"selectStudentByMap"</span>);</span><br><span class="line">	&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">		<span class="keyword">if</span> (sqlSession != <span class="keyword">null</span>) &#123;</span><br><span class="line">			sqlSession.close();</span><br><span class="line">			</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> student;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（3）修改测试类</p>
<figure class="highlight processing"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> test09() &#123;</span><br><span class="line">	Student student = <span class="keyword">new</span> Student();</span><br><span class="line">	student.setId(<span class="number">6</span>);</span><br><span class="line">	</span><br><span class="line">	Map&lt;<span class="keyword">String</span>, <span class="keyword">Object</span>&gt; <span class="built_in">map</span> = <span class="keyword">new</span> <span class="keyword">HashMap</span>&lt;<span class="keyword">String</span>,<span class="keyword">Object</span>&gt;();</span><br><span class="line">	<span class="built_in">map</span>.put(<span class="string">"studentId"</span>, <span class="number">10</span>);</span><br><span class="line">	<span class="built_in">map</span>.put(<span class="string">"student"</span>, student);</span><br><span class="line">	</span><br><span class="line">	student = dao.selectStudentByMap(<span class="built_in">map</span>);</span><br><span class="line">	System.out.<span class="built_in">println</span>(student);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="属性名与查询字段名不相同"><a href="#属性名与查询字段名不相同" class="headerlink" title="属性名与查询字段名不相同"></a>属性名与查询字段名不相同</h2><p>resultType 可以将查询结果直接映射为实体 Bean 对象的条件是， SQL 查询的字段名与实体 Bean 的属性名一致。 因为在将查询结果转换为指定类型对象时，系统自动将查询结果字段名称作为对象的属性名， 通过反射机制完成对象的创建。当 SQL 查询结果的字段名和实体 Bean 的属性名不一致时， 将无法创建出需要类型的对象。</p>
<h3 id="搭建测试环境-1"><a href="#搭建测试环境-1" class="headerlink" title="搭建测试环境"></a>搭建测试环境</h3><blockquote>
<p>基于 curd 项目作修改</p>
</blockquote>
<p>（1）修改 student 表</p>
<img src="/2019/08/02/MyBatis单表的CURD操作/curd09.jpg">

<p>（2）修改 Dao 接口</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">public<span class="built_in"> interface </span>IStudentDao &#123;</span><br><span class="line">	Student selectStudentById(int id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（3）定义 Dao 实现类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentDaoImpl</span> <span class="keyword">implements</span> <span class="title">IStudentDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> SqlSession sqlSession;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Student <span class="title">selectStudentById</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">		Student student = <span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			sqlSession = MyBatisUtils.getSqlSession();</span><br><span class="line">			student = sqlSession.selectOne(<span class="string">"selectStudentById"</span>, id);</span><br><span class="line">		&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">			<span class="keyword">if</span> (sqlSession != <span class="keyword">null</span>) &#123;</span><br><span class="line">				sqlSession.close();</span><br><span class="line">				</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> student;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（4）修改测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> IStudentDao dao;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Before</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		dao = <span class="keyword">new</span> StudentDaoImpl();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		Student student = dao.selectStudentById(<span class="number">1</span>);</span><br><span class="line">		System.out.println(student);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="查询字段使用别名"><a href="#查询字段使用别名" class="headerlink" title="查询字段使用别名"></a>查询字段使用别名</h3><p>虽然属性名称与表中字段名称不一致，但可以为查询结果的字段名称赋予别名，让别名与实体 Bean 的属性名相同。这样框架也可以根据查询结果利用反射机制将对象创建。</p>
<p>在映射文件 mapper 中添加如下映射。</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">&lt;select <span class="built_in">id</span>=<span class="string">"selectStudentById"</span> resultType=<span class="string">"Student"</span>&gt;</span><br><span class="line">    select tid <span class="built_in">id</span>,tname <span class="built_in">name</span>,tage age,score <span class="keyword">from</span> student <span class="keyword">where</span> tid=<span class="comment">#&#123;xxx&#125;</span></span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure>

<p>运行结果如下：</p>
<img src="/2019/08/02/MyBatis单表的CURD操作/curd10.jpg">


<h3 id="使用结果映射-resultMap"><a href="#使用结果映射-resultMap" class="headerlink" title="使用结果映射 resultMap"></a>使用结果映射 resultMap</h3><p>可以使用结果映射 resultMap（这里的 Map 是映射 mapper 的意思） 来建立映射关系，完成由字段到属性的映射，达到将查询结果封装为对象的目的。 resultMap 是对 resultType的增强。</p>
<p>修改映射文件 mapper.xml。</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">   &lt;resultMap type=<span class="string">"Student"</span> <span class="built_in">id</span>=<span class="string">"studentMapper"</span>&gt;</span><br><span class="line">       &lt;<span class="built_in">id</span> column=<span class="string">"tid"</span> <span class="keyword">property</span>=<span class="string">"id"</span>/&gt;</span><br><span class="line">       &lt;<span class="literal">result</span> column=<span class="string">"tname"</span> <span class="keyword">property</span>=<span class="string">"name"</span>/&gt;</span><br><span class="line">       &lt;<span class="literal">result</span> column=<span class="string">"tage"</span> <span class="keyword">property</span>=<span class="string">"age"</span>/&gt;</span><br><span class="line">   &lt;/resultMap&gt;</span><br><span class="line"></span><br><span class="line">&lt;select <span class="built_in">id</span>=<span class="string">"selectStudentById"</span> resultMap=<span class="string">"studentMapper"</span>&gt;</span><br><span class="line">    select tid,tname,tage,score </span><br><span class="line">    <span class="keyword">from</span> student <span class="keyword">where</span> tid=<span class="comment">#&#123;xxx&#125;</span></span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure>

<p>运行结果如下：</p>
<img src="/2019/08/02/MyBatis单表的CURD操作/curd11.jpg">


<h2 id="Mapper-动态代理"><a href="#Mapper-动态代理" class="headerlink" title="Mapper 动态代理"></a>Mapper 动态代理</h2><p>在前面例子中自定义 Dao 接口实现类时发现一个问题： Dao 的实现类其实并没有干什么实质性的工作，它仅仅就是通过 SqlSession 的相关 API 定位到映射文件 mapper 中相应 id 的 SQL 语句，真正对 DB 进行操作的工作其实是由框架通过 mapper 中的 SQL 完成的。</p>
<p>所以， MyBatis 框架就抛开了 Dao 的实现类，直接定位到映射文件 mapper 中的相应 SQL语句，对 DB 进行操作。这种对 Dao 的实现方式称为 Mapper 的动态代理方式。Mapper 动态代理方式无需程序员实现 Dao 接口。接口是由 MyBatis 结合映射文件自动生成的动态代理实现的。</p>
<p>项目： dynamicMapper（基于 curd 项目修改）</p>
<h3 id="映射文件的-namespace-属性值"><a href="#映射文件的-namespace-属性值" class="headerlink" title="映射文件的 namespace 属性值"></a>映射文件的 namespace 属性值</h3><p>一般情况下，一个 Dao 接口的实现类方法使用的是同一个 SQL 映射文件中的 SQL 映射 id。 所以， MyBatis 框架要求，将映射文件中<mapper>标签的 namespace 属性设为 Dao 接口的全类名，则系统会根据方法所属 Dao 接口，自动到相应 namespace 的映射文件中查找相<br>关的 SQL 映射。</mapper></p>
<p>简单来说，通过接口名即可定位到映射文件 mapper。</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line">&lt;mapper <span class="keyword">namespace</span>=<span class="string">"com.huang.dao.IStudentDao"</span>&gt;</span><br></pre></td></tr></table></figure>

<h3 id="修改日志输出控制文件"><a href="#修改日志输出控制文件" class="headerlink" title="修改日志输出控制文件"></a>修改日志输出控制文件</h3><p>mapper 的 namespace 修改了，则需要将日志输出控制文件中 logger 的输出对象进行修改。</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">#<span class="number">#def</span>ine <span class="selector-tag">a</span> logger</span><br><span class="line">log4j<span class="selector-class">.logger</span><span class="selector-class">.com</span><span class="selector-class">.huang</span><span class="selector-class">.dao</span><span class="selector-class">.IStudentDao</span>=trace,console</span><br></pre></td></tr></table></figure>

<h3 id="Dao-接口方法名"><a href="#Dao-接口方法名" class="headerlink" title="Dao 接口方法名"></a>Dao 接口方法名</h3><p>MyBatis 框架要求， 接口中的方法名，与映射文件中相应的 SQL 标签的 id 值相同。 系统会自动根据方法名到相应的映射文件中查找同名的 SQL 映射 id。简单来说，通过方法名就可定位到映射文件 mapper 中相应的 SQL 语句。</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IStudentDao</span> &#123;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">insertStudent</span>(<span class="params">Student student</span>)</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">deleteStudentById</span>(<span class="params"><span class="keyword">int</span> id</span>)</span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">updateStudent</span>(<span class="params">Student student</span>)</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="function">List&lt;Student&gt; <span class="title">selectAllStudents</span>(<span class="params"></span>)</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="function">Student <span class="title">selectStudentById</span>(<span class="params"><span class="keyword">int</span> id</span>)</span>;</span><br><span class="line">	<span class="function">List&lt;Student&gt; <span class="title">selectStudentsByName</span>(<span class="params">String name</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="删除-Dao-实现类"><a href="#删除-Dao-实现类" class="headerlink" title="删除 Dao 实现类"></a>删除 Dao 实现类</h3><p>由于通过调用 Dao 接口的方法，不仅可以从 SQL 映射文件中找到所要执行 SQL 语句，还可通过方法参数及返回值，将 SQL 语句的动态参数传入，将查询结果返回。所以， Dao 的实现工作，完全可以由 MyBatis 系统自动根据映射文件完成。</p>
<h3 id="修改测试类"><a href="#修改测试类" class="headerlink" title="修改测试类"></a>修改测试类</h3><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> MyTest &#123;</span><br><span class="line">	private IStudentDao dao;</span><br><span class="line">	private SqlSession <span class="keyword">session</span>;</span><br><span class="line"></span><br><span class="line">	@<span class="keyword">Before</span></span><br><span class="line">	<span class="built_in">public</span> <span class="type">void</span> setUp() &#123;</span><br><span class="line">		<span class="keyword">session</span> = MyBatisUtils.getSqlSession();</span><br><span class="line">		dao = <span class="keyword">session</span>.getMapper(IStudentDao.<span class="keyword">class</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	@<span class="keyword">After</span></span><br><span class="line">	<span class="built_in">public</span> <span class="type">void</span> tearDown() &#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">session</span> != <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">session</span>.<span class="keyword">close</span>();</span><br><span class="line">			</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	@Test</span><br><span class="line">	<span class="built_in">public</span> <span class="type">void</span> test01() &#123;</span><br><span class="line">		Student student = <span class="built_in">new</span> Student("张三", <span class="number">23</span>, <span class="number">93.5</span>);</span><br><span class="line">		<span class="keyword">System</span>.<span class="keyword">out</span>.println("插入前：student = " + student);</span><br><span class="line">		dao.insertStudent(student);</span><br><span class="line">		<span class="keyword">System</span>.<span class="keyword">out</span>.println("插入后：student = " + student);</span><br><span class="line">		//添加SqlSession的提交方法</span><br><span class="line">		<span class="keyword">session</span>.<span class="keyword">commit</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/*@Test</span></span><br><span class="line"><span class="comment">	public void test02() &#123;</span></span><br><span class="line"><span class="comment">		Student student = new Student("张三", 23, 93.5);</span></span><br><span class="line"><span class="comment">		System.out.println("插入前：student = " + student);</span></span><br><span class="line"><span class="comment">		dao.insertStudentCacheId(student);</span></span><br><span class="line"><span class="comment">		System.out.println("插入后：student = " + student);</span></span><br><span class="line"><span class="comment">	&#125;*/</span></span><br><span class="line">	</span><br><span class="line">	@Test</span><br><span class="line">	<span class="built_in">public</span> <span class="type">void</span> test03() &#123;</span><br><span class="line">		dao.deleteStudentById(<span class="number">22</span>);</span><br><span class="line">		//添加SqlSession的提交方法</span><br><span class="line">		<span class="keyword">session</span>.<span class="keyword">commit</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	@Test</span><br><span class="line">	<span class="built_in">public</span> <span class="type">void</span> test04() &#123;</span><br><span class="line">		Student student = <span class="built_in">new</span> Student("张大三", <span class="number">23</span>, <span class="number">93.5</span>);</span><br><span class="line">		student.setId(<span class="number">8</span>);</span><br><span class="line">		dao.updateStudent(student);</span><br><span class="line">		//添加SqlSession的提交方法</span><br><span class="line">		<span class="keyword">session</span>.<span class="keyword">commit</span>();</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<h3 id="多查询条件无法整体接收问题的解决"><a href="#多查询条件无法整体接收问题的解决" class="headerlink" title="多查询条件无法整体接收问题的解决"></a>多查询条件无法整体接收问题的解决</h3><p>在实际工作中，表单中所给出的查询条件有时是无法将其封装为一个对象的，也就是说，查询方法只能携带多个参数，而不能携带将这多个参数进行封装的一个对象。对于这个问题，有两种解决方案。</p>
<h4 id="1-将这多个参数封装为一个-Map"><a href="#1-将这多个参数封装为一个-Map" class="headerlink" title="1. 将这多个参数封装为一个 Map"></a>1. 将这多个参数封装为一个 Map</h4><p>（1）修改 Dao 接口</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">public<span class="built_in"> interface </span>IStudentDao &#123;</span><br><span class="line">	List&lt;Student&gt; selectStudentsByCondition(Map&lt;String, Object&gt; map);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（2）修改映射文件</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">select</span> id="selectStudentsByCondition" resultType="Student"&gt;</span><br><span class="line">		<span class="keyword">select</span> id,<span class="type">name</span>,age,score </span><br><span class="line">		<span class="keyword">from</span> student </span><br><span class="line">		<span class="keyword">where</span> <span class="type">name</span> <span class="keyword">like</span> <span class="string">'%'</span> #&#123;nameCon&#125; <span class="string">'%'</span> </span><br><span class="line">		<span class="keyword">and</span> age &gt; #&#123;ageCon&#125;</span><br><span class="line">		<span class="keyword">and</span> score &gt; #&#123;scoreCon&#125;</span><br><span class="line">	&lt;/<span class="keyword">select</span>&gt;</span><br></pre></td></tr></table></figure>

<p>（3）修改测试类</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="comment">//根据吗map查询</span></span><br><span class="line">@Test</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> test01() &#123;</span><br><span class="line">	Student stu = <span class="keyword">new</span> Student(<span class="string">"王小五"</span>, <span class="number">20</span>, <span class="number">96.5</span>);</span><br><span class="line">	</span><br><span class="line">	Map&lt;<span class="keyword">String</span>, Object&gt; <span class="built_in">map</span> = <span class="keyword">new</span> HashMap&lt;<span class="keyword">String</span>, Object&gt;();</span><br><span class="line">	<span class="built_in">map</span>.<span class="built_in">put</span>(<span class="string">"nameCon"</span>, <span class="string">"王"</span>);</span><br><span class="line">	<span class="built_in">map</span>.<span class="built_in">put</span>(<span class="string">"ageCon"</span>, <span class="number">23</span>);</span><br><span class="line">	<span class="built_in">map</span>.<span class="built_in">put</span>(<span class="string">"stu"</span>, stu);</span><br><span class="line">	</span><br><span class="line">	List&lt;Student&gt; students = dao.selectStudentsByCondition(<span class="built_in">map</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">for</span> (Student student : students) &#123;</span><br><span class="line">		System.out.<span class="built_in">println</span>(student);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-多个参数逐个接收"><a href="#2-多个参数逐个接收" class="headerlink" title="2. 多个参数逐个接收"></a>2. 多个参数逐个接收</h4><p>对于 mapper 中的 SQL 语句，可以通过参数索引#{index}的方式逐个接收每个参数。</p>
<p>（1）修改 Dao 接口</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">public<span class="built_in"> interface </span>IStudentDao &#123;</span><br><span class="line">	List&lt;Student&gt; selectStudentsByCondition(String name, int age);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（2）修改映射文件</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">select</span> id="selectStudentsByCondition" resultType="Student"&gt;</span><br><span class="line">		<span class="keyword">select</span> id,<span class="type">name</span>,age,score </span><br><span class="line">		<span class="keyword">from</span> student </span><br><span class="line">		<span class="keyword">where</span> <span class="type">name</span> <span class="keyword">like</span> <span class="string">'%'</span> #&#123;<span class="number">0</span>&#125; <span class="string">'%'</span> </span><br><span class="line">		<span class="keyword">and</span> age &gt; #&#123;<span class="number">1</span>&#125;</span><br><span class="line">	&lt;/<span class="keyword">select</span>&gt;</span><br></pre></td></tr></table></figure>

<p>（3）修改测试类</p>
<figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	List&lt;Student&gt; students = dao.selectStudentsByCondition(<span class="string">"张"</span>, <span class="number">23</span>);</span><br><span class="line">	<span class="keyword">for</span> (Student student : students) &#123;</span><br><span class="line">		System.out.println(student);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>问题：<br>#{}中可以放什么内容？<br>1）参数对象的属性<br>2）随意内容，此时的#{}是个占位符<br>3）参数为map时的key<br>4）参数为map时，若key所对应的value为对象，则可将该对象的属性放入<br>5）参数的索引号</p>
</blockquote>
<h2 id="动态SQL"><a href="#动态SQL" class="headerlink" title="动态SQL"></a>动态SQL</h2><p>动态 SQL，主要用于解决查询条件不确定的情况：在程序运行期间，根据用户提交的查询条件进行查询。提交的查询条件不同，执行的 SQL 语句不同。若将每种可能的情况均逐一列出，对所有条件进行排列组合，将会出现大量的 SQL 语句。此时，可使用动态 SQL 来解决这样的问题。</p>
<p>动态 SQL，即通过 MyBatis 提供的各种标签对条件作出判断以实现动态拼接 SQL 语句。这里的条件判断使用的表达式为 OGNL 表达式。 常用的动态 SQL 标签有&lt;if/&gt;、 &lt;where/&gt;、&lt;choose/&gt;、&lt;foreach/&gt;等。</p>
<blockquote>
<p>MyBatis 的动态 SQL 语句，与 JSTL 中的语句非常相似。</p>
</blockquote>
<p>项目： dynamicSql</p>
<h3 id="搭建测试环境-2"><a href="#搭建测试环境-2" class="headerlink" title="搭建测试环境"></a>搭建测试环境</h3><p>（1） 定义数据库表</p>
<p>{$ asset_img curd12.jpg $}</p>
<p>（2） 定义实体</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">Student</span> &#123;</span><br><span class="line">	<span class="keyword">private</span> Integer id;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	<span class="keyword">private</span> <span class="built_in">int</span> age;</span><br><span class="line">	<span class="keyword">private</span> <span class="built_in">double</span> score;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（3） 创建工具类</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyBatisUtils</span> &#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> SqlSessionFactory sqlSessionFactory;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title">getSqlSession</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			InputStream <span class="keyword">is</span> = Resources.getResourceAsStream(<span class="string">"mybatis.xml"</span>);</span><br><span class="line">			<span class="keyword">if</span> (sqlSessionFactory == <span class="literal">null</span>) &#123;</span><br><span class="line">				sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(<span class="keyword">is</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> sqlSessionFactory.openSession();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（4）定义测试类</p>
<p>定义@Before 与@After 方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> IStudentDao dao;</span><br><span class="line">	<span class="keyword">private</span> SqlSession sqlSession;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Before</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		sqlSession = MyBatisUtils.getSqlSession();</span><br><span class="line">		dao = sqlSession.getMapper(IStudentDao.class);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@After</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tearDown</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (sqlSession != <span class="keyword">null</span>) &#123;</span><br><span class="line">			sqlSession.close();</span><br><span class="line">			</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：<br>在 mapper 的动态 SQL 中若出现大于号（&gt;）、小于号（&lt;）、大于等于号（&gt;=），小于等于号（&lt;=）等符号，最好将其转换为实体符号。否则， XML 可能会出现解析出错问题。特别是对于小于号（&lt;），在 XML 中是绝对不能出现的。否则，一定出错。</p>
</blockquote>
<img src="/2019/08/02/MyBatis单表的CURD操作/curd13.jpg">


<h3 id="lt-if-gt-标签"><a href="#lt-if-gt-标签" class="headerlink" title="&lt;if/&gt;标签"></a>&lt;if/&gt;标签</h3><p>对于该标签的执行，当 test 的值为 true 时，会将其包含的 SQL 片断拼接到其所在的 SQL语句中。这引发的问题是，查询条件不确定，查询条件依赖于用户提交的内容。此时，就可使用动态 SQL 语句，根据用户提交内容对将要执行的 SQL 进行拼接。</p>
<p>（1）定义 Dao 接口</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">public<span class="built_in"> interface </span>IStudentDao &#123;</span><br><span class="line">	List&lt;Student&gt; selectStudentsByIf(Student student);</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（2）定义映射文件</p>
<p>为了解决两个条件均未做设定的情况，在 where 后添加了一个“1=1”的条件。这样就不至于两个条件均未设定而出现只剩下一个 where，而没有任何可拼接的条件的不完整 SQL语句。</p>
<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml">   <span class="comment">&lt;!-- if标签 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectStudentsByIf"</span> <span class="attr">resultType</span>=<span class="string">"Student"</span>&gt;</span></span></span><br><span class="line"><span class="xml">	select id,name,age,score </span></span><br><span class="line"><span class="xml">	from student </span></span><br><span class="line"><span class="xml">	where 1 = 1</span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"name != null and name != ''"</span>&gt;</span></span></span><br><span class="line"><span class="xml">		and name like '%' #</span><span class="template-variable">&#123;name&#125;</span><span class="xml"> '%'</span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"age &gt; 0"</span>&gt;</span></span></span><br><span class="line"><span class="xml">		and age &gt; #</span><span class="template-variable">&#123;age&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>（3）修改测试类</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">	@Test</span><br><span class="line">	<span class="built_in">public</span> <span class="type">void</span> test01() &#123;</span><br><span class="line">		Student stu = <span class="built_in">new</span> Student("张", <span class="number">18</span>, <span class="number">0</span>);</span><br><span class="line">//		Student stu = <span class="built_in">new</span> Student("", <span class="number">23</span>, <span class="number">0</span>);</span><br><span class="line">//		Student stu = <span class="built_in">new</span> Student("", <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">		</span><br><span class="line">		List&lt;Student&gt; students = dao.selectStudentsByIf(stu);</span><br><span class="line">		<span class="keyword">for</span> (Student student : students) &#123;</span><br><span class="line">			<span class="keyword">System</span>.<span class="keyword">out</span>.println(student);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>（4）运行结果</p>
<img src="/2019/08/02/MyBatis单表的CURD操作/curd14.jpg">

<img src="/2019/08/02/MyBatis单表的CURD操作/curd15.jpg">

<img src="/2019/08/02/MyBatis单表的CURD操作/curd16.jpg">



<h3 id="lt-where-gt-标签"><a href="#lt-where-gt-标签" class="headerlink" title="&lt;where/&gt;标签"></a>&lt;where/&gt;标签</h3><p>&lt;if/&gt;标签的中存在一个比较麻烦的地方：需要在 where 后手工添加 1=1 的子句。因为，<br>若 where 后的所有&lt;if/&gt;条件均为 false，而 where 后若又没有 1=1 子句，则 SQL 中就会只剩<br>下一个空的 where， SQL 出错。所以，在 where 后，需要添加永为真子句 1=1，以防止这种情况的发生。但当数据量很大时，会严重影响查询效率。</p>
<p>（1）修改 Dao 接口</p>
<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line">List&lt;Student&gt; selectStudentsByWhere(<span class="name">Student</span> student)<span class="comment">;</span></span><br></pre></td></tr></table></figure>

<p>（2）定义映射文件</p>
<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="comment">&lt;!-- where标签 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectStudentsByWhere"</span> <span class="attr">resultType</span>=<span class="string">"Student"</span>&gt;</span></span></span><br><span class="line"><span class="xml">	select id,name,age,score </span></span><br><span class="line"><span class="xml">	from student </span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">where</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"name != null and name != ''"</span>&gt;</span></span></span><br><span class="line"><span class="xml">			and name like '%' #</span><span class="template-variable">&#123;name&#125;</span><span class="xml"> '%'</span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"age &gt; 0"</span>&gt;</span></span></span><br><span class="line"><span class="xml">			and age &gt; #</span><span class="template-variable">&#123;age&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;/<span class="name">where</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>（3）修改测试类</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">	@Test</span><br><span class="line">	<span class="built_in">public</span> <span class="type">void</span> test02() &#123;</span><br><span class="line">		Student stu = <span class="built_in">new</span> Student("张", <span class="number">18</span>, <span class="number">0</span>);</span><br><span class="line">//		 Student stu = <span class="built_in">new</span> Student("", <span class="number">23</span>, <span class="number">0</span>);</span><br><span class="line">//		 Student stu = <span class="built_in">new</span> Student("", <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">		</span><br><span class="line">		List&lt;Student&gt; students = dao.selectStudentsByWhere(stu);</span><br><span class="line">		<span class="keyword">for</span> (Student student : students) &#123;</span><br><span class="line">			<span class="keyword">System</span>.<span class="keyword">out</span>.println(student);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>（4）运行结果</p>
<img src="/2019/08/02/MyBatis单表的CURD操作/curd17.jpg">


<h3 id="lt-choose-gt-标签"><a href="#lt-choose-gt-标签" class="headerlink" title="&lt;choose/&gt;标签"></a>&lt;choose/&gt;标签</h3><p>该标签中只可以包含&lt;when/&gt;&lt;otherwise/&gt;，可以包含多个<when>与一个&lt;otherwise/&gt;。它们联合使用，完成 Java 中的开关语句 switch..case 功能。</when></p>
<p>（1）修改 Dao 接口</p>
<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line">List&lt;Student&gt; selectStudentsByChoose(<span class="name">Student</span> student)<span class="comment">;</span></span><br></pre></td></tr></table></figure>

<p>（2）定义映射文件</p>
<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="comment">&lt;!-- choose标签 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectStudentsByChoose"</span> <span class="attr">resultType</span>=<span class="string">"Student"</span>&gt;</span></span></span><br><span class="line"><span class="xml">	select id,name,age,score </span></span><br><span class="line"><span class="xml">	from student </span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">where</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">choose</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"name != null and name !=''"</span>&gt;</span></span></span><br><span class="line"><span class="xml">				and name like '%' #</span><span class="template-variable">&#123;name&#125;</span><span class="xml"> '%'</span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;/<span class="name">when</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"age &gt; 0"</span>&gt;</span></span></span><br><span class="line"><span class="xml">				and age &gt; #</span><span class="template-variable">&#123;age&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;/<span class="name">when</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></span></span><br><span class="line"><span class="xml">				1 = 2</span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;/<span class="name">where</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>（3）修改测试类</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">	@Test</span><br><span class="line">	<span class="built_in">public</span> <span class="type">void</span> test03() &#123;</span><br><span class="line">//		Student stu = <span class="built_in">new</span> Student("张", <span class="number">18</span>, <span class="number">0</span>);</span><br><span class="line">		Student stu = <span class="built_in">new</span> Student("", <span class="number">23</span>, <span class="number">0</span>);</span><br><span class="line">//		Student stu = <span class="built_in">new</span> Student("", <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">		</span><br><span class="line">		List&lt;Student&gt; students = dao.selectStudentsByChoose(stu);</span><br><span class="line">		<span class="keyword">for</span> (Student student : students) &#123;</span><br><span class="line">			<span class="keyword">System</span>.<span class="keyword">out</span>.println(student);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<h3 id="lt-foreach-gt-标签"><a href="#lt-foreach-gt-标签" class="headerlink" title="&lt;foreach/&gt;标签"></a>&lt;foreach/&gt;标签</h3><p>&lt;foreach/&gt;标签用于实现对于数组与集合的遍历。对其使用，需要注意：</p>
<ul>
<li>collection 表示要遍历的集合类型，这里是数组，即 array。  </li>
<li>open、 close、 separator 为对遍历内容的 SQL 拼接。</li>
</ul>
<p>（1）修改 Dao 接口</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">List&lt;Student&gt; select<span class="constructor">StudentsByForeach(<span class="params">int</span>[] <span class="params">ids</span>)</span>;</span><br><span class="line">List&lt;Student&gt; select<span class="constructor">StudentsByForeach2(List&lt;Integer&gt; <span class="params">ids</span>)</span>;</span><br><span class="line">List&lt;Student&gt; select<span class="constructor">StudentsByForeach3(List&lt;Student&gt; <span class="params">ids</span>)</span>;</span><br></pre></td></tr></table></figure>

<p>（2）定义映射文件</p>
<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="comment">&lt;!-- foreach标签 ，遍历数组--&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectStudentsByForeach"</span> <span class="attr">resultType</span>=<span class="string">"Student"</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="comment">&lt;!-- select id,name,age,score from student where id in (1,3,5) --&gt;</span></span></span><br><span class="line"><span class="xml">	select id,name,age,score </span></span><br><span class="line"><span class="xml">	from student </span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"array.length &gt; 0"</span>&gt;</span></span></span><br><span class="line"><span class="xml">		where id in </span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"array"</span> <span class="attr">item</span>=<span class="string">"myid"</span> <span class="attr">open</span>=<span class="string">"("</span> <span class="attr">close</span>=<span class="string">")"</span> <span class="attr">separator</span>=<span class="string">","</span>&gt;</span></span></span><br><span class="line"><span class="xml">			#</span><span class="template-variable">&#123;myid&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- foreach标签 ，遍历泛型为基本类型的 List--&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectStudentsByForeach2"</span> <span class="attr">resultType</span>=<span class="string">"Student"</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="comment">&lt;!-- select id,name,age,score from student where id in (1,3,5) --&gt;</span></span></span><br><span class="line"><span class="xml">	select id,name,age,score </span></span><br><span class="line"><span class="xml">	from student </span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"list.size &gt; 0"</span>&gt;</span></span></span><br><span class="line"><span class="xml">		where id in </span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"list"</span> <span class="attr">item</span>=<span class="string">"myid"</span> <span class="attr">open</span>=<span class="string">"("</span> <span class="attr">close</span>=<span class="string">")"</span> <span class="attr">separator</span>=<span class="string">","</span>&gt;</span></span></span><br><span class="line"><span class="xml">			#</span><span class="template-variable">&#123;myid&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- foreach标签遍历泛型为自定义类型的 List --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectStudentsByForeach3"</span> <span class="attr">resultType</span>=<span class="string">"Student"</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="comment">&lt;!-- select id,name,age,score from student where id in (1,3,5) --&gt;</span></span></span><br><span class="line"><span class="xml">	select id,name,age,score </span></span><br><span class="line"><span class="xml">	from student </span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"list.size &gt; 0"</span>&gt;</span></span></span><br><span class="line"><span class="xml">		where id in </span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"list"</span> <span class="attr">item</span>=<span class="string">"stu"</span> <span class="attr">open</span>=<span class="string">"("</span> <span class="attr">close</span>=<span class="string">")"</span> <span class="attr">separator</span>=<span class="string">","</span>&gt;</span></span></span><br><span class="line"><span class="xml">			#</span><span class="template-variable">&#123;stu.id&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>（3）修改测试类</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line"><span class="built_in">public</span> <span class="type">void</span> test04() &#123;</span><br><span class="line">	<span class="type">int</span>[] ids = &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</span><br><span class="line">	List&lt;Student&gt; students = dao.selectStudentsByForeach(ids);</span><br><span class="line">	<span class="keyword">for</span> (Student student : students) &#123;</span><br><span class="line">		<span class="keyword">System</span>.<span class="keyword">out</span>.println(student);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Test</span><br><span class="line"><span class="built_in">public</span> <span class="type">void</span> test05() &#123;</span><br><span class="line">	List&lt;<span class="type">Integer</span>&gt; ids = <span class="built_in">new</span> ArrayList&lt;&gt;();</span><br><span class="line">	ids.<span class="keyword">add</span>(<span class="number">1</span>);</span><br><span class="line">	ids.<span class="keyword">add</span>(<span class="number">3</span>);</span><br><span class="line">	</span><br><span class="line">	List&lt;Student&gt; students = dao.selectStudentsByForeach2(ids);</span><br><span class="line">	<span class="keyword">for</span> (Student student : students) &#123;</span><br><span class="line">		<span class="keyword">System</span>.<span class="keyword">out</span>.println(student);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Test</span><br><span class="line"><span class="built_in">public</span> <span class="type">void</span> test06() &#123;</span><br><span class="line">	Student stu1 = <span class="built_in">new</span> Student();</span><br><span class="line">	stu1.setId(<span class="number">1</span>);</span><br><span class="line">	Student stu2 = <span class="built_in">new</span> Student();</span><br><span class="line">	stu2.setId(<span class="number">3</span>);</span><br><span class="line">	</span><br><span class="line">	List&lt;Student&gt; stus = <span class="built_in">new</span> ArrayList&lt;&gt;();</span><br><span class="line">	stus.<span class="keyword">add</span>(stu1);</span><br><span class="line">	stus.<span class="keyword">add</span>(stu2);</span><br><span class="line">	</span><br><span class="line">	List&lt;Student&gt; students = dao.selectStudentsByForeach3(stus);</span><br><span class="line">	<span class="keyword">for</span> (Student student : students) &#123;</span><br><span class="line">		<span class="keyword">System</span>.<span class="keyword">out</span>.println(student);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="lt-sql-gt-标签"><a href="#lt-sql-gt-标签" class="headerlink" title="&lt;sql/&gt;标签"></a>&lt;sql/&gt;标签</h3><p>&lt;sql/&gt; 标签用于定义 SQL 片断，以便其它 SQL 标签复用。而其它标签使用该 SQL 片断，<br>需要使用 &lt;include/&gt; 子标签。 该 &lt;sql/&gt; 标签可以定义 SQL 语句中的任何部分，所以 &lt;include/&gt; 子标签可以放在动态 SQL 的任何位置。</p>
<p>（1）修改 Dao 接口</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">List<span class="tag">&lt;<span class="name">Student</span>&gt;</span> selectStudentsBySqlFragment(List<span class="tag">&lt;<span class="name">Student</span>&gt;</span> ids);</span><br></pre></td></tr></table></figure>

<p>（2）定义映射文件</p>
<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="comment">&lt;!-- sql标签 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectStudentsBySqlFragment"</span> <span class="attr">resultType</span>=<span class="string">"Student"</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="comment">&lt;!-- select id,name,age,score from student where id in (1,3,5) --&gt;</span></span></span><br><span class="line"><span class="xml">	select <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"selectColumns"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">	from student </span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"list.size &gt; 0"</span>&gt;</span></span></span><br><span class="line"><span class="xml">		where id in </span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"list"</span> <span class="attr">item</span>=<span class="string">"stu"</span> <span class="attr">open</span>=<span class="string">"("</span> <span class="attr">close</span>=<span class="string">")"</span> <span class="attr">separator</span>=<span class="string">","</span>&gt;</span></span></span><br><span class="line"><span class="xml">			#</span><span class="template-variable">&#123;stu.id&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">"selectColumns"</span>&gt;</span></span></span><br><span class="line"><span class="xml">	id,name,age,score </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>（3）修改测试类</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void test07<span class="literal">()</span> &#123;</span><br><span class="line">	Student stu1 = <span class="keyword">new</span> <span class="constructor">Student()</span>;</span><br><span class="line">	stu1.set<span class="constructor">Id(1)</span>;</span><br><span class="line">	Student stu2 = <span class="keyword">new</span> <span class="constructor">Student()</span>;</span><br><span class="line">	stu2.set<span class="constructor">Id(3)</span>;</span><br><span class="line">	</span><br><span class="line">	List&lt;Student&gt; stus = <span class="keyword">new</span> ArrayList&lt;&gt;<span class="literal">()</span>;</span><br><span class="line">	stus.add(stu1);</span><br><span class="line">	stus.add(stu2);</span><br><span class="line">	</span><br><span class="line">	List&lt;Student&gt; students = dao.select<span class="constructor">StudentsBySqlFragment(<span class="params">stus</span>)</span>;</span><br><span class="line">	for (Student student : students) &#123;</span><br><span class="line">		<span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(student);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（4）运行结果</p>
<img src="/2019/08/02/MyBatis单表的CURD操作/curd18.jpg">]]></content>
      <categories>
        <category>框架</category>
      </categories>
      <tags>
        <tag>MyBatis</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis入门</title>
    <url>/2019/07/31/MyBatis%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h2><blockquote>
<p>框架（Framework）是整个或部分系统的可重用设计，表现为一组抽象构件及构件实例间交互的方法；另一种定义认为，框架是可被应用开发者定制的应用骨架。可以说，一个框架是一个可复用的设计构件，它规定了应用的体系结构，阐明了整个设计、协作构件之间的依赖关系、责任分配和控制流程，表现为一组抽象类以及其实例之间协作的方法，它为构件复用提供上下文(Context)关系。——百度百科  </p>
</blockquote>
<p>对于程序员来说，框架是一套资源，这套资源中会包含 Jar 包、文档，还有些会包含源码、代码示例等。这套资源从相关的官网上可以下载。一般是以压缩文件的形式出现。</p>
<a id="more"></a>


<h2 id="Mybatis-概述"><a href="#Mybatis-概述" class="headerlink" title="Mybatis 概述"></a>Mybatis 概述</h2><blockquote>
<p>MyBatis 本是 apache 的一个开源项目 iBatis， 2010 年这个项目由 apache 迁移到了 google，并更名为 MyBatis。 2013 年迁移到 Github。——百度百科《MyBatis》</p>
</blockquote>
<h3 id="Mybatis-简介"><a href="#Mybatis-简介" class="headerlink" title="Mybatis 简介"></a>Mybatis 简介</h3><p>MyBatis 是一个优秀的基于 Java 的持久层框架，它内部封装了 JDBC，使开发者只需关注<br>SQL 语句本身，而不用再花费精力去处理诸如注册驱动、创建 Connection、 配置 Statement<br>等繁杂过程。  </p>
<p>Mybatis通过xml或注解的方式将要执行的各种statement （statement、preparedStatement<br>等）配置起来，并通过 Java 对象和 Statement 中 SQL 的动态参数进行映射生成最终执行的<br>SQL 语句，最后由 MyBatis 框架执行 SQL 并将结果映射成 Java 对象并返回。</p>
<h3 id="Mybatis-与-Hibernate"><a href="#Mybatis-与-Hibernate" class="headerlink" title="Mybatis 与 Hibernate"></a>Mybatis 与 Hibernate</h3><p>Hibernate 框架是提供了全面的数据库封装机制的“全自动” ORM，即实现了 POJO 和<br>数据库表之间的映射，以及 SQL 的自动生成和执行。</p>
<p>相对于此， MyBatis 只能算作是“半自动” ORM。其着力点，是在 POJO 类 与 SQL 语句<br>之间的映射关系。也就是说， MyBatis 并不会为程序员自动生成 SQL 语句。具体的 SQL 需<br>要程序员自己编写，然后通过 SQL 语句映射文件，将 SQL 所需的参数，以及返回的结果字<br>段映射到指定 POJO。因此， MyBatis 成为了“全自动” ORM 的一种有益补充。</p>
<p>与 Hibernate 相比， MyBatis 具有以下几个特点：  </p>
<ul>
<li>在 XML 文件中配置 SQL 语句，实现了 SQL 语句与代码的分离，给程序的维护带来<br>了很大便利。  </li>
<li>因为需要程序员自己去编写 SQL 语句，程序员可以结合数据库自身的特点灵活控<br>制 SQL 语句，因此能够实现比 Hibernate 等全自动 ORM 框架更高的查询效率，能够完成复<br>杂查询。  </li>
<li>简单，易于学习，易于使用，上手快。</li>
</ul>
<h3 id="Mybatis-体系结构"><a href="#Mybatis-体系结构" class="headerlink" title="Mybatis 体系结构"></a>Mybatis 体系结构</h3><img src="/2019/07/31/MyBatis入门/mybatis01.png">


<h2 id="Mybatis-工作原理"><a href="#Mybatis-工作原理" class="headerlink" title="Mybatis 工作原理"></a>Mybatis 工作原理</h2><img src="/2019/07/31/MyBatis入门/mybatis02.jpg">


<h2 id="第一个-Mybatis-程序"><a href="#第一个-Mybatis-程序" class="headerlink" title="第一个 Mybatis 程序"></a>第一个 Mybatis 程序</h2><p>需求： 实现将 Student 信息写入到 DB 中</p>
<h3 id="基本程序"><a href="#基本程序" class="headerlink" title="基本程序"></a>基本程序</h3><p>项目： primary</p>
<h4 id="1-导入-Jar-包"><a href="#1-导入-Jar-包" class="headerlink" title="1. 导入 Jar 包"></a>1. 导入 Jar 包</h4><p>除了需要导入 MyBatis 的核心 Jar 包及依赖 Jar 包外，还需要导入 MySql 的驱动 Jar 包，JUnit 测试的 Jar 包。 </p>
<h4 id="2-定义实体类"><a href="#2-定义实体类" class="headerlink" title="2.定义实体类"></a>2.定义实体类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huang.beans;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> Integer id;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">double</span> score;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> age, <span class="keyword">double</span> score)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>();</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">		<span class="keyword">this</span>.age = age;</span><br><span class="line">		<span class="keyword">this</span>.score = score;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> id;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.id = id;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> age;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.age = age;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getScore</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> score;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setScore</span><span class="params">(<span class="keyword">double</span> score)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.score = score;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">"Student [id="</span> + id + <span class="string">", name="</span> + name + <span class="string">", age="</span> + age + <span class="string">", score="</span> + score + <span class="string">"]"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-在-DB-中生成表结构，即创建空表"><a href="#3-在-DB-中生成表结构，即创建空表" class="headerlink" title="3. 在 DB 中生成表结构，即创建空表"></a>3. 在 DB 中生成表结构，即创建空表</h4><img src="/2019/07/31/MyBatis入门/mybatis03.jpg">

<blockquote>
<p>注意：<br>由于后面要创建的 MyBatis 映射文件映射的是 SQL 语句，而非像 Hibernate 一样，是类到表，属性到字段的映射。所以， MyBatis 要求， 在创建数据库表时，字段名要与属性名一致，如果不一致，需要通过 resultMap 解决。</p>
</blockquote>
<h4 id="4-定义-Dao-接口"><a href="#4-定义-Dao-接口" class="headerlink" title="4. 定义 Dao 接口"></a>4. 定义 Dao 接口</h4><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">package com.huang.dao;</span><br><span class="line"></span><br><span class="line">import com.huang.beans.Student;</span><br><span class="line"></span><br><span class="line">public<span class="built_in"> interface </span>IStudentDao &#123;</span><br><span class="line">	void insertStu(Student student);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="5-定义映射文件"><a href="#5-定义映射文件" class="headerlink" title="5. 定义映射文件"></a>5. 定义映射文件</h4><p>映射文件，简称为 mapper，主要完成 Dao 层中 SQL 语句的映射。映射文件名随意，一般放在 dao 包中。 这里映射文件名称定为 mapper.xml。</p>
<p>映射文件的约束文件常用有两种：<em>.dtd、</em>.xsd，约束文件 mybatis-3-mapper.dtd 文件，在 MyBatis 的核心 Jar 包的 org.apache.ibatis.builder.xml 包中存放。当然，主配置文件的约束 dtd 文件也在该位置存放。</p>
<p>映射文件内容为：</p>
<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span></span><br><span class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE mapper</span></span></span><br><span class="line"><span class="xml">PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line"><span class="xml">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"test"</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insertStudent"</span></span></span></span><br><span class="line"><span class="xml">	parameterType="com.huang.beans.Student"&gt;</span></span><br><span class="line"><span class="xml">		insert into student(name,age,score) </span></span><br><span class="line"><span class="xml">		values(#</span><span class="template-variable">&#123;name&#125;</span><span class="xml">,#</span><span class="template-variable">&#123;age&#125;</span><span class="xml">, #</span><span class="template-variable">&#123;score&#125;</span><span class="xml">)</span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：<br>#{ }中写入的是 Student 类的属性名。</p>
</blockquote>
<h4 id="6-定义主配置文件"><a href="#6-定义主配置文件" class="headerlink" title="6. 定义主配置文件"></a>6. 定义主配置文件</h4><p>在主配置文件中添加约束，即配置文件头，配置文件名也可以随意命名，这里命名为 mybatis.xml。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE configuration</span></span><br><span class="line"><span class="meta">PUBLIC "-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span class="line"><span class="meta">"http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 配置运行环境 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"onlineEM"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"onlineEM"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/test"</span>/&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"123456"</span>/&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"testEM"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/test"</span>/&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"123456"</span>/&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">&lt;!-- 注册映射文件 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"com/huang/dao/mapper.xml"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line">	</span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="7-定义-Dao-实现类"><a href="#7-定义-Dao-实现类" class="headerlink" title="7. 定义 Dao 实现类"></a>7. 定义 Dao 实现类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huang.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.huang.beans.Student;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentDaoImpl</span> <span class="keyword">implements</span> <span class="title">IStudentDao</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> SqlSession sqlSession;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertStu</span><span class="params">(Student student)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="comment">//1.读取主配置文件</span></span><br><span class="line">			InputStream inputStream = Resources.getResourceAsStream(<span class="string">"mybatis.xml"</span>);</span><br><span class="line">			<span class="comment">//2.创建SqlSessionFactory对象</span></span><br><span class="line">			SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">			<span class="comment">//创建SqlSession对象</span></span><br><span class="line">			sqlSession = sqlSessionFactory.openSession();</span><br><span class="line">			<span class="comment">//操作</span></span><br><span class="line">			sqlSession.insert(<span class="string">"insertStudent"</span>,student);</span><br><span class="line">			<span class="comment">//SqlSession提交</span></span><br><span class="line">			sqlSession.commit();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">			<span class="comment">//SqlSession关闭，添加了close()不用作事务回滚</span></span><br><span class="line">			<span class="keyword">if</span> (sqlSession != <span class="keyword">null</span>) &#123;</span><br><span class="line">				sqlSession.close();</span><br><span class="line">				</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="8-定义测试类"><a href="#8-定义测试类" class="headerlink" title="8. 定义测试类"></a>8. 定义测试类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huang.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.huang.beans.Student;</span><br><span class="line"><span class="keyword">import</span> com.huang.dao.StudentDaoImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> StudentDaoImpl dao;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Before</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		dao= <span class="keyword">new</span> StudentDaoImpl();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		Student student = <span class="keyword">new</span> Student(<span class="string">"赵六"</span>, <span class="number">26</span>, <span class="number">97.5</span>);</span><br><span class="line">		dao.insertStu(student);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="9-添加日志控制文件"><a href="#9-添加日志控制文件" class="headerlink" title="9. 添加日志控制文件"></a>9. 添加日志控制文件</h4><p>MyBatis 使用 Log4j 进行日志处理，而 Login4j2 对其支持并不好，所以在 MyBatis 中需要将 log4j.properties 放入到项目的 src 目录下。</p>
<p>若将日志级别设置为 debug，则可以显示出所执行的 SQL 语句、参数值、对 DB 的影响条数等信息。若将级别设置为 trace，则还可显示出查询出的每条记录的每个字段名及值。</p>
<blockquote>
<p>注意:<br>若日志对象使用根日志对象 rootLogger，则会输出太多的信息。在 MyBatis 中，可以指定要输出日志的工作空间 namespace 的名字。此时，只会输出该 namespace 下执行的 SQL 的日志内容。</p>
</blockquote>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">#<span class="number">#def</span>ine <span class="selector-tag">a</span> logger</span><br><span class="line">log4j<span class="selector-class">.logger</span><span class="selector-class">.test</span>=debug,console</span><br></pre></td></tr></table></figure>

<h4 id="10-运行结果"><a href="#10-运行结果" class="headerlink" title="10. 运行结果"></a>10. 运行结果</h4><img src="/2019/07/31/MyBatis入门/mybatis04.jpg">


<h3 id="使用工具类"><a href="#使用工具类" class="headerlink" title="使用工具类"></a>使用工具类</h3><p>由于每一次执行 SqlSession 的方法，均需首先获取到该对象。而 SqlSession 对象的获取又相对比较繁琐，所以，可以将获取 SqlSession 对象定义为一个工具类方法。</p>
<p>SqlSession 对象是通过 SqlSessionFactory 对象创建的。由于 SqlSessionFactory 类为重量级对象，且为线程安全的，所以可以将 SqlSessionFactory 对象定义为单例的。</p>
<h4 id="1-创建工具类"><a href="#1-创建工具类" class="headerlink" title="1. 创建工具类"></a>1. 创建工具类</h4><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">package com.huang.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisUtil</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="type">SqlSessionFactory</span> factory;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="type">SqlSession</span> getSqlSession() &#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			</span><br><span class="line">			<span class="keyword">if</span> (factory == null) &#123;</span><br><span class="line">				<span class="comment">//读取主配置文件</span></span><br><span class="line">				<span class="type">InputStream</span> inputStream = <span class="type">Resources</span>.getResourceAsStream(<span class="string">"mybatis.xml"</span>);</span><br><span class="line">				<span class="comment">//创建SqlSession工厂</span></span><br><span class="line">				factory = new <span class="type">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line">				</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; <span class="keyword">catch</span> (<span class="type">IOException</span> e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> factory.openSession();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-修改-Dao-接口的实现类"><a href="#2-修改-Dao-接口的实现类" class="headerlink" title="2. 修改 Dao 接口的实现类"></a>2. 修改 Dao 接口的实现类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huang.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.huang.beans.Student;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentDaoImpl</span> <span class="keyword">implements</span> <span class="title">IStudentDao</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> SqlSession sqlSession;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertStu</span><span class="params">(Student student)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			sqlSession = MyBatisUtil.getSqlSession();</span><br><span class="line">			<span class="comment">//操作</span></span><br><span class="line">			sqlSession.insert(<span class="string">"insertStudent"</span>,student);</span><br><span class="line">			<span class="comment">//SqlSession提交</span></span><br><span class="line">			sqlSession.commit();</span><br><span class="line">		&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">			<span class="comment">//SqlSession关闭，添加了close()不用作事务回滚</span></span><br><span class="line">			<span class="keyword">if</span> (sqlSession != <span class="keyword">null</span>) </span><br><span class="line">				sqlSession.close();</span><br><span class="line">			</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="从属性文件中读取-DB-连接四要素"><a href="#从属性文件中读取-DB-连接四要素" class="headerlink" title="从属性文件中读取 DB 连接四要素"></a>从属性文件中读取 DB 连接四要素</h3><p>为了方便对数据库连接的管理， DB 连接四要素数据一般都是存放在一个专门的属性文件中的。 MyBatis 主配置文件需要从这个属性文件中读取这些数据。</p>
<h4 id="1-定义属性文件"><a href="#1-定义属性文件" class="headerlink" title="1. 定义属性文件"></a>1. 定义属性文件</h4><p>在 src 下定义属性文件 jdbc.properties。</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">jdbc.driver</span>=com.mysql.jdbc.Driver</span><br><span class="line"><span class="attr">jdbc.url</span>=jdbc:mysql://localhost:<span class="number">3306</span>/test</span><br><span class="line"><span class="attr">jdbc.user</span>=root</span><br><span class="line"><span class="attr">jdbc.password</span>=<span class="number">123456</span></span><br></pre></td></tr></table></figure>

<h4 id="2-修改主配置文件"><a href="#2-修改主配置文件" class="headerlink" title="2. 修改主配置文件"></a>2. 修改主配置文件</h4><p>对主配置文件，第一，需要注册属性文件。第二，需要从属性文件中通过 key，将其 value 读取出来。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 注册属性文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">"jdbc.properties"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="主配置文件详解"><a href="#主配置文件详解" class="headerlink" title="主配置文件详解"></a>主配置文件详解</h2><p>主配置文件名可以随意命名，其主要完成以下几个功能：<br>（1）注册存放 DB 连接四要素的属性文件<br>（2）注册实体类的全限定性类名的别名<br>（3）配置 MyBatis 运行环境，即数据源与事务管理器<br>（4）注册映射文件</p>
<h3 id="注册-DB-连接四要素属性文件"><a href="#注册-DB-连接四要素属性文件" class="headerlink" title="注册 DB 连接四要素属性文件"></a>注册 DB 连接四要素属性文件</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 注册DB连接四要素属性文件 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">"jdbc.properties"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="指定实体类全限定性类名的别名"><a href="#指定实体类全限定性类名的别名" class="headerlink" title="指定实体类全限定性类名的别名"></a>指定实体类全限定性类名的别名</h3><p>对于实体类的全限定性类名的别名指定方式，一般使用<package>方式。这样做的好处是会将该包中所有实体类的简单类名指定为别名，写法简单方便。</package></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 定义类型别名 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 将指定包中所有类的简单类名当作其别名 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.huang.beans"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>不过，还有另外的指定方式：通过<typealias>指定。</typealias></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">	    <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">"com.huang.beans.Student"</span> <span class="attr">alias</span>=<span class="string">"Student"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>type：全限定性类名  </li>
<li>alias：别名</li>
</ul>
<p>该方式的好处是，可以指定别名为简单类名以外的其它名称。当然，弊端是，必须逐个指定，比较繁琐。</p>
<p>另外，Mybatis 还提供了内置的类型别名：</p>
<p>基本类型：</p>
<table>
<thead>
<tr>
<th align="center">别名</th>
<th align="center">类型</th>
<th align="center">别名</th>
<th align="center">类型</th>
</tr>
</thead>
<tbody><tr>
<td align="center">int</td>
<td align="center">int</td>
<td align="center">integer</td>
<td align="center">int</td>
</tr>
<tr>
<td align="center">_short</td>
<td align="center">short</td>
<td align="center">_long</td>
<td align="center">long</td>
</tr>
<tr>
<td align="center">_double</td>
<td align="center">double</td>
<td align="center">_float</td>
<td align="center">float</td>
</tr>
<tr>
<td align="center">byte</td>
<td align="center">byte</td>
<td align="center">boolean</td>
<td align="center">boolean</td>
</tr>
</tbody></table>
<p>常用包类型别名：</p>
<table>
<thead>
<tr>
<th align="center">别名</th>
<th align="center">类型</th>
<th align="center">别名</th>
<th align="center">类型</th>
</tr>
</thead>
<tbody><tr>
<td align="center">string</td>
<td align="center">String</td>
<td align="center">byte</td>
<td align="center">Byte</td>
</tr>
<tr>
<td align="center">long</td>
<td align="center">Long</td>
<td align="center">short</td>
<td align="center">Short</td>
</tr>
<tr>
<td align="center">int</td>
<td align="center">Integer</td>
<td align="center">integer</td>
<td align="center">Integer</td>
</tr>
<tr>
<td align="center">double</td>
<td align="center">Double</td>
<td align="center">float</td>
<td align="center">Float</td>
</tr>
<tr>
<td align="center">boolean</td>
<td align="center">Boolean</td>
<td align="center">date</td>
<td align="center">Date</td>
</tr>
<tr>
<td align="center">object</td>
<td align="center">Object</td>
<td align="center">collection</td>
<td align="center">Collection</td>
</tr>
<tr>
<td align="center">list</td>
<td align="center">List</td>
<td align="center">arraylist</td>
<td align="center">ArrayList</td>
</tr>
<tr>
<td align="center">map</td>
<td align="center">Map</td>
<td align="center">hashmap</td>
<td align="center">HashMap</td>
</tr>
<tr>
<td align="center">iterator</td>
<td align="center">Iterator</td>
<td align="center"></td>
<td align="center"></td>
</tr>
</tbody></table>
<h3 id="配置-MyBatis-的运行环境"><a href="#配置-MyBatis-的运行环境" class="headerlink" title="配置 MyBatis 的运行环境"></a>配置 MyBatis 的运行环境</h3><p>配置 MyBatis 的运行环境，主要是配置数据源与事务管理器。</p>
<h4 id="1-lt-environments-gt-标签"><a href="#1-lt-environments-gt-标签" class="headerlink" title="1. &lt;environments/&gt;标签"></a>1. &lt;environments/&gt;标签</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 指定默认运行环境 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"onlineEM"</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 项目上线环境 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"onlineEM"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">&lt;!-- 项目测试环境 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"testEM"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在&lt;environments/&gt;中可包含多个运行环境&lt;environment/&gt;，但其 default 属性指定了当前 MyBatis 运行时所选择使用的环境。&lt;environment/&gt;的 id 属性为当前定义的运行环境的名称，可以任意命名。该名称会作为&lt;environments/&gt;的 default 属性的值出现。</p>
<h4 id="2-lt-transactionManager-gt-标签"><a href="#2-lt-transactionManager-gt-标签" class="headerlink" title="2. &lt;transactionManager/&gt;标签"></a>2. &lt;transactionManager/&gt;标签</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">   <span class="comment">&lt;!-- 使用jdbc事务管理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>该标签用于指定 MyBatis 所使用的事务管理器。 MyBatis 支持两种事务管理器类型： JDBC 与 MANAGED。  </p>
<ul>
<li>JDBC：使用 JDBC 的事务管理机制。即，通过 Connection 的 commit()方法提交，通过 rollback() 方法回滚。但默认情况下， MyBatis 将自动提交功能关闭了，改为了手动提交。即程序中需要显式的对事务进行提交或回滚。从日志的输出信息中可以看到。  </li>
<li>MANAGED：由容器来管理事务的整个生命周期（如 Spring 容器）。</li>
</ul>
<ol start="3">
<li><p>&lt;dataSource/&gt;标签<br>该标签用于配置 MyBatis 使用的数据源类型与数据库连接基本属性。常见有类型有： UNPOOLED、 POOLED、 JDNI 等。</p>
<ul>
<li>UNPOOLED ：不使用连接池。即每次请求，都会为其创建一个 DB 连接，使用完毕后，会马上将此连接关闭。  </li>
<li>POOLED：使用数据库连接池来维护连接。  </li>
<li>JNDI：数据源可以定义到应用的外部，通过 JNDI 容器获取数据库连接。</li>
</ul>
</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 数据库连接池 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/test"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"123456"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>若要从属性文件中读取 DB 连接四要素信息，则使用如下方式：</p>
<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 数据库连接池 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;jdbc.driverClassName&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;jdbc.url&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;jdbc.user&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;jdbc.password&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h3 id="指定映射文件"><a href="#指定映射文件" class="headerlink" title="指定映射文件"></a>指定映射文件</h3><p>指定映射文件的方式有多种。但所有的方式，都是指定在&lt;mappers/&gt;标签中的。</p>
<h4 id="lt-mapper-resource-””-gt-指定映射文件"><a href="#lt-mapper-resource-””-gt-指定映射文件" class="headerlink" title="&lt;mapper resource=””/&gt;指定映射文件"></a>&lt;mapper resource=””/&gt;指定映射文件</h4><p>若映射文件只有一个，则可直接使用如下形式：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 注册映射文件 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"com/huang/dao/mapper.xml"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>若映射文件有多个，则可使用如下形式：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 注册映射文件 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"com/huang/dao/mapper.xml"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"com/huang/dao/mapper2.xml"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="API-详解"><a href="#API-详解" class="headerlink" title="API 详解"></a>API 详解</h2><p>Dao 中需要通过 SqlSession 对象来操作 DB。而 SqlSession 对象的建，需要其工厂对象 SqlSessionFactory。 SqlSessionFactory 对象，需要通过其构建器对象 SqlSessionFactoryBuilder 的 build()方法，在加载了主配置文件的输入流对象后创建。</p>
<h3 id="Resources-类"><a href="#Resources-类" class="headerlink" title="Resources 类"></a>Resources 类</h3><p>Resources 类，顾名思义就是资源，用于读取资源文件。其有很多方法通过加载并解析资源文件，返回不同类型的 IO 流对象。</p>
<h3 id="SqlSessionFactoryBuilder-类"><a href="#SqlSessionFactoryBuilder-类" class="headerlink" title="SqlSessionFactoryBuilder 类"></a>SqlSessionFactoryBuilder 类</h3><p>SqlSessionFactory 的创建，需要使用 SqlSessionFactoryBuilder 对象的 build()方法。由于 SqlSessionFactoryBuilder 对象在创建完工厂对象后，就完成了其历史使命，即可被销毁。所以，一般会将该 SqlSessionFactoryBuilder 对象创建为一个方法内的局部对象，方法结束，对象销毁。</p>
<h3 id="SqlSessionFactory-接口"><a href="#SqlSessionFactory-接口" class="headerlink" title="SqlSessionFactory 接口"></a>SqlSessionFactory 接口</h3><p>SqlSessionFactory 接口对象是一个重量级对象（系统开销大的对象），是线程安全的， 所以一个应用只需要一个该对象即可。 创建 SqlSession 需要使用 SqlSessionFactory 接口的的 openSession()方法。</p>
<ul>
<li>openSession(true)：创建一个有自动提交功能的 SqlSession</li>
<li>openSession(false)：创建一个非自动提交功能的 SqlSession，需手动提交</li>
<li>openSession()：同 openSession(false)</li>
</ul>
<h3 id="SqlSession-接口"><a href="#SqlSession-接口" class="headerlink" title="SqlSession 接口"></a>SqlSession 接口</h3><p>SqlSession 接口对象用于执行持久化操作。一个 SqlSession 对应着一次数据库会话，一次会话以 SqlSession 对象的创建开始，以 SqlSession 对象的关闭结束。</p>
<p>SqlSession 接口对象是线程不安全的，所以每次数据库会话结束前，需要马上调用其 close()方法，将其关闭。再次需要会话，再次创建。 而在关闭时会判断当前的 SqlSession 是否被提交：若没有被提交，则会执行回滚后关闭；若已被提交，则直接将 SqlSession 关闭。所以， SqlSession 无需手工回滚。</p>
]]></content>
      <tags>
        <tag>MyBatis</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL数据库基础入门与实战</title>
    <url>/2019/07/28/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%E4%B8%8E%E5%AE%9E%E6%88%98/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="常见数据库"><a href="#常见数据库" class="headerlink" title="常见数据库"></a>常见数据库</h2><ul>
<li>关系型数据库：MySQL、Oracle、SQL Server、JDBC、DB2等。</li>
<li>非关系型数据库：Redis、MongoDB、NoSQL等。  </li>
</ul>
<a id="more"></a>

<h3 id="关系型数据库"><a href="#关系型数据库" class="headerlink" title="关系型数据库"></a>关系型数据库</h3><p>主要是用来描述实体与实体之间的关系，实实在在存在的事物。例如：男生和女生、学生和班级、员工和部门。</p>
<img src="/2019/07/28/MySQL数据库基础入门与实战/mysql01.jpg">

<h3 id="非关系型数据库"><a href="#非关系型数据库" class="headerlink" title="非关系型数据库"></a>非关系型数据库</h3><p>非关系型数据库严格上不是一种数据库，应该是一种数据结构化存储方法的集合，可以是文档或者键值对等。(本章主要讲关系型数据库)</p>
<h3 id="MySQL数据库服务器"><a href="#MySQL数据库服务器" class="headerlink" title="MySQL数据库服务器"></a>MySQL数据库服务器</h3><p>MySQL数据库：数据库管理软件。</p>
<p>服务器：就是一台电脑，这台安装相关的服务器软件，这些软件监听不同的端口号，根据用户访问的端口号，提供不同的服务。</p>
<p>数据库：通常一个应用对应一个数据库。</p>
<h2 id="MySQL的SQL语句"><a href="#MySQL的SQL语句" class="headerlink" title="MySQL的SQL语句"></a>MySQL的SQL语句</h2><blockquote>
<p>SQL：Structure Query Languages结构化查询语言</p>
</blockquote>
<ul>
<li><p>数据定义语言(DDL)：定义数据库，数据表的结构：create(创建)、drop(删除)、alter(修改)</p>
</li>
<li><p>数据操纵语言(DML)：主要是用来操作数据：insert(插入)、update(修改)、delete(删除)</p>
</li>
<li><p>数据控制语言(DCL)：定义访问权限，取消访问权限，安全设置 grant</p>
</li>
<li><p>数据查询语言(DQL)：select(查询) from子句 where子句</p>
</li>
</ul>
<h2 id="数据库的CRUD的操作"><a href="#数据库的CRUD的操作" class="headerlink" title="数据库的CRUD的操作"></a>数据库的CRUD的操作</h2><h3 id="前置知识："><a href="#前置知识：" class="headerlink" title="前置知识："></a>前置知识：</h3><ul>
<li><p>登录数据库：mysql –uroot –proot </p>
</li>
<li><p>退出数据库：exit、quit、\q、Ctrl+c </p>
</li>
<li><p>退出当前命令行：\c</p>
</li>
<li><p>复制命令行的内容：标记-&gt;选择内容-&gt;回车，不用Ctrl+C</p>
</li>
<li><p>导出数据库文件：</p>
</li>
</ul>
<ol>
<li>进入MySQL的安装目录的bin目录，如：D:\Program Files (x86)\MySQL\MySQLServer5.0\bin</li>
<li>用cmd打开</li>
<li>输入命令:mysqldump –h localhost –u root –p 数据库名字&gt;导出路径</li>
</ol>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">mysqldump –h localhost –u root –<span class="selector-tag">p</span> worker&gt;e:worker.sql</span><br></pre></td></tr></table></figure>

<ul>
<li>启动MySQL服务：net start mysql  </li>
<li>关闭MySQL服务：net stop mysql </li>
</ul>
<h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库:"></a>创建数据库:</h3><p>create database 数据库名字;</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> <span class="keyword">test</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>创建数据库的时候，指定字符集</li>
<li>create database 数据库的名字 character set 字符集;</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> <span class="keyword">test</span> <span class="built_in">character</span> <span class="keyword">set</span> utf8;</span><br></pre></td></tr></table></figure>

<p>create database 数据库的名字 character set 字符集 collate 校对规则;</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> <span class="keyword">test</span> <span class="built_in">character</span> utf8 <span class="keyword">collate</span> utf8_bin;</span><br></pre></td></tr></table></figure>

<h3 id="查看数据库："><a href="#查看数据库：" class="headerlink" title="查看数据库："></a>查看数据库：</h3><p>show create database 数据库名字;</p>
<p>查看所有数据库</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">databases</span>;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：三个文件不可删<br>information_schema 相关信息约束<br>performance_schema 相关表现约束<br>mysql</p>
</blockquote>
<h3 id="修改数据库的操作"><a href="#修改数据库的操作" class="headerlink" title="修改数据库的操作"></a>修改数据库的操作</h3><p>修改数据库的字符集</p>
<p>alter database 数据库的名字 character set 字符集</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">database</span> <span class="keyword">test</span> <span class="built_in">character</span> <span class="keyword">set</span> gbk;</span><br></pre></td></tr></table></figure>

<h3 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h3><p>drop database 数据库名字;</p>
<h3 id="切换数据库-选中数据库"><a href="#切换数据库-选中数据库" class="headerlink" title="切换数据库(选中数据库)"></a>切换数据库(选中数据库)</h3><p>use 数据库名字;</p>
<p>###查看当前正在使用的数据库</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">database</span> ();</span><br></pre></td></tr></table></figure>

<h2 id="表的CRUD操作"><a href="#表的CRUD操作" class="headerlink" title="表的CRUD操作"></a>表的CRUD操作</h2><p>###　创建表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> 数据库名字  </span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名(  </span><br><span class="line">列名 列的类型(长度) 约束,  </span><br><span class="line">列名<span class="number">2</span> 列的类型(长度) 约束  </span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>列的类型</p>
<ul>
<li>列的约束<br>主键约束：primary key<br>唯一约束：unique<br>非空约束：not null  </li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student(</span><br><span class="line"><span class="keyword">sid</span> <span class="built_in">int</span> primary <span class="keyword">key</span>,</span><br><span class="line">sname <span class="built_in">varchar</span>(<span class="number">10</span>),</span><br><span class="line">sex <span class="built_in">int</span>,</span><br><span class="line">age <span class="built_in">int</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h3 id="查看表"><a href="#查看表" class="headerlink" title="查看表"></a>查看表</h3><p>查看所有的表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">tables</span>;</span><br></pre></td></tr></table></figure>

<p>查看表的创建过程</p>
<p>show create table 表名;</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> student;</span><br></pre></td></tr></table></figure>

<p>查看表的结构</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">desc student<span class="comment">;</span></span><br></pre></td></tr></table></figure>

<h3 id="修改表"><a href="#修改表" class="headerlink" title="修改表"></a>修改表</h3><p>添加(add)，修改列(modify)，修改列名(change)，删除列(drop)，修改表名(rename)，修改表的字符集</p>
<ul>
<li>添加列(add)</li>
<li>alter table 表名 add 列名 列的类型 列的约束</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> student <span class="keyword">add</span> score <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>修改列(modify)</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> student <span class="keyword">modify</span> sex <span class="built_in">varchar</span>(<span class="number">2</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li>修改列名(change)</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> student <span class="keyword">change</span> sex gender <span class="built_in">varchar</span>(<span class="number">2</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li>删除列(drop)</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> student <span class="keyword">drop</span> score;</span><br></pre></td></tr></table></figure>

<ul>
<li>修改表名(rename)</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">rename</span> <span class="keyword">table</span> student <span class="keyword">to</span> students;</span><br></pre></td></tr></table></figure>

<ul>
<li>修改表的字符集</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> student <span class="built_in">character</span> <span class="keyword">set</span> gbk;</span><br></pre></td></tr></table></figure>

<h3 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> students;</span><br></pre></td></tr></table></figure>

<h3 id="移动列的顺序"><a href="#移动列的顺序" class="headerlink" title="移动列的顺序"></a>移动列的顺序</h3><p>alter table 表名 modify 字段名 字段类型 after 字段<br>alter table student modify sex int(11) after sname;(移动到sname后面)<br>alter table student modify sex int(11) first;(移动到最前面)  </p>
<h2 id="SQL完成对表中数据的CRUD的操作"><a href="#SQL完成对表中数据的CRUD的操作" class="headerlink" title="SQL完成对表中数据的CRUD的操作"></a>SQL完成对表中数据的CRUD的操作</h2><h3 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h3><p>insert into 表名(列名1,列名2,列名3) values(值1,值2,值3);</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student(<span class="keyword">sid</span>,sname,sex,age) <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">'zhangsan'</span>,<span class="number">1</span>,<span class="number">22</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li>简单写法(插入部分列列名不可省略)</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student <span class="keyword">values</span>(<span class="number">2</span>, <span class="string">'zhangsan'</span>,<span class="number">1</span>,<span class="number">22</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li>批量插入</li>
</ul>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">insert <span class="built_in">int</span>o student values</span><br><span class="line">(<span class="number">3</span>, <span class="string">'zhangsan'</span>,<span class="number">1</span>,<span class="number">22</span>),</span><br><span class="line">(<span class="number">4</span>, <span class="string">'zhangsan'</span>,<span class="number">1</span>,<span class="number">22</span>),</span><br><span class="line">(<span class="number">5</span>, <span class="string">'zhangsan'</span>,<span class="number">1</span>,<span class="number">22</span>);</span><br></pre></td></tr></table></figure>

<h3 id="查看表中数据"><a href="#查看表中数据" class="headerlink" title="查看表中数据"></a>查看表中数据</h3><figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> student;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>解决表中插入数据中文乱码的问题<br>1、    设置数据库的表字符编码为jbk；<br>2、    停止MySQL服务(net stop mysql)；<br>3、    找到MySQL的安装路径，找到my.ini文件，把default-character-set=utf8修改为default-character-set=gbk；<br>4、    启动MySQL服务(net start mysql)，重新登录数据库。</p>
</blockquote>
<h3 id="删除记录"><a href="#删除记录" class="headerlink" title="删除记录"></a>删除记录</h3><p>delete from 表名 [where 条件]</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> student <span class="keyword">where</span> <span class="keyword">sid</span>=<span class="number">5</span>;</span><br></pre></td></tr></table></figure>

<p>把表中数据全部删除</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> student;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>问题：<br>delete删除数据和truncate删除数据有什么差别？<br>delete:DML一条一条删除表中的数据<br>truncate:DDL先删除表再重建表<br>关于哪条执行效率高，具体要看表中的数据<br>如果数据比较少，delete比较高效<br>如果数据比较多，truncate比较高效</p>
</blockquote>
<h3 id="更新表记录"><a href="#更新表记录" class="headerlink" title="更新表记录"></a>更新表记录</h3><p>update 表名 set 列名=列的值，列名2=列名2的值 [where 条件]<br>如果参数是字符串、日期 要加上单引号</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">update</span> student <span class="keyword">set</span> sname= <span class="string">'张三'</span> <span class="keyword">where</span> <span class="keyword">sid</span>=<span class="number">5</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">update</span> student <span class="keyword">set</span> sname= <span class="string">'李四'</span> ,sex=<span class="string">'1'</span>;</span><br></pre></td></tr></table></figure>

<h3 id="查询记录"><a href="#查询记录" class="headerlink" title="查询记录"></a>查询记录</h3><p>select [distinct] [ * ] [列名,列名2] from 表名 [where 条件]</p>
<blockquote>
<p>说明：<br>distinct：去除重复的数据<br>select：选择显示哪些列的内容 </p>
</blockquote>
<h4 id="简单查询"><a href="#简单查询" class="headerlink" title="简单查询"></a>简单查询</h4><p>查询所有</p>
<p>select * from 表名</p>
<p>查询姓名和性别</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> sname,sex <span class="keyword">from</span> student;</span><br></pre></td></tr></table></figure>

<ul>
<li>别名查询，as的关键字，as关键字可以省略</li>
</ul>
<p>表别名<br>select s.sname,s.sex from student as s;(主要用在多表查询)</p>
<p>列别名<br>select sname as 姓名,age as 年龄 from student;</p>
<p>去掉重复的值</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> age <span class="keyword">from</span> student;</span><br></pre></td></tr></table></figure>

<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> age <span class="keyword">from</span> student;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>说明：<br>select： 运算查询：仅在查询结果上做了运算</p>
</blockquote>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * ,age*<span class="number">2</span> <span class="keyword">from</span> student;</span><br></pre></td></tr></table></figure>

<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * ,age*<span class="number">2</span> <span class="keyword">as</span> 两倍年龄 <span class="keyword">from</span> student;</span><br></pre></td></tr></table></figure>

<ul>
<li>条件查询[where关键字]</li>
</ul>
<p>查询年龄大于20的学生</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> student <span class="keyword">where</span> age &gt; <span class="number">20</span>;</span><br></pre></td></tr></table></figure>

<h5 id="where-后的条件写法"><a href="#where-后的条件写法" class="headerlink" title="where  后的条件写法"></a>where  后的条件写法</h5><blockquote>
<p>说明：<br>关系运算符：&gt; &gt;= &lt; &lt;= != &lt;&gt;<br>&lt;&gt; 不等于  标准SQL语法<br>!= 不等于  非标准SQL语法</p>
</blockquote>
<p>查询学生年龄不等于20的所有学生</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> student <span class="keyword">where</span> age &lt;&gt; <span class="number">20</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> student <span class="keyword">where</span> age != <span class="number">20</span>;</span><br></pre></td></tr></table></figure>

<p>查询年龄在20到30之间</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> student <span class="keyword">where</span> age &gt; <span class="number">20</span> <span class="keyword">and</span> age &lt; <span class="number">30</span>;</span><br></pre></td></tr></table></figure>

<p>使用 between… and… 查询</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> student <span class="keyword">where</span> age <span class="keyword">between</span> <span class="number">20</span> <span class="keyword">and</span> <span class="number">30</span>;</span><br></pre></td></tr></table></figure>

<p>逻辑运算：and , or , not</p>
<p>查询年龄小于15 或者年龄大于20</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> student <span class="keyword">where</span> age &lt; <span class="number">15</span> <span class="keyword">or</span> age &gt; <span class="number">20</span>;</span><br></pre></td></tr></table></figure>

<h4 id="复杂查询"><a href="#复杂查询" class="headerlink" title="复杂查询"></a>复杂查询</h4><ul>
<li>模糊查询</li>
</ul>
<p>—like：</p>
<p>_ :代表的是一个字符<br>% :代表的是多个字符</p>
<ol>
<li>查询姓名中带有 张 的所有学生  ‘%张%’</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> student <span class="keyword">where</span> sname <span class="keyword">like</span> <span class="string">'%张%'</span>;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>查询第二名字是三的所有学生  ‘_张%’</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> student <span class="keyword">where</span> sname <span class="keyword">like</span> <span class="string">'_张%'</span>;</span><br></pre></td></tr></table></figure>

<p>—in 在某个范围获得值</p>
<p>查询年龄在20,21,22里面的所有学生</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">select * <span class="keyword">from</span> student where age <span class="keyword">in</span> (<span class="number">20</span>,<span class="number">21</span>,<span class="number">22</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li>排序查询</li>
</ul>
<p>order by 关键字<br>asc :ascend 升序(默认的排序方式)<br>desc:descend 降序</p>
<p>查询所有学生的年龄，按照年龄进行排序</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> student <span class="keyword">order</span> <span class="keyword">by</span> age;</span><br></pre></td></tr></table></figure>

<p>查询所有学生的年龄，按照年龄进行降序排序</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> student <span class="keyword">order</span> <span class="keyword">by</span> age <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure>

<p>查询学生姓名有 张 的学生，按年龄排序</p>
<p>查询学生姓名有 张 的所有学生</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> student <span class="keyword">where</span> sname <span class="keyword">like</span> <span class="string">'%张%'</span>;</span><br></pre></td></tr></table></figure>

<p>进行排序得出结果</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> student <span class="keyword">where</span> sname <span class="keyword">like</span> <span class="string">'%张%'</span> <span class="keyword">order</span> <span class="keyword">by</span> age <span class="keyword">asc</span>;</span><br></pre></td></tr></table></figure>

<h3 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h3><p>sum(): 求和<br>avg(): 求平均值<br>count(): 统计数据<br>max(): 最大值<br>min(): 最小值</p>
<p>获得所有商品价格的总和</p>
<p>select sum(价格名称) from 表名;</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">sum</span>(price) <span class="keyword">from</span> product;</span><br></pre></td></tr></table></figure>

<p>获得所商品的平均价格</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">avg</span>(price) <span class="keyword">from</span> product;</span><br></pre></td></tr></table></figure>

<p>获得所有商品的个数</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(*) <span class="keyword">from</span> product;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：where 条件后面不能接聚合函数</p>
</blockquote>
<p>查出商品价格大于平均的所有商品</p>
<ol>
<li>查出所有商品</li>
</ol>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">from</span> product;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>大于平均价格</li>
</ol>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">avg</span>(price) <span class="keyword">from</span> product;</span><br></pre></td></tr></table></figure>

<p>如平均价格为100</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> product <span class="keyword">where</span> price &gt; <span class="number">100</span>;</span><br></pre></td></tr></table></figure>

<p>或者(子查询)</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> product <span class="keyword">where</span> price &gt; (<span class="keyword">select</span> <span class="built_in">avg</span>(price) <span class="keyword">from</span> product);</span><br></pre></td></tr></table></figure>

<h3 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h3><p>group by</p>
<p>根据cno字段分组，分组后统计商品的个数</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">select cno,count(*) <span class="keyword">from</span> product<span class="built_in"> group </span>by cno;</span><br></pre></td></tr></table></figure>

<p>根据cno分组，分组统计每组商品的平均价格，并且商品平均价格 &gt; 60</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">select cno,avg(price)</span><br><span class="line"><span class="keyword">from</span> product<span class="built_in"> group </span>by cno</span><br><span class="line">having avg(price) &gt; 60;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>说明：<br>having 关键字 可以接聚合函数 出现在分组之后<br>where 关键字 它是不可以接聚合函数 出现在在分组之前</p>
</blockquote>
<p>编写顺序</p>
<p> S..F..W..G..H..O</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">select.<span class="selector-class">.from</span>.<span class="selector-class">.where</span>.<span class="selector-class">.group</span> by.<span class="selector-class">.having</span>.<span class="selector-class">.order</span> by</span><br></pre></td></tr></table></figure>

<p>执行顺序</p>
<p>F..W..G..H..S..O</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">from.<span class="selector-class">.where</span>.<span class="selector-class">.group</span> by.<span class="selector-class">.having</span>.<span class="selector-class">.select</span>.<span class="selector-class">.order</span> by</span><br></pre></td></tr></table></figure>

<h2 id="SQL多表操作"><a href="#SQL多表操作" class="headerlink" title="SQL多表操作"></a>SQL多表操作</h2><p>SQL 会创建多表及多表的关系</p>
<blockquote>
</blockquote>
<p>需求:<br>分类表和商品表之间是不是有关系? 如果有关系,在数据库中如何表示这种关系</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">category</span>(</span><br><span class="line">cid <span class="built_in">int</span> primary <span class="keyword">key</span> auto_increment,</span><br><span class="line">cname <span class="built_in">varchar</span>(<span class="number">10</span>),</span><br><span class="line"> cdesc <span class="built_in">varchar</span>(<span class="number">31</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">category</span> <span class="keyword">values</span>(<span class="literal">null</span>,<span class="string">'手机数码'</span>,<span class="string">'电子产品,黑马生产'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">category</span> <span class="keyword">values</span>(<span class="literal">null</span>,<span class="string">'鞋靴箱包'</span>,<span class="string">'江南皮鞋厂倾情打造'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">category</span> <span class="keyword">values</span>(<span class="literal">null</span>,<span class="string">'香烟酒水'</span>,<span class="string">'黄鹤楼,茅台,二锅头'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">category</span> <span class="keyword">values</span>(<span class="literal">null</span>,<span class="string">'酸奶饼干'</span>,<span class="string">'娃哈哈,蒙牛酸酸乳'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">category</span> <span class="keyword">values</span>(<span class="literal">null</span>,<span class="string">'馋嘴零食'</span>,<span class="string">'瓜子花生,八宝粥,辣条'</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">category</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> cname,cdesc <span class="keyword">from</span> <span class="keyword">category</span>;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>所有商品<br>1.商品ID<br>2.商品名称<br>3.商品的价格<br>4.生产日期<br>5.商品分类ID</p>
</blockquote>
<p>商品和商品分类 : 所属关系</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> product(</span><br><span class="line">pid <span class="built_in">int</span> primary <span class="keyword">key</span> auto_increment,</span><br><span class="line">pname <span class="built_in">varchar</span>(<span class="number">10</span>),</span><br><span class="line">price <span class="keyword">double</span>,</span><br><span class="line">pdate <span class="built_in">timestamp</span>,</span><br><span class="line">cno <span class="built_in">int</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> product <span class="keyword">values</span>(<span class="literal">null</span>,<span class="string">'小米mix4'</span>,<span class="number">998</span>,<span class="literal">null</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> product <span class="keyword">values</span>(<span class="literal">null</span>,<span class="string">'锤子'</span>,<span class="number">2888</span>,<span class="literal">null</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> product <span class="keyword">values</span>(<span class="literal">null</span>,<span class="string">'阿迪王'</span>,<span class="number">99</span>,<span class="literal">null</span>,<span class="number">2</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> product <span class="keyword">values</span>(<span class="literal">null</span>,<span class="string">'老村长'</span>,<span class="number">88</span>,<span class="literal">null</span>,<span class="number">3</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> product <span class="keyword">values</span>(<span class="literal">null</span>,<span class="string">'劲酒'</span>,<span class="number">35</span>,<span class="literal">null</span>,<span class="number">3</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> product <span class="keyword">values</span>(<span class="literal">null</span>,<span class="string">'小熊饼干'</span>,<span class="number">1</span>,<span class="literal">null</span>,<span class="number">4</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> product <span class="keyword">values</span>(<span class="literal">null</span>,<span class="string">'卫龙辣条'</span>,<span class="number">1</span>,<span class="literal">null</span>,<span class="number">5</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> product <span class="keyword">values</span>(<span class="literal">null</span>,<span class="string">'旺旺大饼'</span>,<span class="number">1</span>,<span class="literal">null</span>,<span class="number">5</span>);</span><br></pre></td></tr></table></figure>

<h3 id="多表之间的关系如何来维护"><a href="#多表之间的关系如何来维护" class="headerlink" title="多表之间的关系如何来维护"></a>多表之间的关系如何来维护</h3><p>外键约束: foreign key</p>
<p>给product中的这个cno 添加一个外键约束</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> product <span class="keyword">add</span> <span class="keyword">foreign</span> <span class="keyword">key</span>(cno) <span class="keyword">references</span> <span class="keyword">category</span>(cid);</span><br></pre></td></tr></table></figure>

<h3 id="建数据库原则"><a href="#建数据库原则" class="headerlink" title="建数据库原则"></a>建数据库原则</h3><p>通常情况下,一个项目/应用建一个数据库</p>
<h4 id="多表之间的建表原则"><a href="#多表之间的建表原则" class="headerlink" title="多表之间的建表原则"></a>多表之间的建表原则</h4><ul>
<li>一对多 : 商品和分类<br>建表原则: 在多的一方添加一个外键,指向一的一方的主键</li>
<li>多对多: 老师和学生, 学生和课程<br>建表原则: 建立一张中间表,将多对多的关系,拆分成一对多的关系,中间表至少要有两个外键,分别指向原来的那两张表</li>
<li>一对一: 班级和班长, 公民和身份证, 国家和国旗</li>
</ul>
<h4 id="建表原则"><a href="#建表原则" class="headerlink" title="建表原则:"></a>建表原则:</h4><p>将一对一的情况,当作是一对多情况处理,在任意一张表添加一个外键,并且这个外键要唯一,指向另外一张表<br>直接将两张表合并成一张表<br>将两张表的主键建立起连接,让两张表里面主键相等<br>实际用途: 用的不是很多.(拆表操作)<br>相亲网站:<br>个人信息 : 姓名,性别,年龄,身高,体重,三围,兴趣爱好,(年收入,特长,学历, 职业, 择偶目标,要求)<br>拆表操作 : 将个人的常用信息和不常用信息,减少表的臃肿,</p>
<h4 id="网上商城表实例的分析"><a href="#网上商城表实例的分析" class="headerlink" title="网上商城表实例的分析:"></a>网上商城表实例的分析:</h4><p>用户购物流程(用户表、订单表、商品表、商品分类表) </p>
<p>用户表 (用户的ID,用户名,密码,手机)</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">user</span>(</span><br><span class="line">      	uid <span class="built_in">int</span> primary <span class="keyword">key</span> auto_increment,</span><br><span class="line">      	username <span class="built_in">varchar</span>(<span class="number">31</span>),</span><br><span class="line">      	<span class="keyword">password</span> <span class="built_in">varchar</span>(<span class="number">31</span>),</span><br><span class="line">      	phone  <span class="built_in">varchar</span>(<span class="number">11</span>)</span><br><span class="line">  	);</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span> <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">'zhangsan'</span>,<span class="string">'123'</span>,<span class="string">'13811118888'</span>);</span><br></pre></td></tr></table></figure>

<p>订单表 (订单编号,总价,订单时间 ,地址,外键用户的ID)</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> orders(</span><br><span class="line">    <span class="keyword">oid</span> <span class="built_in">int</span> primary <span class="keyword">key</span> auto_increment,</span><br><span class="line">    <span class="keyword">sum</span> <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">    otime <span class="built_in">timestamp</span>,</span><br><span class="line">    address <span class="built_in">varchar</span>(<span class="number">100</span>),</span><br><span class="line">    uno <span class="built_in">int</span>,</span><br><span class="line">    <span class="keyword">foreign</span> <span class="keyword">key</span>(uno) <span class="keyword">references</span> <span class="keyword">user</span>(uid)</span><br><span class="line">    );</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> orders <span class="keyword">values</span>(<span class="number">1</span>,<span class="number">200</span>,<span class="literal">null</span>,<span class="string">'黑马前台旁边小黑屋'</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> orders <span class="keyword">values</span>(<span class="number">2</span>,<span class="number">250</span>,<span class="literal">null</span>,<span class="string">'黑马后台旁边1702'</span>,<span class="number">1</span>);</span><br></pre></td></tr></table></figure>

<p>商品表 (商品ID, 商品名称,商品价格,外键cno)</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> product(</span><br><span class="line">    pid <span class="built_in">int</span> primary <span class="keyword">key</span> auto_increment,</span><br><span class="line">    pname <span class="built_in">varchar</span>(<span class="number">10</span>),</span><br><span class="line">    price <span class="keyword">double</span>,</span><br><span class="line">    cno <span class="built_in">int</span>,</span><br><span class="line">    <span class="keyword">foreign</span> <span class="keyword">key</span>(cno) <span class="keyword">references</span> <span class="keyword">category</span>(cid)</span><br><span class="line">   );</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> product <span class="keyword">values</span>(<span class="literal">null</span>,<span class="string">'小米mix4'</span>,<span class="number">998</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> product <span class="keyword">values</span>(<span class="literal">null</span>,<span class="string">'锤子'</span>,<span class="number">2888</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> product <span class="keyword">values</span>(<span class="literal">null</span>,<span class="string">'阿迪王'</span>,<span class="number">99</span>,<span class="number">2</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> product <span class="keyword">values</span>(<span class="literal">null</span>,<span class="string">'老村长'</span>,<span class="number">88</span>,<span class="number">3</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> product <span class="keyword">values</span>(<span class="literal">null</span>,<span class="string">'劲酒'</span>,<span class="number">35</span>,<span class="number">3</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> product <span class="keyword">values</span>(<span class="literal">null</span>,<span class="string">'小熊饼干'</span>,<span class="number">1</span>,<span class="number">4</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> product <span class="keyword">values</span>(<span class="literal">null</span>,<span class="string">'卫龙辣条'</span>,<span class="number">1</span>,<span class="number">5</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> product <span class="keyword">values</span>(<span class="literal">null</span>,<span class="string">'旺旺大饼'</span>,<span class="number">1</span>,<span class="number">5</span>);</span><br></pre></td></tr></table></figure>

<p>订单项: 中间表(订单ID,商品ID,商品数量,订单项总价)</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> orderitem(</span><br><span class="line">    ono <span class="built_in">int</span>,</span><br><span class="line">    pno <span class="built_in">int</span>,</span><br><span class="line">    <span class="keyword">foreign</span> <span class="keyword">key</span>(ono) <span class="keyword">references</span> orders(<span class="keyword">oid</span>),</span><br><span class="line">    <span class="keyword">foreign</span> <span class="keyword">key</span>(pno) <span class="keyword">references</span> product(pid),</span><br><span class="line">    ocount <span class="built_in">int</span>,</span><br><span class="line">    subsum <span class="keyword">double</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>给1号订单添加商品 200块钱的商品</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">insert <span class="built_in">int</span>o orderitem values(<span class="number">1</span>,<span class="number">7</span>,<span class="number">100</span>,<span class="number">100</span>);</span><br><span class="line">insert <span class="built_in">int</span>o orderitem values(<span class="number">1</span>,<span class="number">8</span>,<span class="number">101</span>,<span class="number">100</span>);</span><br></pre></td></tr></table></figure>

<p>给2号订单添加商品 250块钱的商品 ()</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">insert <span class="built_in">int</span>o orderitem values(<span class="number">2</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">35</span>);</span><br><span class="line">insert <span class="built_in">int</span>o orderitem values(<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">99</span>);</span><br></pre></td></tr></table></figure>

<p>商品分类表(分类ID,分类名称,分类描述)</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">category</span>(</span><br><span class="line">    cid <span class="built_in">int</span> primary <span class="keyword">key</span> auto_increment,</span><br><span class="line">    cname <span class="built_in">varchar</span>(<span class="number">15</span>),</span><br><span class="line">    cdesc <span class="built_in">varchar</span>(<span class="number">100</span>)</span><br><span class="line">    );</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">category</span> <span class="keyword">values</span>(<span class="literal">null</span>,<span class="string">'手机数码'</span>,<span class="string">'电子产品,黑马生产'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">category</span> <span class="keyword">values</span>(<span class="literal">null</span>,<span class="string">'鞋靴箱包'</span>,<span class="string">'江南皮鞋厂倾情打造'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">category</span> <span class="keyword">values</span>(<span class="literal">null</span>,<span class="string">'香烟酒水'</span>,<span class="string">'黄鹤楼,茅台,二锅头'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">category</span> <span class="keyword">values</span>(<span class="literal">null</span>,<span class="string">'酸奶饼干'</span>,<span class="string">'娃哈哈,蒙牛酸酸乳'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">category</span> <span class="keyword">values</span>(<span class="literal">null</span>,<span class="string">'馋嘴零食'</span>,<span class="string">'瓜子花生,八宝粥,辣条'</span>);</span><br></pre></td></tr></table></figure>

<h4 id="多表之间的关系如何维护"><a href="#多表之间的关系如何维护" class="headerlink" title="多表之间的关系如何维护"></a>多表之间的关系如何维护</h4><p>外键约束 : foreign key</p>
<p>添加一个外键: </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> product <span class="keyword">add</span> <span class="keyword">foreign</span> <span class="keyword">key</span>(cno)  <span class="keyword">references</span> <span class="keyword">category</span>(cid);</span><br></pre></td></tr></table></figure>

<p>删除的时候, 先删除外键关联的所有数据,再才能删除分类的数据</p>
<h5 id="建表原则-1"><a href="#建表原则-1" class="headerlink" title="建表原则"></a>建表原则</h5><p>一对多:<br>建表原则: 在多的一方增加一个外键,指向一的一方</p>
<p>多对多:<br>建表原则: 将多对多转成一对多的关系,创建一张中间表</p>
<p>一对一: 不常用, 拆表操作<br>建表原则: 将两张表合并成一张表<br>将两张表的主键建立起关系<br>将一对一的关系当作一对多的关系去处理</p>
<p>主键约束:<br>默认就是不能为空, 唯一<br>外键都是指向另外一张表的主键<br>主键一张表只能有一个</p>
<h5 id="唯一约束"><a href="#唯一约束" class="headerlink" title="唯一约束"></a>唯一约束</h5><p>列面的内容, 必须是唯一, 不能出现重复情况, 为空<br>唯一约束不可以作为其它表的外键<br>可以有多个唯一约束</p>
<p>一对多 : 建表原则: 在多的一方添加一个外键,指向一的一方<br>　<br>多对多: 建表原则:　　<br>拆成一对多　　<br>创建一张中间表, 至少要有两个外键, 指向原来的表</p>
<p>一对一: 建表原则: 合并一张表, 将主键建立关系 , 将它当作一对多的情况来处理</p>
<h3 id="交叉连接查询-笛卡尔积"><a href="#交叉连接查询-笛卡尔积" class="headerlink" title="交叉连接查询(笛卡尔积)"></a>交叉连接查询(笛卡尔积)</h3><figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> product;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">category</span>;</span><br></pre></td></tr></table></figure>

<p>笛卡尔积 ,查出来是两张表的乘积 ,查出来的结果没有意义</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> product,<span class="keyword">category</span>;</span><br></pre></td></tr></table></figure>

<h3 id="过滤出有意义的数据"><a href="#过滤出有意义的数据" class="headerlink" title="过滤出有意义的数据"></a>过滤出有意义的数据</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> product,<span class="keyword">category</span> <span class="keyword">WHERE</span> cno=cid;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> product <span class="keyword">AS</span> p,<span class="keyword">category</span> <span class="keyword">AS</span> c <span class="keyword">WHERE</span> p.cno=c.cid;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> product p,<span class="keyword">category</span> c <span class="keyword">WHERE</span> p.cno=c.cid;</span><br></pre></td></tr></table></figure>

<p>数据准备</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> product <span class="keyword">VALUES</span>(<span class="literal">NULL</span>,<span class="string">'耐克帝'</span>,<span class="number">10</span>,<span class="literal">NULL</span>);</span><br></pre></td></tr></table></figure>

<h3 id="内连接查询"><a href="#内连接查询" class="headerlink" title="内连接查询"></a>内连接查询</h3><p>隐式内链接</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> product p,<span class="keyword">category</span> c <span class="keyword">WHERE</span> p.cno=c.cid;</span><br></pre></td></tr></table></figure>

<p>显示内链接</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> product p <span class="keyword">INNER</span> <span class="keyword">JOIN</span> <span class="keyword">category</span> c <span class="keyword">ON</span> p.cno=c.cid;</span><br></pre></td></tr></table></figure>

<ul>
<li>区别:</li>
</ul>
<ol>
<li>隐式内链接: 在查询出结果的基础上去做的WHERE条件过滤</li>
<li>显示内链接: 带着条件去查询结果, 执行效率要高</li>
</ol>
<p>左外连接<br>  左外连接,会将左表中的所有数据都查询出来, 如果右表中没有对应的数据,用NULL代替</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> product p <span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> <span class="keyword">category</span> c <span class="keyword">ON</span> p.cno=c.cid;</span><br></pre></td></tr></table></figure>

<p>准备工作</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">category</span> <span class="keyword">VALUES</span>(<span class="number">100</span>,<span class="string">'电脑办公'</span>,<span class="string">'电脑叉叉差'</span>);</span><br></pre></td></tr></table></figure>

<p>右外连接: 会将右表所有数据都查询出来, 如果左表没有对应数据的话, 用NULL代替</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> product p <span class="keyword">RIGHT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> <span class="keyword">category</span> c <span class="keyword">ON</span> p.cno=c.cid;</span><br></pre></td></tr></table></figure>

<h3 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h3><blockquote>
<p>每页数据数据3<br>起始索引从0<br>第1页: 0<br>第2页: 3<br>起始索引: index 代表显示第几页 页数从1开始<br>每页显示3条数据</p>
</blockquote>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">startIndex  = (index<span class="number">-1</span>)*<span class="number">3</span></span><br></pre></td></tr></table></figure>

<p>第一个参数是索引<br>第二个参数显示的个数</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> product <span class="keyword">limit</span> <span class="number">0</span>,<span class="number">3</span>;</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> product <span class="keyword">limit</span> <span class="number">3</span>,<span class="number">3</span>;</span><br></pre></td></tr></table></figure>

<h3 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h3><p>查询出(商品名称,商品分类名称)信息<br>查询分类名称为手机数码的所有商品</p>
<p>查询分类名为手机数码的ID</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">category</span> <span class="keyword">where</span> cname =<span class="string">'手机数码'</span>;</span><br></pre></td></tr></table></figure>

<p>得出ID为1的结果</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> product <span class="keyword">WHERE</span> cno = (<span class="keyword">SELECT</span> cid <span class="keyword">FROM</span> <span class="keyword">category</span> <span class="keyword">WHERE</span> cname=<span class="string">'手机数码'</span>);</span><br></pre></td></tr></table></figure>

<p>查询出(商品名称,商品分类名称)信息</p>
<p>左连接</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> p.pname,c.cname <span class="keyword">FROM</span> product p <span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> <span class="keyword">category</span> c <span class="keyword">ON</span> p.cno = c.cid;</span><br></pre></td></tr></table></figure>

<p>子查询</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> pname ,(<span class="keyword">SELECT</span> cname <span class="keyword">FROM</span> <span class="keyword">category</span> c <span class="keyword">WHERE</span>  p.cno=c.cid ) <span class="keyword">AS</span> 商品分类名称  <span class="keyword">FROM</span> product p;</span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>下面这张表是本章的主要内容</p>
<img src="/2019/07/28/MySQL数据库基础入门与实战/mysql02.png">


]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>SSM入门基础知识</title>
    <url>/2019/07/28/SSM%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="系统架构"><a href="#系统架构" class="headerlink" title="系统架构"></a>系统架构</h2><p>所谓系统架构是指，整合应用系统程序大的结构。经常提到的系统结构有两种：三层架构与 MVC。这两种结构既有区别，又有联系。但这两种结构的使用，均是为了降低系统模块间的耦合度。</p>
<a id="more"></a>

<h3 id="三层架构"><a href="#三层架构" class="headerlink" title="三层架构"></a>三层架构</h3><p>三层架构是指：视图层 View、服务层 Service 与持久层 Dao。 它们分别完成不同的功能。</p>
<ul>
<li>View 层：用于接收用户提交请求的代码在这里编写。</li>
<li>Service 层：系统的业务逻辑主要在这里完成。</li>
<li>Dao 层：直接操作数据库的代码，对数据库进行增删改查。</li>
</ul>
<h4 id="关系"><a href="#关系" class="headerlink" title="关系"></a>关系</h4><p>Service 层是建立在 Dao 层之上的，建立了 Dao 层后才可以建立 Service 层，而 Service 层又是在 Controller 层之下的，因而 Service 层应该既调用 Dao 层的接口，又要提供接口给 Controller 层的类来进行调用，它刚好处于一个中间层的位置。每个模型都有一个 Service 接口，每个接口分别封装各自的业务处理方法。</p>
<h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><p>为了更好的降低各层间的耦合度，在三层架构程序设计中，采用面向抽象编程。即上层<br>对下层的调用，是通过接口实现的。而下层对上层的真正服务提供者，是下层接口的实现类。<br>服务标准（接口）是相同的，服务提供者（实现类）可以更换。这就实现了层间解耦合。</p>
<blockquote>
<p>耦合性<br>耦合性也叫耦合度，是程序结构中各个模块之间相互关联的度量，它取决于各个模块之间接口的复杂程度调用模块的方式以及哪些信息通过接口。关联性越高，耦合度越高，后期维护成本就越大，因此在开发过程中要尽量避免代码耦合度。</p>
</blockquote>
<p>下面用一张图来表示三层架构的关系</p>
<img src="/2019/07/28/SSM入门基础知识/ssm01.jpg">


<h3 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h3><p>MVC，即 Model 模型、 View 视图，及 Controller 控制器。</p>
<ul>
<li>View： 视图，为用户提供使用界面，与用户直接进行交互。</li>
<li>Model： 模型，承载数据，并对用户提交请求进行计算的模块。其分为两类，一类称为<br>数据承载 Bean，一类称为业务处理 Bean。所谓数据承载 Bean 是指实体类，专门用户<br>承载业务数据的，如 Student、 User 等。而业务处理 Bean 则是指 Service 或 Dao 对象，<br>专门用于处理用户提交请求的。</li>
<li>Controller： 控制器，用于将用户请求转发给相应的 Model 进行处理，并根据 Model 的计算结果向用户提供相应响应。</li>
</ul>
<p>MVC 架构程序的工作流程：</p>
<ol>
<li>用户通过 View 页面向服务端提出请求，可以是表单请求、超链接请求、 Ajax 请求等。</li>
<li>服务端 Controller 控制器接收到请求后对请求进行解析，找到相应的 Model 对用户请<br>求进行处理。</li>
<li>Model 处理后，将处理结果再交给 Controller。</li>
<li>Controller 在接到处理结果后，根据处理结果找到要作为向客户端发回的响应 View 页<br>面。页面经渲染（数据填充）后，再发送给客户端。</li>
</ol>
<img src="/2019/07/28/SSM入门基础知识/ssm02.jpg">


<h3 id="MVC与三层架构的关系"><a href="#MVC与三层架构的关系" class="headerlink" title="MVC与三层架构的关系"></a>MVC与三层架构的关系</h3><p>MVC与三层架构很相似，但它们不一样。</p>
<h4 id="相同点："><a href="#相同点：" class="headerlink" title="相同点："></a>相同点：</h4><ol>
<li>分层、解耦</li>
<li>相同的设计理念，把视图设计与数据持久化进行分离，从而降低耦合性，易于扩展，提高团队开发效率。</li>
</ol>
<h4 id="不同点："><a href="#不同点：" class="headerlink" title="不同点："></a>不同点：</h4><ol>
<li>三层是基于业务逻辑来分的，而mMVC是基于页面来分的。</li>
<li>MVC模式是一种复合设计模式，一种解决方案。</li>
<li>三层是种软件架构，通过接口实现编程。</li>
<li>三层模式是体系结构模式，MVC是设计模式。</li>
<li>三层模式又可归于部署模式，MVC可归于表示模式。</li>
</ol>
<p>如图表示它们二者的关系</p>
<img src="/2019/07/28/SSM入门基础知识/ssm03.jpg">


<h3 id="SSM与三层架构的关系"><a href="#SSM与三层架构的关系" class="headerlink" title="SSM与三层架构的关系"></a>SSM与三层架构的关系</h3><p>SSM，即 SpringMVC、 Spring 与 MyBatis 三个框架。它们在三层架构中所处的位置是不同的，即它们在三层架构中的功能各不相同，各司其职。</p>
<ul>
<li>SpringMVC：作为 View 层的实现者，完成用户的请求接收功能。SpringMVC 的 Controller 作为整个应用的控制器，完成用户请求的转发及对用户的响应。</li>
<li>MyBatis：作为 Dao 层的实现者，完成对数据库的增、删、改、查功能。</li>
<li>Spring：以整个应用大管家的身份出现。整个应用中所有 Bean 的生命周期行为，均由Spring 来管理。即整个应用中所有对象的创建、初始化、销毁，及对象间关联关系的维<br>护，均由 Spring 进行管理。</li>
</ul>
<img src="/2019/07/28/SSM入门基础知识/ssm04.jpg">


<h2 id="环境设置"><a href="#环境设置" class="headerlink" title="环境设置"></a>环境设置</h2><p>解决乱码问题，可以在端口后面加上 URIEncoding=”UTF-8”，把8080改为80访问时可以不用输入端口号</p>
<h2 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h2><blockquote>
<p>理模式是指，为其他对象提供一种代理以控制对这个对象的访问。在某些情况下，一个对象不适合或者不能直接引用另一个对象，而代理对象可以在客户类和目标对象之间起到中介的作用。——百度百科《代理模式》</p>
</blockquote>
<p>换句话说， 使用代理对象，是为了在不修改目标对象的基础上， 增强主业务逻辑。<br>客户类真正的想要访问的对象是目标对象，但客户类真正可以访问的对象是代理对象。<br>客户类对目标对象的访问是通过访问代理对象来实现的。当然，代理类与目标类要实现同一个接口。</p>
<p>对于代理模式，需要注意以下几点：  </p>
<ol>
<li>代理类和目标类要实现同一个接口，即业务接口。  </li>
<li>客户类对目标类的调用均是通过代理类完成的。  </li>
<li>代理类的执行既执行了对目标类的增强业务逻辑，又调用了目标类的主业务逻辑。</li>
</ol>
<p>根据代理关系建立的时间不同，可以将代理分为两类：静态代理与动态代理。</p>
<h3 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h3><p>静态代理是指，代理类在程序运行前就已经定义好，其与目标类的关系在程序运行前就已经确立。(需要定义代理类)</p>
<h4 id="代理实现与解析"><a href="#代理实现与解析" class="headerlink" title="代理实现与解析"></a>代理实现与解析</h4><p>静态代理实现转账：</p>
<p>（1）定义业务接口 IAccountService，其中含有抽象方法 transfer()。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huang.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IAccountService</span> </span>&#123;</span><br><span class="line">	<span class="comment">//主业务逻辑:转账</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">transfer</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（2）定义目标类 AccountServiceImpl，该类实现了业务接口。在对接口方法的实现上，只实现主业务逻辑转账即可。这个方法称为目标方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huang.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">IAccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//目标方法</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transfer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"调用Dao层，完成转账业务。"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（3）定义代理类 AccountServiceImplProxy。这个类要实现 IAccount 接口。并且该代理类要将接口对象作为一个成员变量，还要定义一个带参的构造器，这个参数为接口对象。目的是，将目标对象引入代理类，以便代理类调用目标类的目标法。</p>
<figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huang.proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.huang.service.IAccountService;</span><br><span class="line"><span class="keyword">import</span> com.huang.service.AccountServiceImpl;</span><br><span class="line"></span><br><span class="line"><span class="comment">//代理类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImplProxy</span> <span class="keyword">implements</span> <span class="title">IAccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//声明业务接口对象</span></span><br><span class="line">	<span class="keyword">private</span> IAccountService <span class="keyword">target</span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">AccountServiceImplProxy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//业务接口对象作为构造器参数，用于接受目标对象</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">AccountServiceImplProxy</span><span class="params">(IAccountService <span class="keyword">target</span>)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.<span class="keyword">target</span> = <span class="keyword">target</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 代理方法，实现对目标方法的功能增强</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">transfer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">//此处为对目标类的增强</span></span><br><span class="line">		System.out.println(<span class="string">"对转账进行身份认证！"</span>);</span><br><span class="line">		<span class="keyword">target</span>.transfer();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（4）定义客户类 Client。在客户类中首先要创建目标对象，再创建代理对象，并使用标对象对其进行初始化。然后由代理对象来调用执行业务方法。</p>
<figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huang.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.huang.proxy.AccountServiceImplProxy;</span><br><span class="line"><span class="keyword">import</span> com.huang.service.AccountServiceImpl;</span><br><span class="line"><span class="keyword">import</span> com.huang.service.IAccountService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">//创建目标对象</span></span><br><span class="line">		IAccountService <span class="keyword">target</span> = <span class="keyword">new</span> AccountServiceImpl();</span><br><span class="line">		<span class="comment">//创建代理对象，并使用目标对象来初始化它</span></span><br><span class="line">		IAccountService service = <span class="keyword">new</span> AccountServiceImplProxy(<span class="keyword">target</span>);</span><br><span class="line">		<span class="comment">//此时执行的内容，就是对目标对象增加过的内容</span></span><br><span class="line">		service.transfer();</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果如下</p>
<img src="/2019/07/28/SSM入门基础知识/ssm06.jpg">

<h3 id="JDK-动态代理"><a href="#JDK-动态代理" class="headerlink" title="JDK 动态代理"></a>JDK 动态代理</h3><p>动态代理是指， 程序在整个运行过程中根本就不存在目标类的代理类，目标对象的代理对象只是由代理生成工具（如代理工厂类）在程序运行时由 JVM 根据反射等机制动态生成的。代理对象与目标对象的代理关系在程序运行时才确立。</p>
<p>对比静态代理，静态代理是指在程序运行前就已经定义好了目标类的代理类。代理类与目标类的代理关系在程序运行之前就确立了。</p>
<p>动态代理的实现方式常用的有两种：使用 JDK 的 Proxy，与通过 CGLIB 生成代理。</p>
<p>动态代理的实现方式常用的有两种：使用 JDK 的 Proxy，与通过 CGLIB 生成代理。</p>
<figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> newProxyInstance ( ClassLoader loader, Class&lt;?&gt;[] interfaces,InvocationHandler <span class="keyword">handler</span>)</span><br><span class="line"></span><br><span class="line">loader：目标类的类加载器，通过目标对象的反射可获取</span><br><span class="line">interfaces：目标类实现的接口数组，通过目标对象的反射可获取</span><br><span class="line"><span class="keyword">handler</span>：业务增强逻辑，需要再定义。</span><br></pre></td></tr></table></figure>

<p>InvocationHandler 是个接口，其具体介绍如下：<br>实现了 InvocationHandler 接口的类用于加强目标类的主业务逻辑。这个接口中有一个方法 invoke()，具体加强的代码逻辑就是定义在该方法中的。程序调用主业务逻辑时，会自动调用 invoke()方法。</p>
<p>invoke()方法的介绍如下：</p>
<figure class="highlight oxygene"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object invoke ( Object proxy, <span class="function"><span class="keyword">Method</span> <span class="title">method</span>, <span class="title">Object</span>[] <span class="title">args</span>)</span></span><br><span class="line"><span class="function"><span class="title">proxy</span>：代表生成的代理对象</span></span><br><span class="line"><span class="function"><span class="title">method</span>：代表目标方法</span></span><br><span class="line"><span class="function"><span class="title">args</span>：代表目标方法的参数</span></span><br></pre></td></tr></table></figure>

<p>由于该方法是由代理对象自动调用的，所以这三个参数的值不用程序员给出。</p>
<p>第二个参数为 Method 类对象，该类有一个方法也叫 invoke()，可以调用目标类的目标方法。这两个 invoke()方法，虽然同名，但无关。</p>
<figure class="highlight smali"><table><tr><td class="code"><pre><span class="line">public Object<span class="built_in"> invoke </span>( Object obj, Object... args)</span><br><span class="line">obj：表示目标对象</span><br><span class="line">args：表示目标方法参数，就是其上一层<span class="built_in"> invoke </span>方法的第三个参数</span><br></pre></td></tr></table></figure>

<p>该方法的作用是：调用执行 obj 对象所属类的方法，这个方法由其调用者 Method 对象确定。<br>在代码中，一般的写法为</p>
<figure class="highlight oxygene"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">method</span>.<span class="title">invoke</span><span class="params">(target, args)</span>;</span></span><br></pre></td></tr></table></figure>

<p>其中， method 为上一层 invoke 方法的第二个参数。这样，即可调用了目标类的目标方法。</p>
<h4 id="代理实现与解析-1"><a href="#代理实现与解析-1" class="headerlink" title="代理实现与解析"></a>代理实现与解析</h4><p>动态代理实现转账：</p>
<p>（1）定义业务接口 IAccounSevice，其中含有抽象方法 transfer()。</p>
<p>（2）定义目标类 AccountServiceImpl，该类实现了业务接口。在对接口方法的实现上，只实现主业务逻辑。这个方法称为目标方法。</p>
<p>以上两步与静态代理类第一二步中代码相同。</p>
<p>（3）定义主业务增强逻辑类 MyExtension，该类需实现接口 InvocationHandler。在该类中定义一个 Object 类型的成员变量，还要定义一个带参的构造器，这个参数为 Object 对象。目的是，将目标对象引入该类，以便通过反射调用目标方法。</p>
<figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huang.proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.huang.service.IAccountService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="comment">//代理类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyExtension</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//声明业务接口对象</span></span><br><span class="line">	<span class="keyword">private</span> IAccountService <span class="keyword">target</span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">MyExtension</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//业务接口对象作为构造器参数，用于接受目标对象</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">MyExtension</span><span class="params">(IAccountService <span class="keyword">target</span>)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.<span class="keyword">target</span> = <span class="keyword">target</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="function">Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">		<span class="comment">//增加主业务逻辑代码</span></span><br><span class="line">		System.out.println(<span class="string">"对转账用户进行身份认证"</span>);</span><br><span class="line">		<span class="comment">//无论业务方法有无参数，有无返回值，下面的写法均可兼顾</span></span><br><span class="line">		<span class="function"><span class="keyword">return</span> method.<span class="title">invoke</span><span class="params">(<span class="keyword">target</span>, args)</span></span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（4）定义客户类 Client。客户类中主要语句有三句：<br>A、定义目标对象。在生成代理对象时会需要目标对象对其初始化。<br>B、定义代理对象。需要注意的是，代理类 Proxy 会通过反射机制，自动实现 IAccount接口。代理对象需要使用目标对象对其进行初始化。<br>C、代理对象调用主业务方法。</p>
<figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huang.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.huang.proxy.MyExtension;</span><br><span class="line"><span class="keyword">import</span> com.huang.service.AccountServiceImpl;</span><br><span class="line"><span class="keyword">import</span> com.huang.service.IAccountService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">//创建目标对象</span></span><br><span class="line">		IAccountService <span class="keyword">target</span> = <span class="keyword">new</span> AccountServiceImpl();</span><br><span class="line">		<span class="comment">//创建代理对象，并使用目标对象来初始化它</span></span><br><span class="line">		IAccountService service = (IAccountService) Proxy.newProxyInstance(</span><br><span class="line">				<span class="keyword">target</span>.getClass().getClassLoader(), <span class="comment">//获取目标对象类加载器</span></span><br><span class="line">				<span class="keyword">target</span>.getClass().getInterfaces(),  <span class="comment">//获取目标类实现的所有接口</span></span><br><span class="line">				<span class="keyword">new</span> MyExtension(<span class="keyword">target</span>));					<span class="comment">//增强业务逻辑</span></span><br><span class="line">		<span class="comment">//此时执行的内容，就是对目标对象增加过的内容</span></span><br><span class="line">		service.transfer();</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="CGLIB-动态代理"><a href="#CGLIB-动态代理" class="headerlink" title="CGLIB 动态代理"></a>CGLIB 动态代理</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>使用 JDK 的 Proxy 实现代理，要求目标类与代理类实现相同的接口。若目标类不存在接口， 则无法使用该方式实现。</p>
<p>但对于无接口的类，要为其创建动态代理，就要使用 CGLIB 来实现。 CGLIB 代理的生成原理是生成目标类的子类，而子类是增强过的，这个子类对象就是代理对象。 所以， 使用CGLIB 生成动态代理，要求目标类必须能够被继承，即不能是 final 的类。</p>
<blockquote>
<p>CGLIB(Code Generation Library)是一个开源项目，是一个强大的、高性能的、高质量的代码生成类库。它可以在运行期扩展和增强 Java 类。 Hibernate 用它来实现持久对象的字节码的动态生成， Spring 用它来实现 AOP 编程。——百度百科《CGLIB》</p>
</blockquote>
<p>CGLIB 包的底层是通过使用一个小而快的字节码处理框架 ASM(Java 字节码操控框架)，来转换字节码并生成新的类。 CGLIB 是通过对字节码进行增强来生成代理的。</p>
<h4 id="代理实现与解析-2"><a href="#代理实现与解析-2" class="headerlink" title="代理实现与解析"></a>代理实现与解析</h4><p>Setp1：导入 CGLIB 的 Jar 包： cglib-full.jar。</p>
<p>Step2：定义目标类。</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line">package com.huang.service;</span><br><span class="line"><span class="comment">//目标类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SomeService</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//目标方法</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">doFirst</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">		System.<span class="keyword">out</span>.println(<span class="string">"执行了doFirst()方法"</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="string">"abcde"</span>;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//目标方法</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSecond</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">		System.<span class="keyword">out</span>.println(<span class="string">"执行了doSecond()方法"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Step3：创建代理类的工厂。该类要实现 MethodInterceptor 接口。</p>
<figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huang.factory;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.huang.service.SomeService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> net.sf.cglib.proxy.Enhancer;</span><br><span class="line"><span class="keyword">import</span> net.sf.cglib.proxy.MethodInterceptor;</span><br><span class="line"><span class="keyword">import</span> net.sf.cglib.proxy.MethodProxy;</span><br><span class="line"></span><br><span class="line"><span class="comment">//代理类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyCglibFactory</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> SomeService <span class="keyword">target</span>;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">MyCglibFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">target</span> = <span class="keyword">new</span> SomeService();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="function">SomeService <span class="title">myCglibCreator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">// 创建增强器对象</span></span><br><span class="line">		Enhancer enhancer = <span class="keyword">new</span> Enhancer();</span><br><span class="line">		<span class="comment">// 指定目标类，即父类</span></span><br><span class="line">		enhancer.setSuperclass(SomeService.class);</span><br><span class="line">		<span class="comment">// 设置回调接口对象</span></span><br><span class="line">		enhancer.setCallback(<span class="keyword">this</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">return</span> (SomeService) enhancer.create();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 回调方法</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> Object intercept(Object obj, Method method, Object[] args,</span><br><span class="line">			MethodProxy proxy) <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">		<span class="comment">// 调用目标方法</span></span><br><span class="line">		Object result = method.invoke(<span class="keyword">target</span>, args);</span><br><span class="line">		<span class="keyword">if</span> (result != <span class="keyword">null</span>) &#123;</span><br><span class="line">			result = ((String) result).toUpperCase();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> result;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Step4：创建测试类。</p>
<figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huang.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.huang.service.SomeService;</span><br><span class="line"><span class="keyword">import</span> com.huang.factory.MyCglibFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> void main(<span class="keyword">String</span>[] args) &#123;</span><br><span class="line">			SomeService service = <span class="keyword">new</span> <span class="type">MyCglibFactory</span>().myCglibCreator();</span><br><span class="line">			<span class="keyword">String</span> result = service.doFirst();</span><br><span class="line">			System.out.println(<span class="string">"result = "</span> + result);</span><br><span class="line">			service.doSecond(); </span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果如下</p>
<img src="/2019/07/28/SSM入门基础知识/ssm07.jpg">


<h4 id="方法回调设计模式"><a href="#方法回调设计模式" class="headerlink" title="方法回调设计模式"></a>方法回调设计模式</h4><p>在 Java 中，就是类 A 调用类 B 中的某个方法 b，然后类 B 又在某个时候反过来调用类 A中的某个方法 a，对于 A 来说，这个 a 方法便叫做回调方法。Java 的接口提供了一种很好的方式来实现方法回调。这个方式就是定义一个简单的接口，在接口之中定义一个我们希望回调的方法。 这个接口称为回调接口。</p>
<p>在前面的例子中，我们定义的 AccountServiceCglibProxyFactory 类就相当于前面所说的 A类，而 Enhancer 类则是 B 类。 A 类中调用了 Enhancer 类 setCallback(this)方法，并将回调对象 this 作为实参传递给了 Enhancer 类。 Enhancer 类在后续执行过程中，会调用 A 类中的 intercept()方法，这个 intercept()方法就是回调方法。</p>
<h2 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h2><p>适配器模式的定义是， Convert the interface of a class into another interface clients expect，将某个类的接口转换为接口客户所需的类型。 换句话说， 适配器模式解决的问题是， 使得原本由于接口不兼容而不能一起工作、不能统一管理的那些类可以在一起工作、可以进行统一管理。</p>
<p>举个例子：</p>
<p>需求：厨师的工作是 cook()，程序员的工作是 program()，司机的工作是 drive()，教师的工作是 teach()，不同的工种，其具体工作内容不同。现在程序要将这些（例如有 30 个不同工种）不同工种的工作内容全部输出。</p>
<p>解决方案一：逐个访问每个工种对象的相应工作方法。无法循环遍历，无法统一管理。<br>解决方案二：使用适配器设计模式，将这些不兼容的具体工作转换为一个统一的工作，实现循环遍历。</p>
<h3 id="基本元素定义"><a href="#基本元素定义" class="headerlink" title="基本元素定义"></a>基本元素定义</h3><p>这里举个适配器模式的例子：这里有厨师接口 ICooker、程序员接口 IProgrammer，分别用于定义他们各自工种的具体工作。然后又定义了全聚德的厨师 QjdCooker、京东的程序员 JdProgrammer。这些不同的工种所做的工作都各自是不同的，无法进行统一管理，协同工作。</p>
<p>所以，此时就需要定义一个员工适配器接口 IWorkerAdapter，用于将这些不同的工种进行统一管理。</p>
<h4 id="不使用适配器模式"><a href="#不使用适配器模式" class="headerlink" title="不使用适配器模式"></a>不使用适配器模式</h4><p>若不使用适配器模式，则调用者需要定义出所有的工种对象，然后逐个工种对象的工作方法进行调用。有 30 个工种，就应调用 30 个工作方法。很麻烦。</p>
<img src="/2019/07/28/SSM入门基础知识/ssm09.jpg" class="ssm08.jpg} 创建 Adapters 工程，下面用代码实现： （1）定义 ICooker undefined （2）定义 IProgrammer undefined （3）定义 QjdCooker undefined （4）定义 GjProgrammer undefined （5）不使用适配器模式的测试类定义为 undefined #### 定义一个适配器模式 这种方式类似于多功能充电器，一个电源插头上接着多种类型的充电接口。用户在使用时需要使用电器接口与多功能充电器上的充电接口逐个进行对比，接口匹配，则可以充电。 {% asset_img">


<p>修改代码如下：</p>
<p>（1）定义 IWorkerAdapter</p>
<figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huang.adapters;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IWorkerAdapter</span> </span>&#123;</span><br><span class="line">	<span class="comment">//为了兼顾所有工种员工，这里的参数必须为Object类型</span></span><br><span class="line">	<span class="keyword">String</span> work(Object worker);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（2）定义 WorkerAdapter</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huang.adapters.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.huang.adapters.IWorkerAdapter;</span><br><span class="line"><span class="keyword">import</span> com.huang.worker.ICooker;</span><br><span class="line"><span class="keyword">import</span> com.huang.worker.IProgrammer;</span><br><span class="line"></span><br><span class="line"><span class="comment">//适配器类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WorkerAdapter</span> <span class="keyword">implements</span> <span class="title">IWorkerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">work</span><span class="params">(Object worker)</span> </span>&#123;</span><br><span class="line">		String workContent = <span class="string">""</span>;</span><br><span class="line">		<span class="comment">//若传来的对象是厨师，则其调用其cook()方法</span></span><br><span class="line">		<span class="keyword">if</span> (worker <span class="keyword">instanceof</span> ICooker) &#123;</span><br><span class="line">			workContent = ((ICooker)worker).cook();</span><br><span class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span> (worker <span class="keyword">instanceof</span> IProgrammer) &#123;</span><br><span class="line">			workContent = ((IProgrammer)worker).program();</span><br><span class="line">			</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> workContent;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（3）定义测试类</p>
<figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huang.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.huang.adapters.IWorkerAdapter;</span><br><span class="line"><span class="keyword">import</span> com.huang.adapters.impl.WorkerAdapter;</span><br><span class="line"><span class="keyword">import</span> com.huang.worker.ICooker;</span><br><span class="line"><span class="keyword">import</span> com.huang.worker.IProgrammer;</span><br><span class="line"><span class="keyword">import</span> com.huang.worker.impl.GjProgrammer;</span><br><span class="line"><span class="keyword">import</span> com.huang.worker.impl.QjdCooker;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> void main(<span class="keyword">String</span>[] args) &#123;</span><br><span class="line">		ICooker qjdCooker = <span class="keyword">new</span> <span class="type">QjdCooker</span>(); </span><br><span class="line">		IProgrammer gjProgrammer = <span class="keyword">new</span> <span class="type">GjProgrammer</span>();</span><br><span class="line">		Object[] workers = &#123;qjdCooker,gjProgrammer&#125;;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 创建适配器对象</span></span><br><span class="line">		IWorkerAdapter adapter = <span class="keyword">new</span> <span class="type">WorkerAdapter</span>();</span><br><span class="line">		<span class="comment">// 循环遍历每个工种对象，让每个工种对象在适配器中逐个进行匹配</span></span><br><span class="line">		<span class="keyword">for</span> (Object worker : <span class="type">workers</span>) &#123;</span><br><span class="line">			<span class="keyword">String</span> workContent = adapter.work(worker);</span><br><span class="line">			System.out.println(workContent);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="为每个工种都定义一个适配器"><a href="#为每个工种都定义一个适配器" class="headerlink" title="为每个工种都定义一个适配器"></a>为每个工种都定义一个适配器</h4><p>为每一个工种定义一个适配器，其程序结构如下：</p>
<img src="/2019/07/28/SSM入门基础知识/ssm10.jpg">

<p>代码如下：</p>
<p>（1）修改 IWorkerAdapter</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huang.adapters;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IWorkerAdapter</span> </span>&#123;</span><br><span class="line">	<span class="comment">//为了兼顾所有工种员工，这里的参数必须为Object类型</span></span><br><span class="line">	<span class="function">String <span class="title">work</span><span class="params">(Object worker)</span></span>;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//判断当前适配器是否支持指定的工种对象</span></span><br><span class="line">	<span class="function"><span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(Object worker)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（2）定义 CookerAdapter</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huang.adapters.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.huang.adapters.IWorkerAdapter;</span><br><span class="line"><span class="keyword">import</span> com.huang.worker.ICooker;</span><br><span class="line"><span class="keyword">import</span> com.huang.worker.IProgrammer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CookerAdapter</span> <span class="keyword">implements</span> <span class="title">IWorkerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">work</span><span class="params">(Object worker)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> ((ICooker)worker).cook();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(Object worker)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> (worker <span class="keyword">instanceof</span> ICooker);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（3）定义 ProgrammerAdapter</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huang.adapters.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.huang.adapters.IWorkerAdapter;</span><br><span class="line"><span class="keyword">import</span> com.huang.worker.IProgrammer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProgrammerAdappter</span> <span class="keyword">implements</span> <span class="title">IWorkerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">work</span><span class="params">(Object worker)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> ((IProgrammer)worker).program();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(Object worker)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> ((worker <span class="keyword">instanceof</span> IProgrammer));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（4）定义测试类</p>
<figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huang.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.huang.adapters.IWorkerAdapter;</span><br><span class="line"><span class="keyword">import</span> com.huang.adapters.impl.CookerAdapter;</span><br><span class="line"><span class="keyword">import</span> com.huang.adapters.impl.ProgrammerAdappter;</span><br><span class="line"><span class="keyword">import</span> com.huang.worker.ICooker;</span><br><span class="line"><span class="keyword">import</span> com.huang.worker.IProgrammer;</span><br><span class="line"><span class="keyword">import</span> com.huang.worker.impl.GjProgrammer;</span><br><span class="line"><span class="keyword">import</span> com.huang.worker.impl.QjdCooker;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> void main(<span class="keyword">String</span>[] args) &#123;</span><br><span class="line">		ICooker qjdCooker = <span class="keyword">new</span> <span class="type">QjdCooker</span>(); </span><br><span class="line">		IProgrammer gjProgrammer = <span class="keyword">new</span> <span class="type">GjProgrammer</span>();</span><br><span class="line">		Object[] workers = &#123;qjdCooker,gjProgrammer&#125;;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 循环遍历每个工种对象，让每个工种对象在适配器中逐个进行匹配</span></span><br><span class="line">		<span class="keyword">for</span> (Object worker : <span class="type">workers</span>) &#123;</span><br><span class="line">			IWorkerAdapter adapter = getAdapter(worker);</span><br><span class="line">			System.out.println(adapter.work(worker));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//根据worker获取相应的适配器</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> IWorkerAdapter getAdapter(Object worker) &#123;</span><br><span class="line">		List&lt;IWorkerAdapter&gt; adapters = getAllAdapters();</span><br><span class="line">		<span class="keyword">for</span> (IWorkerAdapter adapter : <span class="type">adapters</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span> (adapter.supports(worker)) &#123;</span><br><span class="line">				<span class="keyword">return</span> adapter;</span><br><span class="line">				</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 获取所有的适配器</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> List&lt;IWorkerAdapter&gt; getAllAdapters() &#123;</span><br><span class="line">		List&lt;IWorkerAdapter&gt; adapters = <span class="keyword">new</span> <span class="type">ArrayList</span>&lt;&gt;();</span><br><span class="line">		adapters.add(<span class="keyword">new</span> <span class="type">CookerAdapter</span>());</span><br><span class="line">		adapters.add(<span class="keyword">new</span> <span class="type">ProgrammerAdappter</span>());</span><br><span class="line">		<span class="keyword">return</span> adapters;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="缺省适配器模式"><a href="#缺省适配器模式" class="headerlink" title="缺省适配器模式"></a>缺省适配器模式</h3><p>缺省适配器模式是由适配器模式简化而来， 省略了适配器模式中目标接口， 也就是源接口和目标接口相同， 源接口为接口， 目标接口为类。</p>
<p>典型的缺省适配器模式是 JavaEE 规范中的 Servlet 接口与 GenericServlet 抽象类。Servlet 接口中包含五个抽象方法，而其中的 service()方法才是用于实现业务逻辑的、必须要实现的方法，另外四个方法一般都是空实现，或简单实现。</p>
<p>GenericServlet 抽象类实现了 Servlet 接口的 service()方法以外的另外四个方法，所以自定义的 Servlet 只需要继承 GenericServlet 抽象类，实现 service()方法即可。无需再实现 Servlet 接口了。</p>
<h2 id="模板方法设计模式"><a href="#模板方法设计模式" class="headerlink" title="模板方法设计模式"></a>模板方法设计模式</h2><p>在现实生活中，完成某件事情是需要 n 多个固定步骤的。如“在淘宝网进行购物”这件事情的完成一般需要三个步骤：登录网站、挑选商品(抽象方法)、 付款。但对于登录网站与付款这两步，每个人几乎都是相同的操作。但不同的地方是，每个人所挑选的商品是不同的。</p>
<p>在软件开发过程中同样存在这样的情况。某类的某个方法的实现，需要几个固定步骤。在这些固定步骤中，对于该类的不同对象，有些步骤的实现是固定不的，有些步骤的实现是大相径庭的，有些步骤的实现是可变可不变的。对于这种情况，就适合使用模板方法设计模式编程。</p>
<p>模板方法设计模式的定义是：定义一个操作中某种算法的框架，而将一些步骤延迟到子类中。模板方法模式使得子类在不改变一个算法结构的前提下，对某些步骤实现个性化定义。</p>
<h3 id="模板方法程序构成"><a href="#模板方法程序构成" class="headerlink" title="模板方法程序构成"></a>模板方法程序构成</h3><p>在模板方法设计模式中，存在一个父类。其中包含两类方法：模板方法与步骤方法。</p>
<ol>
<li>模板方法：即实现某种算法的方法步骤。而这些步骤都是调用的步骤方法完的。  </li>
<li>步骤方法：即完成模板方法的每个阶段性方法。每个步骤方法完成某一特定的、完成总算法的一部分功能。</li>
</ol>
<p>步骤方法有三种类型：抽象方法、最终方法与钩子方法。</p>
<ol>
<li>抽象方法：是要求子类必须实现的方法，是完成模板方法的算法步骤中必须由子类完成的个性化定义。  </li>
<li>最终方法：是子类不能重写的方法，是若要完成模板方法的算法步骤，对于所有子类执行都一样的步骤。</li>
<li>钩子方法：是父类给出了默认实现，但子类也可以重写的方法。</li>
</ol>
<h3 id="程序举例"><a href="#程序举例" class="headerlink" title="程序举例"></a>程序举例</h3><p>模拟“淘宝购物”，创建 templateMethod 工程，代码如下：</p>
<p>（1）定义父类</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line">package com.huang.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Shopping</span> &#123;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//模板方法</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buyGoods</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">		userLogin();	<span class="comment">//用户登录</span></span><br><span class="line">		buy();			<span class="comment">//挑选商品</span></span><br><span class="line">		pay();			<span class="comment">//付款</span></span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//子类不能重写的方法</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> final <span class="keyword">void</span> <span class="title">userLogin</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">		System.<span class="keyword">out</span>.println(<span class="string">"用户登录"</span>);</span><br><span class="line">	&#125; </span><br><span class="line">		</span><br><span class="line">	<span class="comment">//子类必须实现</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">buy</span>(<span class="params"></span>)</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//钩子方法，子类可以重写</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pay</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">		System.<span class="keyword">out</span>.println(<span class="string">"使用银联支付"</span>);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（2）定义子类</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huang.service;</span><br><span class="line"></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">ShoesShopping</span> <span class="keyword">extends</span> <span class="title">Shopping</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	public void buy() &#123;</span><br><span class="line">		<span class="type">System</span>.out.println(<span class="string">"购买鸿星尔克运动鞋"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huang.service;</span><br><span class="line"></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">ClothesShopping</span> <span class="keyword">extends</span> <span class="title">Shopping</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	public void buy() &#123;</span><br><span class="line">		<span class="type">System</span>.out.println(<span class="string">"购买七匹狼男装"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	public void pay() &#123;</span><br><span class="line">		<span class="type">System</span>.out.println(<span class="string">"使用支付宝付款"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（3）定义测试类</p>
<figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huang.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.huang.service.ClothesShopping;</span><br><span class="line"><span class="keyword">import</span> com.huang.service.ShoesShopping;</span><br><span class="line"><span class="keyword">import</span> com.huang.service.Shopping;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> void main(<span class="keyword">String</span>[] args) &#123;</span><br><span class="line"></span><br><span class="line">		Shopping shoesShopping = <span class="keyword">new</span> <span class="type">ShoesShopping</span>();</span><br><span class="line">		shoesShopping.buyGoods();</span><br><span class="line">		System.out.println(<span class="string">"-----------------------"</span>);</span><br><span class="line">		Shopping clothesShopping = <span class="keyword">new</span> <span class="type">ClothesShopping</span>();</span><br><span class="line">		clothesShopping.buyGoods();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果如下：</p>
<img src="/2019/07/28/SSM入门基础知识/ssm11.jpg">


<h2 id="Junit测试"><a href="#Junit测试" class="headerlink" title="Junit测试"></a>Junit测试</h2><h3 id="Jar包的下载"><a href="#Jar包的下载" class="headerlink" title="Jar包的下载"></a>Jar包的下载</h3><p>关于Junit的Jar包下载，百度有很多的详细下载教程，这里不再赘述。</p>
<h3 id="测试类的创建"><a href="#测试类的创建" class="headerlink" title="测试类的创建"></a>测试类的创建</h3><p>对于测试类的创建有这样一些习惯：</p>
<ul>
<li>在项目中新建一个 source folder，并命名为 test，将来所有测试类均定义在这个目录中。  </li>
<li>对于测试类所在包，一般是被测类所在包的包名后加再加一个 test 子包。  </li>
<li>对于测试类类名，一般是被测类类名后加上 Test。</li>
</ul>
<p>测试类的创建常用的有两种方式：</p>
<h4 id="1-使用向导创建测试类"><a href="#1-使用向导创建测试类" class="headerlink" title="1. 使用向导创建测试类"></a>1. 使用向导创建测试类</h4><p>直接创建 JUnit Test Case。此时，会自动导入其需要的 Jar 包。</p>
<p>创建过程中，勾选上 setUp()与 tearDown()方法，这两个方法的作用是：</p>
<ul>
<li>setUp()：测试方法执行之前执行，主要用于测试前的初始化，如连接数据库等。</li>
<li>tearDown()：测试方法执行之后执行，主要用于资源释放，如关闭数据库连接等。</li>
<li>创建好后，直接在 setUp()与 tearDown()中编写初始化语句与资源释放语句即可。</li>
</ul>
<p>对于测试方法的命名， 一般是以小写 test 开头，该测试方法用于测试哪个方法，就将该方法名放于 test 之后。当然，首字母要大写。 如，要测试 modify()方法，则它的测试方法名一般为： testModify()。</p>
<h4 id="2-使用注解创建测试类"><a href="#2-使用注解创建测试类" class="headerlink" title="2. 使用注解创建测试类"></a>2. 使用注解创建测试类</h4><p>Step1：导入包需的 JUnit Jar 包<br>Step2：直接创建一个普通的 Java 类<br>Step3：在其中可以定义初始化方法与资源释放方法。方法签名要求： public void，无参。方法名随意。当然，方法名最好按照规范命名。<br>Step4：在方法前添加注解</p>
<p>添加@Before 则为初始化方法；<br>添加@After 则为资源释放方法；<br>添加@Test 则为测试方法。</p>
<h3 id="测试方法的运行"><a href="#测试方法的运行" class="headerlink" title="测试方法的运行"></a>测试方法的运行</h3><p>在测试方法的方法签名上右击，选择 Run As/JUnit Test</p>
<img src="/2019/07/28/SSM入门基础知识/ssm12.jpg">

<p>运行结果看到绿条，则说明运行成功；看到红条，说明运行出了问题。</p>
<img src="/2019/07/28/SSM入门基础知识/ssm13.jpg">

<img src="/2019/07/28/SSM入门基础知识/ssm14.jpg">


<h2 id="Log4j-与Log4j2"><a href="#Log4j-与Log4j2" class="headerlink" title="Log4j 与Log4j2"></a>Log4j 与Log4j2</h2><blockquote>
<p>一个完整的软件，日志是必不可少的。程序从开发、测试、维护、运行等环节，都需要向控制台或文件等位置输出大量信息 。这些信息的输出，在 很多时候是使 用 System.out.println() 无法完成的。</p>
</blockquote>
<p>日志信息根据用途与记录内容的不同，分为调试日志、运行日志、异常日志等。</p>
<p>用于日志记录的技术很多，如 jdk 的 logger 技术， apache 的 log4j、 log4j2 技术等。</p>
<p>Log4j 的全称为 Log for java，即，专门用于 java 语言的日志记录工具。其目前有两个版本： Log4j 与 Log4j2。</p>
<h3 id="Log4j基础"><a href="#Log4j基础" class="headerlink" title="Log4j基础"></a>Log4j基础</h3><h4 id="日志级别"><a href="#日志级别" class="headerlink" title="日志级别"></a>日志级别</h4><p>为了方便对于日志信息的输出显示，对日志内容进行了分级管理。 日志级别由高到低 ，共分 6 个级别： fatal(致命的)、 error、 warn、 info、 debug、 trace(堆栈)。</p>
<h4 id="日志输出控制文件"><a href="#日志输出控制文件" class="headerlink" title="日志输出控制文件"></a>日志输出控制文件</h4><p>Log4j 的日志输出控制文件，主要由三个部分构成：</p>
<ol>
<li>日志信息的输出位置：控制日志信息将要输出的位置，是控制台还是文件等。</li>
<li>日志信息的输出格式：控制日志信息的显示格式，即以怎样的字符串形式显示。</li>
<li>日志信息的输出级别： 控制日志信息的显示内容，即显示哪些级别的日志信息。</li>
</ol>
<h3 id="Log4j技术"><a href="#Log4j技术" class="headerlink" title="Log4j技术"></a>Log4j技术</h3><p>在 Java 代码中进行日志输出，需要用到 Logger 类的静态方法 getLogger()。</p>
<figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huang.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.log4j.Logger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">//创建日志记录对象Logger</span></span><br><span class="line">		Logger logger = Logger.getLogger(MyTest.class);</span><br><span class="line">		logger.fatal(<span class="string">"fatal msg"</span>);</span><br><span class="line">		logger.<span class="keyword">error</span>(<span class="string">"error msg"</span>);</span><br><span class="line">		logger.warn(<span class="string">"warn msg"</span>);</span><br><span class="line">		logger.info(<span class="string">"info msg"</span>);</span><br><span class="line">		logger.debug(<span class="string">"debug msg"</span>);</span><br><span class="line">		logger.trace(<span class="string">"trace msg"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果如下：</p>
<img src="/2019/07/28/SSM入门基础知识/ssm15.jpg">


<p>将来这些日志输出语句，会根据 log4j.properties 文件中日志级别的设置进行输出，会输出到指定位置。 其输出结果是：输出指定级别及其更高级别的信息。如指定 info 级别，则会输出 fatal、 error、warn、 info 级别的信息。</p>
<h4 id="日志输出控制文件分析"><a href="#日志输出控制文件分析" class="headerlink" title="日志输出控制文件分析"></a>日志输出控制文件分析</h4><p>日志属性文件 log4j.properties 是专门用于控制日志输出的。其主要进行三方面控制：</p>
<ul>
<li>输出位置：控制日志将要输出的位置，是控制台还是文件等。  </li>
<li>输出布局：控制日志信息的显示形式。  </li>
<li>输出级别：控制要输出的日志级别。</li>
</ul>
<p>日志属性文件由两个对象组成：日志附加器与根日志。</p>
<ul>
<li>根日志，即为 Java 代码中的日志记录器，其主要由两个属性构成：日志输出级别与日志附加器。  </li>
<li>日志附加器，则由日志输出位置定义，由其它很多属性进行修饰，如输出布局、文件位置、文件大小等。</li>
</ul>
<h5 id="定义日志附加器"><a href="#定义日志附加器" class="headerlink" title="定义日志附加器"></a>定义日志附加器</h5><p>所谓日志附加器，就是为日志记录器附加上很多其它设置信息。附加器的本质是一个接口，其定义语法为： log4j.appender.appenderName = 输出位置， appenderName 为自定义名称。</p>
<p>常用的附加器实现类如下：</p>
<ul>
<li>org.apache.log4j.ConsoleAppender： 日志输出到控制台  </li>
<li>org.apache.log4j.FileAppender： 日志输出到文件  </li>
<li>org.apache.log4j.RollingFileAppender： 当日志文件大小到达指定尺寸的时候将产生一个新的日志文件  </li>
<li>org.apache.log4j.DailyRollingFileAppender： 每天产生一个日志文件</li>
</ul>
<h5 id="修饰日志附加器"><a href="#修饰日志附加器" class="headerlink" title="修饰日志附加器"></a>修饰日志附加器</h5><p>所谓修饰日志附加器，就是为定义好的附加器添加一些属性，以控制到指定位置的输出。不同的附加器，其修饰属性不同。</p>
<h5 id="Log4j常用布局类型"><a href="#Log4j常用布局类型" class="headerlink" title="Log4j常用布局类型"></a>Log4j常用布局类型</h5><ul>
<li>org.apache.log4j.HTMLLayout： 网页布局， 以 HTML 表格形式布局  </li>
<li>org.apache.log4j.SimpleLayout： 简单布局， 包含日志信息的级别和信息字符串  </li>
<li>org.apache.log4j.PatternLayout： 匹配器布局， 可以灵活地指定布局模式。其主要是通过设置 PatternLayout 的 ConversionPattern 属性值来控制具 体输出格式的 。</li>
</ul>
<h5 id="配置根-Logger"><a href="#配置根-Logger" class="headerlink" title="配置根 Logger"></a>配置根 Logger</h5><p>配置 rootLogger，以便于代码加载来控制日志的输出。其语法为：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">log4j.rootLogger</span> = [ level ] , appenderName, …</span><br></pre></td></tr></table></figure>

<p>其中， level 是日志记录的优先级，分为 OFF、 FATAL、 ERROR、 WARN、 INFO、 DEBUG、ALL。 Log4j 建议只使用四个级别，优先级从高到低分别是 ERROR、 WARN、 INFO、 DEBUG。OFF 为关闭日志功能。</p>
<blockquote>
<p>说明：<br>低级别的可以显示高级别的，但高级别的不能显示低级别的。所以，级别越高，将来显示的信息就越少。</p>
</blockquote>
<h3 id="Log4j2-技术"><a href="#Log4j2-技术" class="headerlink" title="Log4j2 技术"></a>Log4j2 技术</h3><p>Log4j2，是对 Log4j 的升级，其在配置与使用上发生了较大变化。</p>
<p>log4j2 配置文件是 XML 文件，不再支持 properties 文件。默认的文件名为 log4j2.xml。其存放的位置为 classpath 中。</p>
<h4 id="代码中实现日志记录"><a href="#代码中实现日志记录" class="headerlink" title="代码中实现日志记录"></a>代码中实现日志记录</h4><p>在要输出日志的类中创建日志对象 Logger，并通过 Logger 的方法在代码中加入日志输出语句。该日志对象是通过静态类 LogManager 的 getLogger()方法获取的。</p>
<figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huang.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.LogManager;</span><br><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.Logger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">//创建日志对象Logger</span></span><br><span class="line">		Logger logger = LogManager.getLogger(MyTest.class);</span><br><span class="line">		logger.debug(<span class="string">"this debug msg"</span>);</span><br><span class="line">		logger.info(<span class="string">"this info msg"</span>);</span><br><span class="line">		logger.warn(<span class="string">"this warn msg"</span>);</span><br><span class="line">		logger.<span class="keyword">error</span>(<span class="string">"this error msg"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果如下：</p>
<img src="/2019/07/28/SSM入门基础知识/ssm16.jpg">

<blockquote>
<p>注意:<br> Logger 与 LogManager 均为 org.apache.logging.log4j 包中的类，非 org.apache.log4j 包中的。</p>
</blockquote>
<h4 id="日志输出控制文件分析-1"><a href="#日志输出控制文件分析-1" class="headerlink" title="日志输出控制文件分析"></a>日志输出控制文件分析</h4><p>Log4j2 配置文件是 XML 文件，不再支持 properties 文件。默认的文件名为 log4j2.xml。其存放的位置为 classpath 中。</p>
<p>若没有设置 log4j2.xml，则系统会使用默认的日志配置：只会输出到控制台 error 级别的信息。</p>
<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">status</span>=<span class="string">"OFF"</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">appenders</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">Console</span> <span class="attr">name</span>=<span class="string">"myConsole"</span> <span class="attr">target</span>=<span class="string">"SYSTEM_OUT"</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">PatternLayout</span></span></span></span><br><span class="line"><span class="xml">				pattern="[%-5p][%d</span><span class="template-variable">&#123;yyyy-MM-dd HH:mm:ss&#125;</span><span class="xml">] [%c %L] %m%n" /&gt;</span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;/<span class="name">Console</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">File</span> <span class="attr">name</span>=<span class="string">"myLogFile"</span> <span class="attr">fileName</span>=<span class="string">"log/test.log"</span> <span class="attr">append</span>=<span class="string">"true"</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">PatternLayout</span></span></span></span><br><span class="line"><span class="xml">				pattern="[%-5p][%d</span><span class="template-variable">&#123;yyyy-MM-dd HH:mm:ss&#125;</span><span class="xml">] [%c %L] %m%n" /&gt;</span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;/<span class="name">File</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">RollingFile</span> <span class="attr">name</span>=<span class="string">"myRollingFile"</span> <span class="attr">fileName</span>=<span class="string">"logs/app.log"</span></span></span></span><br><span class="line"><span class="xml">			filePattern="logs/$$</span><span class="template-variable">&#123;date:yyyy-MM&#125;</span><span class="xml">/app-%d</span><span class="template-variable">&#123;MM-dd-yyyy&#125;</span><span class="xml">-%i.log.gz"&gt;</span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">PatternLayout</span></span></span></span><br><span class="line"><span class="xml">				pattern="[%-5p][%d</span><span class="template-variable">&#123;yyyy-MM-dd HH:mm:ss&#125;</span><span class="xml">] [%c %L] %m%n" /&gt;</span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">SizeBasedTriggeringPolicy</span> <span class="attr">size</span>=<span class="string">"1KB"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;/<span class="name">RollingFile</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;/<span class="name">appenders</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">loggers</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="comment">&lt;!-- &lt;logger name="全限定类名或接口名" level="info"&gt; &lt;appender-ref ref="myConsole" </span></span></span><br><span class="line"><span class="xml">			/&gt; <span class="tag">&lt;/<span class="name">logger</span>&gt;</span> --&gt;</span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"trace"</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"myConsole"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="comment">&lt;!-- &lt;appender-ref ref="myLogFile" /&gt; &lt;appender-ref ref="myRollingFile" </span></span></span><br><span class="line"><span class="xml">				/&gt; --&gt;</span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;/<span class="name">root</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;/<span class="name">loggers</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>配置文件说明：</p>
<p>（1）&lt;configuration/&gt;标签<br><configuration>标签的 status 属性用于设置 Log4j2 自身运行的日志显示级别，一般为 OFF，不显示。 当然，也可以设置为 ERROR、 DEBUG 等其它级别。</configuration></p>
<p>（2）&lt;Console/&gt;标签<br><console>标签的 target 属性用于设置输出的目标形式，其值一般为：<br>SYSTEM_OUT 或 SYSTEM_ERR</console></p>
<img src="/2019/07/28/SSM入门基础知识/ssm17.jpg">

<p>（3）&lt;File/&gt;标签<br><file>标签的 fileName 属性用于设置文件的文件保存路径及文件名。如本例的意思是，日志文件名为 test.log，将其存放在当前项目的根目录下的 log 子目录中。</file></p>
<p>append 属性用于设置是否以追加方式将日志写入指定文件。</p>
<img src="/2019/07/28/SSM入门基础知识/ssm18.jpg">

<p>（4）&lt;RollingFile/&gt;标签<br>fileName 指定存放目录及第一个日志文件名。 filePattern 指定新创建的日志文件的文件名。本例还会对文件进行压缩。</p>
<img src="/2019/07/28/SSM入门基础知识/ssm19.jpg">

<p>（5）&lt;loggers/&gt;标签<br>用于配置根 Logger 对象，以指定所使用的日志记录器，及显示的级别。</p>
<p>其子标签<root>用于指定所使用的日志记录器。该子标签的属性 level 用于指定显示级别。而日志记录器是通过<root>的子标签<appender-ref>来引用<appenders>中定义好的记录器的。</appenders></appender-ref></root></root></p>
<p>需要注意的是，只要在<appenders>中定义了<file>、 <rollingfile>等，且在其中指定了日志存放的目录，那么这些目录就会自动创建。无论在<loggers>的<root>中是否声明使用它们。</root></loggers></rollingfile></file></appenders></p>
<img src="/2019/07/28/SSM入门基础知识/ssm20.jpg">


<p>&lt;\adfjdkf&gt;</p>
]]></content>
      <categories>
        <category>框架</category>
      </categories>
      <tags>
        <tag>SSM</tag>
      </tags>
  </entry>
  <entry>
    <title>Web服务技术——Tomcat</title>
    <url>/2019/07/27/Web%E6%9C%8D%E5%8A%A1%E6%8A%80%E6%9C%AF%E2%80%94%E2%80%94Tomcat/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h2><blockquote>
<p>其实服务器就是一台电脑。 配置比一般的电脑要好。</p>
</blockquote>
<a id="more"></a>

<h3 id="Web服务器软件"><a href="#Web服务器软件" class="headerlink" title="Web服务器软件"></a>Web服务器软件</h3><blockquote>
<p>客户端在浏览器的地址栏上输入地址 ，然后web服务器软件，接收请求，然后响应消息。<br>处理客户端的请求， 返回资源 | 信息。</p>
</blockquote>
<p> Web应用：需要服务器支撑</p>
<pre><code>服务器            所属公司
Tomcat-----------Apache
WebLogic---------BEA
WebSphere--------IBM  
IIS--------------微软</code></pre><h3 id="Tomcat安装"><a href="#Tomcat安装" class="headerlink" title="Tomcat安装"></a>Tomcat安装</h3><ol>
<li>直接解压 ，然后找到bin目录下的startup.bat文件启动。</li>
<li>启动之后，如果能够正常看到黑窗口，表明已经成功安装。</li>
</ol>
<img src="/2019/07/27/Web服务技术——Tomcat/tomcat01.jpg">

<ol start="3">
<li>为了确保万无一失， 最好在浏览器的地址栏上输入 ： <a href="http://localhost:8080" target="_blank" rel="noopener">http://localhost:8080</a> , 如果有看到如下内容就表明成功了。</li>
</ol>
<img src="/2019/07/27/Web服务技术——Tomcat/tomcat02.jpg">

<blockquote>
<p>如果双击了startup.bat,  看到一闪而过的情形，一般都是 JDK的环境变量没有配置。</p>
</blockquote>
<h3 id="Tomcat目录介绍"><a href="#Tomcat目录介绍" class="headerlink" title="Tomcat目录介绍"></a>Tomcat目录介绍</h3><pre><code>bin：包含了一些jar ,  bat文件 。  startup.bat

conf：tomcat的配置，如 server.xml  web.xml

lib：tomcat运行所需的jar文件

logs：运行的日志文件

temp：临时文件

webapps：发布到tomcat服务器上的项目，就存放在这个目录。    

work：jsp翻译成class文件存放地</code></pre><h2 id="如何把一个项目发布到Tomcat中"><a href="#如何把一个项目发布到Tomcat中" class="headerlink" title="如何把一个项目发布到Tomcat中"></a>如何把一个项目发布到Tomcat中</h2><blockquote>
<p>需求： 如何能让其他的电脑访问我这台电脑上的资源？</p>
</blockquote>
<ul>
<li>在电脑新建stu.xml文件，内容如下</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">person</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">name</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">age</span>&gt;</span>18<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">person</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="直接拷贝stu-xml文件到webapps-ROOT目录下，-在浏览器里面访问"><a href="#直接拷贝stu-xml文件到webapps-ROOT目录下，-在浏览器里面访问" class="headerlink" title="直接拷贝stu.xml文件到webapps/ROOT目录下， 在浏览器里面访问"></a>直接拷贝stu.xml文件到webapps/ROOT目录下， 在浏览器里面访问</h3><pre><code>默认访问方式：http://localhost:8080/stu.xml
可以使用IP地址访问：http://192.168.43.139:8080/stu.xml</code></pre><img src="/2019/07/27/Web服务技术——Tomcat/tomcat08.jpg">

<img src="/2019/07/27/Web服务技术——Tomcat/tomcat12.jpg">

<blockquote>
<p>注意：</p>
</blockquote>
<blockquote>
<ol>
<li>如果Tomcat在运行需要重新启动，否则会报404错误。  </li>
<li>需要把xml文件改为UTF-8编码，否则会报错。解决方法是使用记事本打开xml文件，选择文件——&gt;另存为，“编码”格式选则UTF-8，点击保存。</li>
</ol>
</blockquote>
<img src="/2019/07/27/Web服务技术——Tomcat/tomcat13.jpg">

<h3 id="在webaps下面新建一个文件夹xml-然后拷贝文件放置到这个文件夹中"><a href="#在webaps下面新建一个文件夹xml-然后拷贝文件放置到这个文件夹中" class="headerlink" title="在webaps下面新建一个文件夹xml  , 然后拷贝文件放置到这个文件夹中"></a>在webaps下面新建一个文件夹xml  , 然后拷贝文件放置到这个文件夹中</h3><pre><code>http://localhost:8080/xml/stu.xml
也可以使用IP地址访问：http://192.168.43.139:8080/xml/stu.xml</code></pre><img src="/2019/07/27/Web服务技术——Tomcat/tomcat11.jpg">

<blockquote>
<p>说明：</p>
</blockquote>
<blockquote>
<p><a href="http://localhost:8080" target="_blank" rel="noopener">http://localhost:8080</a> ： 其实对应的是到webapps/root<br><a href="http://localhost:8080/xml/" target="_blank" rel="noopener">http://localhost:8080/xml/</a> : 对应是 webapps/xml</p>
</blockquote>
<h3 id="配置虚拟路径-一"><a href="#配置虚拟路径-一" class="headerlink" title="配置虚拟路径(一)"></a>配置虚拟路径(一)</h3><ul>
<li>查看使用文档说明</li>
</ul>
<p>使用localhost：8080 打开tomcat首页， 在左侧找到tomcat的文档入口， 点击进去后， 在左侧接着找到 Context入口，点击进入。</p>
<img src="/2019/07/27/Web服务技术——Tomcat/tomcat03.jpg">
<img src="/2019/07/27/Web服务技术——Tomcat/tomcat04.jpg">
<img src="/2019/07/27/Web服务技术——Tomcat/tomcat05.jpg">
<img src="/2019/07/27/Web服务技术——Tomcat/tomcat06.jpg">

<pre><code>也可以输入地址访问：http://localhost:8080/docs/config/context.html</code></pre><ol>
<li><p>在conf/server.xml 找到host元素节点</p>
 <figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&lt;Host <span class="attribute">name</span>=<span class="string">"localhost"</span>  <span class="attribute">appBase</span>=<span class="string">"webapps"</span></span><br><span class="line">      <span class="attribute">unpackWARs</span>=<span class="string">"true"</span> <span class="attribute">autoDeploy</span>=<span class="string">"true"</span>&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>加入以下内容</p>
 <figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&lt;Context <span class="attribute">docBase</span>=<span class="string">"D:\xml02"</span> <span class="attribute">path</span>=<span class="string">"/a"</span>&gt;&lt;/Context&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在D盘新建xml02文件夹，在文件夹下新建person.xml文件，内容如下</p>
 <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">person</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">name</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">age</span>&gt;</span>18<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span>这里是虚拟路径<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">person</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>说明:</p>
</blockquote>
<p> 1). docBase：  项目的路径地址，如： D:\xml02\person.xml。<br> 2). path : 对应的虚拟路径 一定要以/打头。</p>
</li>
<li><p>在浏览器地址栏上输入：<a href="http://localhost:8080/a/person.xml" target="_blank" rel="noopener">http://localhost:8080/a/person.xml</a></p>
</li>
</ol>
<h3 id="配置虚拟路径-二"><a href="#配置虚拟路径-二" class="headerlink" title="配置虚拟路径(二)"></a>配置虚拟路径(二)</h3><ol>
<li><p>在tomcat/conf/catalina/localhost/ 文件夹下新建一个xml文件，名字可以自己定义。如person.xml。</p>
</li>
<li><p>在person.xml文件里面写入以下内容</p>
 <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version='1.0' encoding='utf-8'?&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">Context</span> <span class="attr">docBase</span>=<span class="string">"D:\xml02"</span>&gt;</span><span class="tag">&lt;/<span class="name">Context</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在浏览器上面访问：<a href="http://localhost:8080/person/person.xml" target="_blank" rel="noopener">http://localhost:8080/person/person.xml</a></p>
</li>
</ol>
<blockquote>
<p>注意：</p>
</blockquote>
<blockquote>
<p>XML文件的名字也就是项目部署成功后的web根路径，如定义这person.xml,那么后面的访问路径就是<a href="http://ip:port/person。" target="_blank" rel="noopener">http://ip:port/person。</a></p>
</blockquote>
<h3 id="给Eclipse配置Tomcat"><a href="#给Eclipse配置Tomcat" class="headerlink" title="给Eclipse配置Tomcat"></a>给Eclipse配置Tomcat</h3><ol>
<li>在server里面 右键新建一个服务器， 选择到Apache分类， 找到对应的Tomcat版本， 接着一步一步配置即可。</li>
<li>配置完毕后， 在server 里面， 右键刚才的服务器，然后Open  ， 找到上面的Server Location , 选择中间的 Use Tomcat installation…</li>
<li>创建Web工程， 在WebContent下定义html文件， 右键工程， run as server </li>
</ol>
<h2 id="程序架构"><a href="#程序架构" class="headerlink" title="程序架构"></a>程序架构</h2><ul>
<li>C/S(Client/Server)</li>
</ul>
<blockquote>
<p>QQ、微信、LOL</p>
</blockquote>
<p>优点：</p>
<pre><code>有一部分代码写在客户端， 用户体验比较好。 </code></pre><p>缺点： </p>
<pre><code>服务器更新，客户端也要随着更新。 占用资源大。 </code></pre><ul>
<li>B/S(Browser/Server)</li>
</ul>
<blockquote>
<p>网页游戏 ， WebQQ …</p>
</blockquote>
<p>优点： </p>
<pre><code>客户端只要有浏览器就可以了。     占用资源小， 不用更新。 </code></pre><p>缺点：</p>
<pre><code>用户体验不佳。</code></pre>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Web</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库连接技术——JDBC(Java DataBase Connectivity)</title>
    <url>/2019/07/26/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%8A%80%E6%9C%AF%E2%80%94%E2%80%94JDBC/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="为什么会出现JDBC"><a href="#为什么会出现JDBC" class="headerlink" title="为什么会出现JDBC"></a>为什么会出现JDBC</h3><blockquote>
<p>SUN公司提供的一种数据库访问规则、规范, 由于数据库种类较多，并且Java语言使用比较广泛，SUN公司就提供了一种规范，让其他的数据库提供商去实现底层的访问规则。 我们的Java程序只要使用SUN公司提供的JDBC驱动即可。</p>
</blockquote>
<a id="more"></a>

<h3 id="使用JDBC的基本步骤"><a href="#使用JDBC的基本步骤" class="headerlink" title="使用JDBC的基本步骤"></a>使用JDBC的基本步骤</h3><ol>
<li><p>注册驱动：</p>
 <figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="module-access"><span class="module"><span class="identifier">DriverManager</span>.</span></span>register<span class="constructor">Driver(<span class="params">new</span> <span class="params">com</span>.<span class="params">mysql</span>.<span class="params">jdbc</span>.Driver()</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>建立连接：参数一： 协议 + 访问的数据库 ， 参数二： 用户名 ， 参数三： 密码。</p>
 <figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="comment">//DriverManager.getConnection("jdbc:mysql://localhost/test?user=monty&amp;password=greatsqldb");  </span></span><br><span class="line">conn = <span class="module-access"><span class="module"><span class="identifier">DriverManager</span>.</span></span>get<span class="constructor">Connection(<span class="string">"jdbc:mysql://localhost/student"</span>, <span class="string">"root"</span>, <span class="string">"root"</span>)</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建statement：跟数据库打交道，一定需要这个对象。</p>
 <figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">st</span> = conn.createStatement()<span class="comment">;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>执行sql ，得到ResultSet：执行查询，得到结果集。</p>
 <figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">String sql</span> = <span class="string">"select * from t_stu"</span>;</span><br><span class="line"><span class="attribute">rs</span> = st.executeQuery(sql);</span><br></pre></td></tr></table></figure>
</li>
<li><p>遍历结果集：遍历查询每一条记录 。</p>
 <figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(rs.next<span class="literal">()</span>)&#123;</span><br><span class="line">	<span class="built_in">int</span> id = rs.get<span class="constructor">Int(<span class="string">"id"</span>)</span>;</span><br><span class="line">	String name = rs.get<span class="constructor">String(<span class="string">"name"</span>)</span>;</span><br><span class="line">	<span class="built_in">int</span> age = rs.get<span class="constructor">Int(<span class="string">"age"</span>)</span>;</span><br><span class="line">	<span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"id="</span>+id + <span class="string">"===name="</span>+name+<span class="string">"==age="</span>+age);   		</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>释放资源：</p>
 <figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (rs != <span class="literal">null</span>) &#123;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           rs.close();</span><br><span class="line">       &#125; <span class="keyword">catch</span> (SQLException sqlEx) &#123; &#125; <span class="comment">// ignore </span></span><br><span class="line">       rs = <span class="literal">null</span>;</span><br><span class="line">   &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="JDBC-工具类构建"><a href="#JDBC-工具类构建" class="headerlink" title="JDBC 工具类构建"></a>JDBC 工具类构建</h3><ol>
<li>资源释放工作的整合</li>
</ol>
<ol start="2">
<li><p>驱动防二次注册</p>
<p> 1). river 这个类里面有静态代码块，一上来就执行了，所以等同于我们注册了两次驱动。 其实没这个必要的。</p>
 <figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="module-access"><span class="module"><span class="identifier">DriverManager</span>.</span></span>register<span class="constructor">Driver(<span class="params">new</span> <span class="params">com</span>.<span class="params">mysql</span>.<span class="params">jdbc</span>.Driver()</span>);</span><br></pre></td></tr></table></figure>

<p> 2). 静态代码块 ——&gt;类加载了，就执行。</p>
 <figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">java.sql.<span class="module-access"><span class="module"><span class="identifier">DriverManager</span>.</span></span>register<span class="constructor">Driver(<span class="params">new</span> Driver()</span>);</span><br></pre></td></tr></table></figure>

<p> 3).最后形成以下代码即可。</p>
 <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">Class</span><span class="selector-class">.forName</span>("<span class="selector-tag">com</span><span class="selector-class">.mysql</span><span class="selector-class">.jdbc</span><span class="selector-class">.Driver</span>");</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用properties配置文件</p>
<p> 1). 在src底下声明一个文件 xxx.properties ，里面的内容如下：</p>
 <figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">driverClass</span>=com.mysql.jdbc.Driver</span><br><span class="line"><span class="attr">url</span>=jdbc:mysql://localhost/student</span><br><span class="line"><span class="attr">name</span>=root</span><br><span class="line"><span class="attr">password</span>=root</span><br></pre></td></tr></table></figure>

<p> 2). 在工具类里面，使用静态代码块，读取属性</p>
 <figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">static&#123;</span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">		<span class="comment">//创建一个属性配置对象</span></span><br><span class="line">		Properties properties = <span class="keyword">new</span> <span class="constructor">Properties()</span>;</span><br><span class="line">		InputStream is = <span class="keyword">new</span> <span class="constructor">FileInputStream(<span class="string">"jdbc.properties"</span>)</span>; <span class="comment">//对应文件位于工程根目录</span></span><br><span class="line">		 </span><br><span class="line">		<span class="comment">//使用类加载器，去读取src底下的资源文件。 后面在servlet  //对应文件位于src目录底下</span></span><br><span class="line">		<span class="comment">//InputStream is = JDBCUtil.class.getClassLoader().getResourceAsStream("jdbc.properties");</span></span><br><span class="line">		<span class="comment">//导入输入流。</span></span><br><span class="line">		properties.load(is);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//读取属性</span></span><br><span class="line">		driverClass = properties.get<span class="constructor">Property(<span class="string">"driverClass"</span>)</span>;</span><br><span class="line">		url = properties.get<span class="constructor">Property(<span class="string">"url"</span>)</span>;</span><br><span class="line">		name = properties.get<span class="constructor">Property(<span class="string">"name"</span>)</span>;</span><br><span class="line">		password = properties.get<span class="constructor">Property(<span class="string">"password"</span>)</span>;</span><br><span class="line">		</span><br><span class="line">	&#125; catch (Exception e) &#123;</span><br><span class="line">		e.print<span class="constructor">StackTrace()</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>​    </p>
<h3 id="数据库-SQL-的CRUD"><a href="#数据库-SQL-的CRUD" class="headerlink" title="数据库(SQL)的CRUD"></a>数据库(SQL)的CRUD</h3><ul>
<li><p>insert</p>
<pre><code>INSERT INTO t_stu (NAME , age) VALUES (&apos;wangqiang&apos;,28)

//INSERT INTO t_stu VALUES (NULL,&apos;wangqiang2&apos;,28)</code></pre>  <figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 获取连接对象</span></span><br><span class="line">conn = <span class="module-access"><span class="module"><span class="identifier">JDBCUtil</span>.</span></span>get<span class="constructor">Conn()</span>;</span><br><span class="line">   <span class="comment">// 2. 根据连接对象，得到statement</span></span><br><span class="line">st = conn.create<span class="constructor">Statement()</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3. 执行添加</span></span><br><span class="line">String sql = <span class="string">"insert into t_stu values(null , 'aobama' , 59)"</span>;</span><br><span class="line"><span class="comment">//影响的行数， ，如果大于0 表明操作成功。 否则失败</span></span><br><span class="line"><span class="built_in">int</span> result = st.execute<span class="constructor">Update(<span class="params">sql</span>)</span>;</span><br><span class="line">	</span><br><span class="line"><span class="keyword">if</span>(result &gt;<span class="number">0</span> )&#123;</span><br><span class="line">	<span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"添加成功"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">	<span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"添加失败"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>delete</p>
<pre><code>DELETE FROM t_stu WHERE id = 6</code></pre>  <figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 获取连接对象</span></span><br><span class="line">conn = <span class="module-access"><span class="module"><span class="identifier">JDBCUtil</span>.</span></span>get<span class="constructor">Conn()</span>;</span><br><span class="line"><span class="comment">// 2. 根据连接对象，得到statement</span></span><br><span class="line">st = conn.create<span class="constructor">Statement()</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3. 执行添加</span></span><br><span class="line">String sql = <span class="string">"delete from t_stu where name='aobama'"</span>;</span><br><span class="line"><span class="comment">//影响的行数， ，如果大于0 表明操作成功。 否则失败</span></span><br><span class="line"><span class="built_in">int</span> result = st.execute<span class="constructor">Update(<span class="params">sql</span>)</span>;</span><br><span class="line">	</span><br><span class="line"><span class="keyword">if</span>(result &gt;<span class="number">0</span> )&#123;</span><br><span class="line">	<span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"删除成功"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">	<span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"删除失败"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>query</p>
<pre><code>SELECT * FROM t_stu</code></pre>  <figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 获取连接对象</span></span><br><span class="line">conn = <span class="module-access"><span class="module"><span class="identifier">JDBCUtil</span>.</span></span>get<span class="constructor">Conn()</span>;</span><br><span class="line"><span class="comment">// 2. 根据连接对象，得到statement</span></span><br><span class="line">st = conn.create<span class="constructor">Statement()</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 执行sql语句，返回ResultSet</span></span><br><span class="line">String sql = <span class="string">"select * from t_stu"</span>;</span><br><span class="line">rs = st.execute<span class="constructor">Query(<span class="params">sql</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 遍历结果集</span></span><br><span class="line"><span class="keyword">while</span> (rs.next<span class="literal">()</span>) &#123;</span><br><span class="line">	String name = rs.get<span class="constructor">String(<span class="string">"name"</span>)</span>;</span><br><span class="line">	<span class="built_in">int</span> age = rs.get<span class="constructor">Int(<span class="string">"age"</span>)</span>;</span><br><span class="line"></span><br><span class="line">	<span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(name + <span class="string">"   "</span> + age);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>update</p>
<pre><code>UPDATE t_stu SET age = 38 WHERE id = 1;</code></pre>  <figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 获取连接对象</span></span><br><span class="line">conn = <span class="module-access"><span class="module"><span class="identifier">JDBCUtil</span>.</span></span>get<span class="constructor">Conn()</span>;</span><br><span class="line"><span class="comment">// 2. 根据连接对象，得到statement</span></span><br><span class="line">st = conn.create<span class="constructor">Statement()</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3. 执行添加</span></span><br><span class="line">String sql = <span class="string">"update t_stu set age = 26 where name ='qyq'"</span>;</span><br><span class="line"><span class="comment">//影响的行数， ，如果大于0 表明操作成功。 否则失败</span></span><br><span class="line"><span class="built_in">int</span> result = st.execute<span class="constructor">Update(<span class="params">sql</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(result &gt;<span class="number">0</span> )&#123;</span><br><span class="line">	<span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"更新成功"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">	<span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"更新失败"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="使用单元测试，测试代码"><a href="#使用单元测试，测试代码" class="headerlink" title="使用单元测试，测试代码"></a>使用单元测试，测试代码</h3><ol>
<li><p>定义一个类， TestXXX , 里面定义方法 testXXX.</p>
</li>
<li><p>添加Junit的支持。右键工程 — add Library — Junit — Junit4</p>
</li>
<li><p>在方法的上面加上注解 ， 其实就是一个标记。</p>
 <figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">testQuery</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>光标选中方法名字，然后右键执行单元测试。  或者是打开outline视图， 然后选择方法右键执行。</p>
</li>
</ol>
<h3 id="Dao模式"><a href="#Dao模式" class="headerlink" title="Dao模式"></a>Dao模式</h3><blockquote>
<p>Data Access Object 数据访问对象</p>
</blockquote>
<ol>
<li><p>新建一个dao的接口， 里面声明数据库访问规则</p>
 <figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义操作数据库的方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="symbol">UserDao</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 查询所有</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="built_in">void</span> findAll();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>新建一个dao的实现类，具体实现早前定义的规则</p>
 <figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">	<span class="built_in">public</span> <span class="keyword">class</span> UserDaoImpl implements UserDao&#123;</span><br><span class="line"></span><br><span class="line">	@Override</span><br><span class="line">	<span class="built_in">public</span> <span class="type">void</span> findAll() &#123;</span><br><span class="line">		<span class="keyword">Connection</span> conn = <span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">Statement</span> st = <span class="keyword">null</span>;</span><br><span class="line">		ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">		try &#123;</span><br><span class="line">			//<span class="number">1.</span> 获取连接对象</span><br><span class="line">			conn = JDBCUtil.getConn();</span><br><span class="line">			//<span class="number">2.</span> 创建<span class="keyword">statement</span>对象</span><br><span class="line">			st = conn.createStatement();</span><br><span class="line">			String <span class="keyword">sql</span> = "select * from t_user";</span><br><span class="line">			rs = st.executeQuery(<span class="keyword">sql</span>);</span><br><span class="line">			</span><br><span class="line">			<span class="keyword">while</span>(rs.next())&#123;</span><br><span class="line">				String userName = rs.getString("username");</span><br><span class="line">				String <span class="keyword">password</span> = rs.getString("password");</span><br><span class="line">				</span><br><span class="line">				<span class="keyword">System</span>.<span class="keyword">out</span>.println(userName+"="+<span class="keyword">password</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">		&#125; catch (<span class="keyword">Exception</span> e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;finally &#123;</span><br><span class="line">			JDBCUtil.<span class="keyword">release</span>(conn, st, rs);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>直接使用实现</p>
  <figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">testFindAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">	UserDao dao = <span class="keyword">new</span> UserDaoImpl();</span><br><span class="line">	dao.findAll();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="Statement安全问题"><a href="#Statement安全问题" class="headerlink" title="Statement安全问题"></a>Statement安全问题</h2><ol>
<li><p>Statement执行 ，其实是拼接sql语句的。即先拼接sql语句，然后在一起执行。 </p>
 <figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">String <span class="keyword">sql</span> = "select * from t_user where username='"+ username  +"' and password='"+ <span class="keyword">password</span> +"'";</span><br><span class="line"></span><br><span class="line">UserDao dao = <span class="built_in">new</span> UserDaoImpl();</span><br><span class="line">dao.<span class="keyword">login</span>("admin", "100234khsdf88' or '1=1");</span><br><span class="line">	</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t_user <span class="keyword">WHERE</span> username=<span class="string">'admin'</span> <span class="keyword">AND</span> <span class="keyword">PASSWORD</span>=<span class="string">'100234khsdf88'</span> <span class="keyword">or</span> <span class="string">'1=1'</span> </span><br><span class="line">	</span><br><span class="line">//前面先拼接<span class="keyword">sql</span>语句， 如果变量里面带有了 数据库的关键字，那么一并认为是关键字。 不认为是普通的字符串。 </span><br><span class="line">rs = st.executeQuery(<span class="keyword">sql</span>);</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="PrepareStatement"><a href="#PrepareStatement" class="headerlink" title="PrepareStatement"></a>PrepareStatement</h2><blockquote>
<p>该对象就是替换前面的statement对象。</p>
</blockquote>
<ol>
<li><p>相比较以前的statement， 预先处理给定的sql语句，对其执行语法检查。 在sql语句里面使用 ? 占位符来替代后续要传递进来的变量。 后面进来的变量值，将会被看成是字符串，不会产生任何的关键字。</p>
 <figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">String sql = <span class="string">"insert into t_user values(null , ? , ?)"</span>;</span><br><span class="line">ps = conn.prepare<span class="constructor">Statement(<span class="params">sql</span>)</span>;</span><br><span class="line">	 </span><br><span class="line"><span class="comment">//给占位符赋值 从左到右数过来，1 代表第一个问号， 永远都是从1开始。</span></span><br><span class="line">ps.set<span class="constructor">String(1, <span class="params">userName</span>)</span>;</span><br><span class="line">   ps.set<span class="constructor">String(2, <span class="params">password</span>)</span>;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>​</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>JDBC</tag>
      </tags>
  </entry>
  <entry>
    <title>Web服务技术——Servlet</title>
    <url>/2019/07/25/Web%E6%9C%8D%E5%8A%A1%E6%8A%80%E6%9C%AF%E2%80%94%E2%80%94Servlet/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="Servlet是什么"><a href="#Servlet是什么" class="headerlink" title="Servlet是什么?"></a>Servlet是什么?</h3><blockquote>
<ol>
<li>其实就是一个Java程序，运行在我们的Web服务器上，用于接收和响应客户端的HTTP请求。 </li>
</ol>
</blockquote>
<blockquote>
<ol start="2">
<li>更多的是配合动态资源来做。 当然静态资源也需要使用到Servlet，只不过是Tomcat里面已经定义好了一个 DefaultServlet</li>
</ol>
</blockquote>
<a id="more"></a>

<h3 id="Servlet执行过程"><a href="#Servlet执行过程" class="headerlink" title="Servlet执行过程"></a>Servlet执行过程</h3><h4 id="第一步：类的定义"><a href="#第一步：类的定义" class="headerlink" title="第一步：类的定义"></a>第一步：类的定义</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huang.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.Servlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletConfig;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *<span class="doctag">@author</span>	黄远志</span></span><br><span class="line"><span class="comment"> *<span class="doctag">@date</span>		2019年7月4日下午7:08:19</span></span><br><span class="line"><span class="comment"> *<span class="doctag">@GitHub</span>	https://github.com/huangyuanzhi1997</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServlet</span> <span class="keyword">implements</span> <span class="title">Servlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest req, ServletResponse res)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"HelloServlet"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> ServletConfig <span class="title">getServletConfig</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getServletInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ServletConfig config)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="第二步：Servlet的配置"><a href="#第二步：Servlet的配置" class="headerlink" title="第二步：Servlet的配置"></a>第二步：Servlet的配置</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 向tomcat报告， 我这个应用里面有这个servlet，名字叫做HelloServlet , 具体的路径是com.huang.servlet.HelloServlet --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.huang.servlet.HelloServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 注册servlet的映射。 servletName : 找到上面注册的具体servlet，url-pattern: 在地址栏上的path一定要以/打头 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/a<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<ol>
<li>找到Tomcat应用</li>
<li>找到项目</li>
<li>找web.xml，然后在里面找到url-pattern，有没有哪一个patten的内容是/a</li>
<li>找到servlet-mapping中的那个servlet-name【HelloServlet】</li>
<li>找到上面定义的servlet元素中的servlet-naem【HelloServlet】</li>
<li>找到下面定义的servlet-class，然后开始创建该类的实例</li>
<li>继而执行该servlet中的service方法 </li>
</ol>
</blockquote>
<h3 id="Servlet的通用写法"><a href="#Servlet的通用写法" class="headerlink" title="Servlet的通用写法"></a>Servlet的通用写法</h3><pre><code>Servlet (接口)
     |
     |
GenericServlet
     |
     |
HttpServlet （用于处理http的请求）</code></pre><h3 id="定义一个类，继承HttpServlet-复写doGet-和-doPost"><a href="#定义一个类，继承HttpServlet-复写doGet-和-doPost" class="headerlink" title="定义一个类，继承HttpServlet 复写doGet 和 doPost"></a>定义一个类，继承HttpServlet 复写doGet 和 doPost</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huang.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *<span class="doctag">@author</span>	黄远志</span></span><br><span class="line"><span class="comment"> *<span class="doctag">@date</span>		2019年7月4日下午7:51:01</span></span><br><span class="line"><span class="comment"> *<span class="doctag">@GitHub</span>	https://github.com/huangyuanzhi1997</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServlet02</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">		System.out.println(<span class="string">"HelloServlet02..."</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">super</span>.doGet(req, resp);</span><br><span class="line">		System.out.println(<span class="string">"get..."</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">super</span>.doPost(req, resp);</span><br><span class="line">		System.out.println(<span class="string">"post..."</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Servlet的生命周期"><a href="#Servlet的生命周期" class="headerlink" title="Servlet的生命周期"></a>Servlet的生命周期</h2><ul>
<li>生命周期</li>
</ul>
<blockquote>
<p>从创建到销毁的一段时间。</p>
</blockquote>
<ul>
<li>生命周期方法</li>
</ul>
<blockquote>
<p>从创建到销毁，所调用的那些方法。</p>
</blockquote>
<ol>
<li><p>init方法</p>
<pre><code>在创建该Servlet的实例时，就执行该方法。
一个Servlet只会初始化一次， init方法只会执行一次。
默认情况下是 ： 初次访问该Servlet，才会创建实例。</code></pre></li>
<li><p>service方法</p>
<pre><code>只要客户端来了一个请求，那么就执行这个方法了。
该方法可以被执行很多次。 一次请求，对应一次service方法的调用。</code></pre></li>
<li><p>destroy方法</p>
<pre><code>servlet销毁的时候，就会执行该方法。
1). 该项目从Tomcat的里面移除。
2). 正常关闭Tomcat就会执行 shutdown.bat。</code></pre></li>
</ol>
<blockquote>
<p>doGet 和 doPost不算生命周期方法，所谓的生命周期方法是指，从对象的创建到销毁一定会执行的方法， 但是这两个方法，不一定会执行。</p>
</blockquote>
<h3 id="让Servlet创建实例的时机提前"><a href="#让Servlet创建实例的时机提前" class="headerlink" title="让Servlet创建实例的时机提前"></a>让Servlet创建实例的时机提前</h3><ol>
<li><p>默认情况下，只有在初次访问Servlet的时候，才会执行init方法。 有的时候，我们可能需要在这个方法里面执行一些初始化工作，甚至是做一些比较耗时的逻辑。 </p>
</li>
<li><p>那么这个时候，初次访问，可能会在init方法中逗留太久的时间。 那么有没有方法可以让这个初始化的时机提前一点。 </p>
</li>
<li><p>在配置的时候， 使用load-on-startup元素来指定， 给定的数字越小，启动的时机就越早。 一般不写负数， 从2开始即可。 </p>
 <figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">&lt;servlet&gt;</span><br><span class="line">	&lt;servlet-<span class="built_in">name</span>&gt;HelloServlet04&lt;/servlet-<span class="built_in">name</span>&gt;</span><br><span class="line">	&lt;servlet-<span class="built_in">class</span>&gt;com.itheima.servlet.HelloServlet04&lt;/servlet-<span class="built_in">class</span>&gt;</span><br><span class="line">	&lt;load-<span class="keyword">on</span>-startup&gt;<span class="number">2</span>&lt;/load-<span class="keyword">on</span>-startup&gt;</span><br><span class="line">&lt;/servlet&gt;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="为什么需要有这个ServletConfig"><a href="#为什么需要有这个ServletConfig" class="headerlink" title="为什么需要有这个ServletConfig"></a>为什么需要有这个ServletConfig</h3><blockquote>
<p>Servlet的配置，通过这个对象，可以获取Servlet在配置的时候一些信息</p>
</blockquote>
<blockquote>
<p>先说 ， 再写怎么用， 最后说有什么用。</p>
</blockquote>
<ol>
<li><p>未来我们自己开发的一些应用，使用到了一些技术，或者一些代码，我们不会。 但是有人写出来了。它的代码放置在了自己的servlet类里面。 </p>
</li>
<li><p>刚好这个Servlet 里面需要一个数字或者叫做变量值。 但是这个值不能是固定了。 所以要求使用到这个Servlet的公司，在注册Servlet的时候，必须要在web.xml里面，声明init-params</p>
</li>
</ol>
<ol start="3">
<li>在开发当中比较少用。</li>
</ol>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Web</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2019/07/25/hello-world/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<a id="more"></a>

<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
</search>
